[{"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\index.tsx":"1","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\App.tsx":"3","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\RequestList.tsx":"4","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Login.tsx":"5","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Admin.tsx":"6","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Doctor.tsx":"7","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\ForumList.tsx":"8","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Register.tsx":"9","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientHome.tsx":"10","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\assets\\styles.js":"11","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\remote-functions.ts":"12","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientNavBar.tsx":"13","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\index.ts":"14","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\index.ts":"15","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\Forum.tsx":"16","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\Message.tsx":"17","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DoctorNavBar.tsx":"18"},{"size":526,"mtime":1610472835938,"results":"19","hashOfConfig":"20"},{"size":440,"mtime":1609881921408,"results":"21","hashOfConfig":"20"},{"size":1256,"mtime":1610472834911,"results":"22","hashOfConfig":"20"},{"size":6973,"mtime":1610517807396,"results":"23","hashOfConfig":"20"},{"size":18701,"mtime":1610472835766,"results":"24","hashOfConfig":"20"},{"size":274,"mtime":1610472835763,"results":"25","hashOfConfig":"20"},{"size":278,"mtime":1610510383765,"results":"26","hashOfConfig":"20"},{"size":262,"mtime":1610472835765,"results":"27","hashOfConfig":"20"},{"size":18844,"mtime":1610472835775,"results":"28","hashOfConfig":"20"},{"size":592,"mtime":1610494995640,"results":"29","hashOfConfig":"20"},{"size":277,"mtime":1610472835761,"results":"30","hashOfConfig":"20"},{"size":2790,"mtime":1610481022282,"results":"31","hashOfConfig":"20"},{"size":7783,"mtime":1610502572759,"results":"32","hashOfConfig":"20"},{"size":23,"mtime":1610472835829,"results":"33","hashOfConfig":"20"},{"size":190,"mtime":1610472835971,"results":"34","hashOfConfig":"20"},{"size":6555,"mtime":1610510390813,"results":"35","hashOfConfig":"20"},{"size":1641,"mtime":1610472835794,"results":"36","hashOfConfig":"20"},{"size":7531,"mtime":1610502958568,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"9sh8sg",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\index.tsx",[],["83","84"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\App.tsx",["85","86"],"import React, {useState} from 'react';\r\nimport './assets/primary.scss';\r\nimport { BrowserRouter as Router, Link, Route, Switch, Redirect } from 'react-router-dom';\r\nimport { Register } from './components/Register';\r\nimport { Login } from './components/Login';\r\nimport { Admin } from './components/Admin';\r\nimport { Doctor } from './components/Doctor';\r\nimport { PatientHome } from './components/PatientHome';\r\nimport { RequestList } from './components/RequestList';\r\nimport {ForumList} from './components/ForumList'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Router >\r\n        <Switch>\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route path=\"/register\" component={Register} />\r\n          <Route path=\"/admin\" component={Admin} />\r\n          <Route path=\"/doctor\" component={Doctor} />\r\n          <Route path=\"/patient\" component={PatientHome} />\r\n          <Route path=\"/requestList\" component={RequestList} />\r\n          <Route path=\"/forumList\" component={ForumList} />\r\n          <Redirect from=\"/\" to=\"/login\" /> \r\n          \r\n        </Switch>\r\n        {/* <Link to=\"/login\"> login</Link> */}\r\n        {/* <Link to=\"/patient\">Patient</Link> */}\r\n      </Router> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n      ","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\RequestList.tsx",["87","88"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Login.tsx",["89","90"],"import React, { useState } from \"react\";\r\nimport { TextField, Tabs, Tab, Button, IconButton, Card, InputAdornment, RadioGroup, Radio, FormControlLabel } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\r\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { styles } from '../assets/styles.js';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport Background from '../assets/img/medicalBackground.jpg';\r\nimport { userLogin } from '../remote/remote-functions';\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { exception } from \"console\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            boxShadow: '1px 3px 12px -3px rgba(0,0,0, 1)',\r\n            borderRadius: '1.5rem'\r\n        },\r\n        cssOutlinedInput: {\r\n            '&$focused $notchedOutline': {\r\n                borderColor: \"#014F86\",\r\n            },\r\n            height: 50,\r\n            marginTop: 0,\r\n            paddingTop: 0\r\n        },\r\n\r\n        notchedOutline: {\r\n            borderWidth: '1px',\r\n            borderColor: \"#014F86\"\r\n        },\r\n        focused: {\r\n            borderColor: \"#014F86\"\r\n        },\r\n\r\n        iconfocused: {\r\n            '&:focus': {\r\n                outline: 'none',\r\n            },\r\n        },\r\n\r\n        rootButton: {\r\n            '&:hover': {\r\n                backgroundColor: \"#014F86\",\r\n            },\r\n            background: \"#012A4A\",\r\n            borderRadius: 3,\r\n            border: 0,\r\n            color: 'white',\r\n            fontWeight: 'bold',\r\n            height: 40,\r\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n            marginTop: 15\r\n        },\r\n        indicator: {\r\n            backgroundColor: '#012A4A',\r\n            color: '#012A4A'\r\n        },\r\n    }),\r\n);\r\n\r\nfunction TabPanel(props: any) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-prevent-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-prevent-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && children}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\n\r\nexport const Login: React.FunctionComponent = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const classes = useStyles();\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n    const [hidden, setHidden] = useState(true);\r\n    const [errorUser, setErrorUser] = useState(false);\r\n    const [errorTextUser, setErrorTextUser] = useState(\"\");\r\n    const [errorPassword, setErrorPassword] = useState(false);\r\n    const [errorTextPassword, setErrorTextPassword] = useState(\"\");\r\n    const [errorAuth, setErrorAuth] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [role, setRole] = useState('');\r\n    const [tabValue, setTabValue] = useState(0);\r\n    const [match, setMatch] = useState(false);\r\n\r\n\r\n\r\n    const onChangeUsername = (event: any) => {\r\n        setErrorUser(false);\r\n        setErrorTextUser('');\r\n        setUsername(event.target.value);\r\n    }\r\n\r\n    const passwordOnChange = (event: any) => {\r\n        setErrorPassword(false);\r\n        setErrorTextPassword('');\r\n        setPassword(event.target.value);\r\n    }\r\n    const confirmPasswordOnChange = (event: any) => {\r\n        setConfirmPassword(event.target.value);\r\n    }\r\n\r\n    const handleTabChange = (event: any, newValue: any) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index: any) => {\r\n        setTabValue(index);\r\n    };\r\n\r\n    const toggleShow = () => {\r\n        setHidden(!hidden);\r\n    }\r\n\r\n    const onLogin = async () => {\r\n\r\n        if (username && password) {\r\n            try {\r\n                let user = await userLogin(role, username, password);\r\n                console.log(JSON.stringify(user))\r\n                if(user){\r\n                authentication(user);\r\n                }else{\r\n                    setErrorAuth(true)\r\n                    setError('User Not Found');\r\n                }\r\n            } catch (e) {\r\n                setErrorAuth(true)\r\n                setError('User Not Found');\r\n                console.log(e);\r\n            }\r\n        } else {\r\n            if (!password) {\r\n                setErrorPassword(true);\r\n                setErrorTextPassword('Please enter password')\r\n            }\r\n            if (!username) {\r\n                setErrorUser(true);\r\n                setErrorTextUser('Please enter user')\r\n            }\r\n        }\r\n    }\r\n\r\n    const authentication = (user: any) => {\r\n        if(user.role === \"Admin\"){\r\n            history.push({\r\n                pathname: '/admin',\r\n                state: {  //to access state use useLocation hook in function component\r\n                    adminInfo: user\r\n                },\r\n            });\r\n        }else if(user.role === \"Doctor\"){\r\n            if(user.status === 'Approved'){\r\n                history.push({\r\n                    pathname: '/doctor',\r\n                    state: {  //to access state use useLocation hook in function component\r\n                        doctorInfo: user\r\n                    },\r\n                });\r\n            }else if(user.status === 'Pending'){\r\n                setErrorAuth(true)\r\n                setError('Account is in Pending Status')\r\n            }else if(user.status === 'Rejected'){\r\n                setErrorAuth(true)\r\n                setError('Account is Rejected')\r\n            }  \r\n        }else if(user.role === \"Patient\"){\r\n            history.push({\r\n                pathname: '/patient',\r\n                state: {  //to access state use useLocation hook in function component\r\n                    patientInfo: user\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    const onRegister = () => {\r\n        if (username && password && role) {\r\n            if (password !== confirmPassword) {\r\n                setMatch(true)\r\n            } else {\r\n                history.push({\r\n                    pathname: '/register',\r\n                    state: {  //to access state use useLocation hook in function component\r\n                        role: role,\r\n                        username: username,\r\n                        password: password \r\n                    },\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const MyRadio = withStyles({\r\n        root: {\r\n            color: \"#012A4A\",\r\n            '&$checked': {\r\n                color: \"#014F86\",\r\n            },\r\n        },\r\n        checked: {},\r\n    })((props) => <Radio color=\"default\" {...props} />);\r\n\r\n    const handleRadioChange = (event: any) => {\r\n        setRole(event.target.value);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ backgroundImage: `url(${Background})`, backgroundSize: 'cover', minHeight: '100vh', height: 'auto' }}>\r\n            <h1 id=\"title\">Revature Medical Clinic</h1>\r\n            <Card className=\"cardContainer\" classes={{ root: classes.root }}>\r\n                <Tabs\r\n                    value={tabValue}\r\n                    onChange={handleTabChange}\r\n                    variant=\"fullWidth\"\r\n                    classes={{\r\n                        indicator: classes.indicator,\r\n                    }}\r\n                    className=\"loginTab\"\r\n                >\r\n                    <Tab label=\"LOGIN\" style={{ color: \"white\", backgroundColor: \"#014F86\", width: \"30%\" }} />\r\n                    <Tab label=\"REGISTER\" style={{ color: \"white\", backgroundColor: \"#014F86\" }} />\r\n                </Tabs>\r\n                {/*  ----------------------------LOGIN------------------------ */}\r\n                <TabPanel value={tabValue} index={0}>\r\n                    <form className=\"form\" noValidate>\r\n                        <div className=\"cardRadio\">\r\n                            <RadioGroup row name=\"role\" onChange={handleRadioChange} style={{ color: \"#012A4A\" }}>\r\n                                <FormControlLabel\r\n                                    value=\"Patient\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Patient\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Doctor\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Doctor\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Admin\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Admin\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                            </RadioGroup>\r\n                        </div>\r\n                        <TextField\r\n                            error={errorUser}\r\n                            helperText={errorTextUser}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            placeholder=\"Username\"\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={onChangeUsername}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <AccountCircle />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            error={errorPassword}\r\n                            helperText={errorTextPassword}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            placeholder=\"Password\"\r\n                            type={hidden ? \"password\" : \"text\"}\r\n                            value={password}\r\n                            onChange={passwordOnChange}\r\n                            style={{ marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <VpnKeyIcon />\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={toggleShow}\r\n                                            style={{ color: \"#014F86\" }}\r\n                                        >\r\n                                            {hidden ? <Visibility /> : <VisibilityOff />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <Button\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            className=\"submit\"\r\n                            onClick={() => onLogin()}\r\n                            classes={{\r\n                                root: classes.rootButton,\r\n                            }}\r\n                        > LOG IN </Button>\r\n\r\n                        {(errorAuth) ? <p style={styles.errorTextStyle}>{error}</p> : null}\r\n\r\n                    </form>\r\n                </TabPanel>\r\n                {/*  ----------------------------Register------------------------ */}\r\n\r\n                <TabPanel value={tabValue} index={1}>\r\n                    <form className=\"form\" noValidate>\r\n                        <div className=\"cardRadio\">\r\n                            <RadioGroup row name=\"role\" onChange={handleRadioChange} style={{ color: \"#012A4A\" }}>\r\n                                <FormControlLabel\r\n                                    value=\"Patient\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Patient\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Doctor\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Doctor\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                            </RadioGroup>\r\n                        </div>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            placeholder=\"New Username\"\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={onChangeUsername}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <AccountCircle />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            placeholder=\"New Password\"\r\n                            type=\"password\"\r\n                            value={password}\r\n                            onChange={passwordOnChange}\r\n                            style={{ marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <VpnKeyIcon />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"confirm password\"\r\n                            placeholder=\"Confirm Password\"\r\n                            type=\"password\"\r\n                            value={confirmPassword}\r\n                            onChange={confirmPasswordOnChange}\r\n                            style={{ marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <VpnKeyIcon />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <Button\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            className=\"submit\"\r\n                            onClick={() => onRegister()}\r\n                            classes={{\r\n                                root: classes.rootButton,\r\n                            }}\r\n                        > REGISTER </Button>\r\n\r\n                        {(match) ? <p style={styles.errorTextStyle}>Password doesn't match</p> : null}\r\n\r\n                    </form>\r\n\r\n                </TabPanel>\r\n\r\n\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Admin.tsx",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Doctor.tsx",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\ForumList.tsx",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Register.tsx",["91"],"import React, { useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { IconButton, Tooltip, Paper, Grid, InputLabel, TextField, RadioGroup, FormControlLabel, Radio, Button, Select, MenuItem } from '@material-ui/core';\r\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { doctorRegister, patientRegister } from '../remote/remote-functions';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '&$underline': {\r\n                borderBottom: '0',\r\n            },\r\n        },\r\n        underline: {\r\n            '&:after': {\r\n                borderBottom: '2px solid #012A4A',\r\n            },\r\n        },\r\n        backButton: {\r\n            '&:hover': {\r\n                color: '#014F86',\r\n            },\r\n            color: \"#012A4A\",\r\n            backgroundColor: \"#EDF2FB\",\r\n            position: 'absolute',\r\n            top: 5,\r\n            left: 5,\r\n        },\r\n        paper: {\r\n            padding: '2rem',\r\n            margin: 'auto',\r\n            width: '84%',\r\n            position: 'relative',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between',\r\n            backgroundColor: \"#EDF2FB\",\r\n        },\r\n        rootButton: {\r\n            '&:hover': {\r\n                backgroundColor: \"#014F86\",\r\n            },\r\n            background: \"#012A4A\",\r\n            borderRadius: \"2rem\",\r\n            border: 0,\r\n            color: 'white',\r\n            fontWeight: 'bold',\r\n            height: 40,\r\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n            width: '20%',\r\n            float: 'right'\r\n        },\r\n    })\r\n);\r\n\r\nexport const Register: React.FunctionComponent = (props) => {\r\n    const location: any = useLocation();\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n    const [age, setAge] = useState(0);\r\n    const [gender, setGender] = useState(\"\");\r\n    const [phone, setPhone] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [address, setAddress] = useState(\"\");\r\n    const [language, setLanguage] = useState(\"\");\r\n    const [healthcardnumber, setHealthcardnumber] = useState(\"\");\r\n    const [education, setEducation] = useState(\"\");\r\n    const [certification, setCertification] = useState(\"\");\r\n    const [speciality, setSpeciality] = useState(\"\");\r\n    const [awards, setAwards] = useState(\"\");\r\n\r\n\r\n    const onRegisterSubmit = async () => {\r\n        const patientCredentials = {\r\n            username: location.state.username,\r\n            password: location.state.password,\r\n            firstname: firstname,\r\n            lastname: lastname,\r\n            age: age,\r\n            gender: gender,\r\n            phone: phone,\r\n            email: email,\r\n            address: address,\r\n            language: language,\r\n            healthcardnumber: healthcardnumber,\r\n            role: 'Patient'\r\n        }\r\n\r\n        const doctorCredentials = {\r\n            username: location.state.username,\r\n            password: location.state.password,\r\n            firstname: firstname,\r\n            lastname: lastname,\r\n            age: age,\r\n            gender: gender,\r\n            phone: phone,\r\n            email: email,\r\n            address: address,\r\n            language: language,\r\n            education: education,\r\n            certification: certification,\r\n            speciality: speciality,\r\n            awards: awards,\r\n            status: 'Pending',\r\n            role: 'Doctor'\r\n        }\r\n\r\n        if (location.state.role === 'Doctor') {\r\n            try {\r\n                let user = await doctorRegister(doctorCredentials)\r\n                history.push('/');\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }else if (location.state.role === 'Patient') {\r\n            try {\r\n                let user = await patientRegister(patientCredentials)\r\n                console.log(\"Doctor registered -> \" + JSON.stringify(user));\r\n                history.push({\r\n                    pathname: '/patient',\r\n                    state: {  \r\n                        patientInfo: user\r\n                    },\r\n                });\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const MyRadio = withStyles({\r\n        root: {\r\n            color: \"#012A4A\",\r\n            '&$checked': {\r\n                color: \"#014F86\",\r\n            },\r\n        },\r\n        checked: {},\r\n    })((props) => <Radio color=\"default\" {...props} />);\r\n\r\n    return (\r\n        <div>\r\n            <Tooltip title=\"Go Back\">\r\n                <IconButton\r\n                    className='float-left'\r\n                    onClick={() => history.push('/')}\r\n                    classes={{\r\n                        root: classes.backButton,\r\n                    }}>\r\n                    <ArrowBackIcon style={{ fontSize: 40 }} />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <h2 id=\"registerationTitle\">Fill out the registeration details</h2>\r\n            <Paper elevation={3} classes={{ root: classes.paper }}>\r\n                <Grid container spacing={3} >\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> First Name </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={firstname}\r\n                            onChange={e => setFirstname(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Last Name </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={lastname}\r\n                            onChange={e => setLastname(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Age </InputLabel>\r\n                        <TextField\r\n                            type=\"number\"\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={age}\r\n                            onChange={e => setAge(parseInt(e.target.value))}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Gender </InputLabel>\r\n                        <RadioGroup row name=\"gender\" value={gender} onChange={(e: any) => setGender(e.target.value)}>\r\n                            <FormControlLabel value=\"female\" control={<MyRadio />} label=\"Female\" style={{ color: \"#012A4A\" }} />\r\n                            <FormControlLabel value=\"male\" control={<MyRadio />} label=\"Male\" style={{ color: \"#012A4A\" }} />\r\n                            <FormControlLabel value=\"other\" control={<MyRadio />} label=\"Other\" style={{ color: \"#012A4A\" }} />\r\n                        </RadioGroup>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Phone Number</InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={phone}\r\n                            onChange={e => setPhone(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Email Address</InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={email}\r\n                            onChange={e => setEmail(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Residential Address </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={address}\r\n                            onChange={e => setAddress(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Language Spoken </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={language}\r\n                            onChange={e => setLanguage(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    {\r\n                        (location.state.role === 'Patient') ?\r\n                            <Grid item xs={12}>\r\n                                <InputLabel style={{ marginBottom: 0 }}> Health Card Number </InputLabel>\r\n                                <TextField\r\n                                    variant=\"filled\"\r\n                                    fullWidth\r\n                                    value={healthcardnumber}\r\n                                    onChange={e => setHealthcardnumber(e.target.value)}\r\n                                    style={{ marginBottom: 5, marginTop: 5 }}\r\n                                    InputProps={{\r\n                                        classes: {\r\n                                            root: classes.root,\r\n                                            underline: classes.underline,\r\n                                        },\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                    {\r\n                        (location.state.role === 'Doctor') ?\r\n                            <>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}> Speciality </InputLabel>\r\n                                    <Select\r\n                                        variant=\"filled\"\r\n                                        value={speciality}\r\n                                        fullWidth\r\n                                        onChange={e => setSpeciality(String(e.target.value))}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                    >\r\n                                        <MenuItem value={'Allergy and immunology'}>Allergy and immunology</MenuItem>\r\n                                        <MenuItem value={'Anesthesiologist'}>Anesthesiologist</MenuItem>\r\n                                        <MenuItem value={'Cardiologist'}>Cardiologist</MenuItem>\r\n                                        <MenuItem value={'Dermatology'}>Dermatology</MenuItem>\r\n                                        <MenuItem value={'Emergency medicine'}>Emergency medicine</MenuItem>\r\n                                        <MenuItem value={'Family medicine'}>Family medicine</MenuItem>\r\n                                        <MenuItem value={'Medical genetics'}>Medical genetics</MenuItem>\r\n                                        <MenuItem value={'Neurology'}>Neurology</MenuItem>\r\n                                        <MenuItem value={'Ophthalmology'}>Ophthalmology</MenuItem>\r\n                                        <MenuItem value={'Pathology'}>Pathology</MenuItem>\r\n                                        <MenuItem value={'Physical medicine and rehabilitation'}>Physical medicine and rehabilitation</MenuItem>\r\n                                        <MenuItem value={'Psychiatry'}>Psychiatry</MenuItem>\r\n                                        <MenuItem value={'Radiation oncology'}>Radiation oncology</MenuItem>\r\n                                        <MenuItem value={'Surgery'}>Surgery</MenuItem>\r\n                                        <MenuItem value={'Urology'}>Urology</MenuItem>\r\n                                    </Select>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}> Certifications </InputLabel>\r\n                                    <TextField\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                        value={certification}\r\n                                        onChange={e => setCertification(e.target.value)}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                        InputProps={{\r\n                                            classes: {\r\n                                                root: classes.root,\r\n                                                underline: classes.underline,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}> Education Details </InputLabel>\r\n                                    <TextField\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                        multiline\r\n                                        rows={5}\r\n                                        value={education}\r\n                                        onChange={e => setEducation(e.target.value)}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                        InputProps={{\r\n                                            classes: {\r\n                                                root: classes.root,\r\n                                                underline: classes.underline,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}> Awards </InputLabel>\r\n                                    <TextField\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                        multiline\r\n                                        rows={5}\r\n                                        value={awards}\r\n                                        onChange={e => setAwards(e.target.value)}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                        InputProps={{\r\n                                            classes: {\r\n                                                root: classes.root,\r\n                                                underline: classes.underline,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            type=\"button\"\r\n                            variant=\"contained\"\r\n                            className=\"submit\"\r\n                            onClick={() => onRegisterSubmit()}\r\n                            classes={{\r\n                                root: classes.rootButton,\r\n                            }}\r\n                        > REGISTER </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientHome.tsx",["92"],"import React from 'react';\r\nimport '../assets/patient.scss'\r\nimport { PatientNavBar } from './PatientNavBar';\r\nimport { RequestList } from './RequestList';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n\r\n\r\nexport const PatientHome: React.FunctionComponent<any> = () => {\r\n    const location: any = useLocation();\r\n    return(\r\n        <>\r\n                <PatientNavBar patientInfo={location.state.patientInfo}>\r\n                    <div>{location.state.patientInfo.patientId}</div>\r\n                </PatientNavBar>\r\n\r\n          </>  \r\n        \r\n    )\r\n}\r\n\r\nexport default PatientHome;","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\assets\\styles.js",[],["93","94"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\remote-functions.ts",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientNavBar.tsx",["95"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SpeakerNotesIcon from '@material-ui/icons/SpeakerNotes';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    appBar: {\r\n      transition: theme.transitions.create(['margin', 'width'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n      transition: theme.transitions.create(['margin', 'width'], {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n      display: 'none',\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n      justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n      transition: theme.transitions.create('margin', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n      transition: theme.transitions.create('margin', {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n      marginLeft: 0,\r\n    },\r\n    toolbar: {\r\n      backgroundColor: \"#014F86\"\r\n    }\r\n  }),\r\n);\r\n\r\n\r\n\r\n\r\nexport const PatientNavBar:React.FunctionComponent<any> = (props) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = useState(false);\r\n  const history = useHistory();\r\n  const location: any = useLocation();\r\n\r\n  const navbarData = [\r\n    {\r\n      name: 'Home',\r\n      path: '/patient',\r\n    },\r\n    {\r\n      name: 'Past requests',\r\n      path: '/requestList',\r\n    },\r\n    {\r\n      name: 'Create request',\r\n      path: '/',\r\n    },\r\n    {\r\n      name: 'Forum',\r\n      path: '/forumList',\r\n    },\r\n    {\r\n      name: 'Logout',\r\n      path: '/',\r\n    }\r\n  ]\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n \r\n  const homeClicked = () => {\r\n    history.push({\r\n      pathname: navbarData[0].path,\r\n      state: {  //to access state use useLocation hook in function component\r\n        patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \r\n    }\r\n  })\r\n  }\r\n\r\n  const requestListClicked = () => {\r\n      history.push({\r\n        pathname: navbarData[1].path,\r\n        state: {  //to access state use useLocation hook in function component\r\n            patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \r\n        }\r\n    })\r\n  }\r\n\r\n  const createRequestClicked = () => {\r\n    history.push({\r\n      pathname: navbarData[2].path,\r\n      state: {  //to access state use useLocation hook in function component\r\n          patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \r\n      }\r\n  })\r\n  }\r\n\r\n  const forumClicked = () => {\r\n    history.push({\r\n      pathname: navbarData[3].path,\r\n      state: {  //to access state use useLocation hook in function component\r\n          patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \r\n      }\r\n  })\r\n  }\r\n\r\n  const logoutClicked = () => {\r\n    history.push(navbarData[4].path)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h5\" noWrap>\r\n            Revature Medical Clinic\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n\r\n          <List>\r\n\r\n                <ListItem onClick={homeClicked}  button key={navbarData[0].name}>\r\n                <ListItemIcon><HomeIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[0].name} />\r\n                </ListItem>\r\n          \r\n                <ListItem onClick={requestListClicked}  button key={navbarData[1].name}>\r\n                <ListItemIcon><DescriptionIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[1].name} />\r\n                </ListItem>\r\n           \r\n                <ListItem onClick={createRequestClicked}  button key={navbarData[2].name}>\r\n                <ListItemIcon><NoteAddIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[2].name} />\r\n                </ListItem>\r\n              \r\n                <ListItem onClick={forumClicked}  button key={navbarData[3].name}>\r\n                <ListItemIcon><SpeakerNotesIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[3].name} />\r\n                </ListItem>\r\n\r\n                <ListItem onClick={logoutClicked} button key={navbarData[4].name}>\r\n                <ListItemIcon><ExitToAppIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[4].name} />\r\n                </ListItem>\r\n              \r\n          </List>\r\n        \r\n        <Divider />\r\n      </Drawer>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <div className={classes.drawerHeader} />\r\n        <Typography component=\"span\">\r\n          {props.children}\r\n        </Typography>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientNavBar","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\index.ts",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\index.ts",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\Forum.tsx",["96","97","98","99","100","101"],"import { spawn } from \"child_process\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { forumList, messageList } from \"./mockups\";\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Message } from \"./Message\";\r\nimport { Button, Container } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { postTopic,postMessage } from '../../remote/remote-functions';\r\nimport moment from 'moment';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"60%\",\r\n      maxWidth: \"36ch\",\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    inline: {\r\n      display: \"inline\",\r\n    },\r\n  })\r\n);\r\n\r\nexport const Forum: React.FC = (props) => {\r\n  const [forums, setForums] = useState<any>([]);\r\n\r\n  const [message, setMessage] = useState<any>([]);\r\n\r\n  const [isShow, setIsShow] = useState<any>(false);\r\n\r\n  const [topic, setTopic] = useState<string>();\r\n\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const [inputShow, setInputShow] = useState<boolean>(false);\r\n\r\n  const [inputTopic,setInputTopic] = useState<string>();\r\n\r\n  const [inputMessage, setInputMessage] = useState<string>();\r\n\r\n  const [currentTopic,setCurrentTopic]=useState<number>();\r\n\r\n  async function getMessagesByForumId(forumId: number, topic: string) {\r\n    setIsShow(true);\r\n\r\n    setTopic(topic);\r\n    setLoading(true);\r\n    setInputShow(false);\r\n    setCurrentTopic(forumId);\r\n    let url = `http://localhost:8080/message/${forumId}`;\r\n    try {\r\n      let response = await fetch(url);\r\n      const data = await response.json();\r\n      console.log(data);\r\n      setMessage(data);\r\n      setLoading(false);\r\n      return data;\r\n    } catch (error) {\r\n      console.log(\"Request Failed\", error);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const onPostTopic=async()=>{\r\n    const topicstring={\r\n      topic:inputTopic\r\n    }\r\n    const data=await postTopic(topicstring);\r\n    setForums([...forums,data])\r\n    setInputTopic('');\r\n    setInputShow(false)\r\n\r\n  }\r\n\r\n  const handleTopicChange=e=>{\r\n    \r\n    setInputTopic(e.target.value);\r\n  }\r\n  const handleMessageChange=e=>{\r\n    setInputMessage(e.target.value);\r\n    \r\n  }\r\n\r\n  const onPostMessage=async()=>{\r\n    const currentInputMessage={\r\n      message:inputMessage,\r\n      forumId:{\r\n        forumId:currentTopic\r\n      }\r\n    }\r\n    const data=await postMessage(currentInputMessage);\r\n    setInputMessage('')\r\n    setMessage([...message,data])\r\n    \r\n  }\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchforum = async () => {\r\n      try {\r\n        const responses = await fetch(\"http://localhost:8080/forum\");\r\n        const data = await responses.json();\r\n\r\n        setForums(data);\r\n        console.log(data);\r\n      } catch (e) {\r\n        console.log(e.message);\r\n      }\r\n    };\r\n    fetchforum();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {isShow ? (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            setIsShow(false);\r\n          }}\r\n        >\r\n          Back\r\n        </Button>\r\n      ) : null}\r\n      {isShow ? <Typography variant=\"h4\">{topic}</Typography> : null}\r\n      <Grid container spacing={3}>\r\n        \r\n        {!isShow ? (\r\n          <Grid item xs={4}>\r\n            <Button  onClick={()=>{setInputShow(true)}} >New Post</Button>\r\n            <List className={classes.root}>\r\n              {forums.map((r, index) => (\r\n                <ListItem\r\n                  alignItems=\"flex-start\"\r\n                  onClick={() => getMessagesByForumId(r.forumId, r.topic)}\r\n                >\r\n             \r\n                  <ListItemText\r\n                    primary={<Typography variant=\"h4\">{r.topic}</Typography>}\r\n                    secondary={\r\n                      <React.Fragment>\r\n                        <Typography\r\n                          component=\"span\"\r\n                          variant=\"body2\"\r\n                          className={classes.inline}\r\n                          color=\"textPrimary\"\r\n                        >\r\n                          by:{r.username}\r\n                          <br />\r\n                        </Typography>\r\n                        Submitted:{moment(r.timeStamp).format('YYYY-MM-DD HH:mm:ss')}\r\n                      </React.Fragment>\r\n                    }\r\n                  />\r\n                </ListItem>\r\n              ))}\r\n\r\n              <Divider variant=\"inset\" component=\"li\" />\r\n            </List>\r\n          </Grid>\r\n        ) : null}\r\n        {inputShow ? (\r\n          <div>\r\n            <TextField id=\"standard-basic\" label=\"Input your topic\" name=\"topic\" value={inputTopic} onChange={handleTopicChange}/><br/>\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\"  onClick={() => onPostTopic()}>\r\n              Submit\r\n            </Button>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={()=>setInputShow(false)}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        ) : null}\r\n        {/* <Button onClick= {()=>getMessagesByForumId(3)}>click</Button> */}\r\n        {loading ? <Typography variant=\"h4\">Loading......</Typography> : null}\r\n        {isShow ? (\r\n          <Grid item xs={8}>\r\n            {!loading\r\n              ? message.map((m, index) => (\r\n                  <Message\r\n                    message={m.message}\r\n                    timestamp={moment(m.timeStamp).format('YYYY-MM-DD HH:mm:ss')}\r\n                    doctor={!m.doctorId ? \"\" : m.doctorId.username}\r\n                    patient={!m.patientId ? \"\" : m.patientId.username}\r\n                  />\r\n                ))\r\n              : null}\r\n            {!loading ? (\r\n              <div >\r\n                <TextField id=\"standard-basic\" label=\"Write your post\" name=\"message\" value={inputMessage} onChange={handleMessageChange}/>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onPostMessage}>\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            ) : null}\r\n          </Grid>\r\n        ) : null}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\Message.tsx",["102","103","104","105","106","107","108","109","110"],"import { spawn } from \"child_process\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { forumList } from \"./mockups\";\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\ninterface MessageIdProps {\r\n  message: string;\r\n  timestamp: string;\r\n  doctor: string;\r\n  patient: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      maxWidth: \"36ch\",\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    inline: {\r\n      display: \"inline\",\r\n    },\r\n  })\r\n);\r\n\r\nexport const Message: React.FC<MessageIdProps> = ({\r\n  message,\r\n  timestamp,\r\n  doctor,\r\n  patient,\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <ListItemText\r\n        primary={<Typography variant=\"h4\">{message}</Typography>}\r\n        secondary={\r\n          <React.Fragment>\r\n            <Typography\r\n              component=\"span\"\r\n              variant=\"body2\"\r\n              className={classes.inline}\r\n              color=\"textPrimary\"\r\n            >\r\n              by:{patient ? patient : doctor}\r\n              <br />\r\n            </Typography>\r\n            Submitted:{timestamp}\r\n          </React.Fragment>\r\n        }\r\n      />\r\n      \r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DoctorNavBar.tsx",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":16,"nodeType":"117","messageId":"118","endLine":1,"endColumn":24},{"ruleId":"115","severity":1,"message":"119","line":3,"column":35,"nodeType":"117","messageId":"118","endLine":3,"endColumn":39},{"ruleId":"115","severity":1,"message":"120","line":2,"column":8,"nodeType":"117","messageId":"118","endLine":2,"endColumn":13},{"ruleId":"121","severity":1,"message":"122","line":127,"column":8,"nodeType":"123","endLine":127,"endColumn":10,"suggestions":"124"},{"ruleId":"115","severity":1,"message":"125","line":13,"column":10,"nodeType":"117","messageId":"118","endLine":13,"endColumn":19},{"ruleId":"115","severity":1,"message":"126","line":129,"column":11,"nodeType":"117","messageId":"118","endLine":129,"endColumn":28},{"ruleId":"115","severity":1,"message":"127","line":114,"column":21,"nodeType":"117","messageId":"118","endLine":114,"endColumn":25},{"ruleId":"115","severity":1,"message":"128","line":4,"column":10,"nodeType":"117","messageId":"118","endLine":4,"endColumn":21},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"119","line":23,"column":10,"nodeType":"117","messageId":"118","endLine":23,"endColumn":14},{"ruleId":"115","severity":1,"message":"129","line":1,"column":10,"nodeType":"117","messageId":"118","endLine":1,"endColumn":15},{"ruleId":"115","severity":1,"message":"130","line":3,"column":10,"nodeType":"117","messageId":"118","endLine":3,"endColumn":19},{"ruleId":"115","severity":1,"message":"131","line":3,"column":21,"nodeType":"117","messageId":"118","endLine":3,"endColumn":32},{"ruleId":"115","severity":1,"message":"132","line":9,"column":8,"nodeType":"117","messageId":"118","endLine":9,"endColumn":22},{"ruleId":"115","severity":1,"message":"133","line":10,"column":8,"nodeType":"117","messageId":"118","endLine":10,"endColumn":14},{"ruleId":"115","severity":1,"message":"134","line":13,"column":18,"nodeType":"117","messageId":"118","endLine":13,"endColumn":27},{"ruleId":"115","severity":1,"message":"129","line":1,"column":10,"nodeType":"117","messageId":"118","endLine":1,"endColumn":15},{"ruleId":"115","severity":1,"message":"116","line":2,"column":17,"nodeType":"117","messageId":"118","endLine":2,"endColumn":25},{"ruleId":"115","severity":1,"message":"135","line":2,"column":27,"nodeType":"117","messageId":"118","endLine":2,"endColumn":36},{"ruleId":"115","severity":1,"message":"130","line":3,"column":10,"nodeType":"117","messageId":"118","endLine":3,"endColumn":19},{"ruleId":"115","severity":1,"message":"136","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":12},{"ruleId":"115","severity":1,"message":"137","line":6,"column":8,"nodeType":"117","messageId":"118","endLine":6,"endColumn":16},{"ruleId":"115","severity":1,"message":"138","line":7,"column":8,"nodeType":"117","messageId":"118","endLine":7,"endColumn":15},{"ruleId":"115","severity":1,"message":"132","line":9,"column":8,"nodeType":"117","messageId":"118","endLine":9,"endColumn":22},{"ruleId":"115","severity":1,"message":"133","line":10,"column":8,"nodeType":"117","messageId":"118","endLine":10,"endColumn":14},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getContent'. Either include it or remove the dependency array.","ArrayExpression",["141"],"'exception' is defined but never used.","'handleChangeIndex' is assigned a value but never used.","'user' is assigned a value but never used.","'RequestList' is defined but never used.","'spawn' is defined but never used.","'forumList' is defined but never used.","'messageList' is defined but never used.","'ListItemAvatar' is defined but never used.","'Avatar' is defined but never used.","'Container' is defined but never used.","'useEffect' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'Divider' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},"Update the dependencies array to be: [getContent]",{"range":"144","text":"145"},[4019,4021],"[getContent]"]