[{"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\index.tsx":"1","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\App.tsx":"3","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\RequestList.tsx":"4","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Login.tsx":"5","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Admin.tsx":"6","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Doctor.tsx":"7","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\ForumList.tsx":"8","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Register.tsx":"9","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientHome.tsx":"10","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\assets\\styles.js":"11","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\remote-functions.ts":"12","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientNavBar.tsx":"13","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\index.ts":"14","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\index.ts":"15","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\Forum.tsx":"16","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\Message.tsx":"17","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DoctorNavBar.tsx":"18","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Request.tsx":"19","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\common\\DoctorsList.tsx":"20","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\common\\DoctorInfoItem.tsx":"21","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DocRequestList.tsx":"22","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PastRequestList.tsx":"23"},{"size":526,"mtime":1610472835938,"results":"24","hashOfConfig":"25"},{"size":440,"mtime":1609881921408,"results":"26","hashOfConfig":"25"},{"size":1584,"mtime":1610752990501,"results":"27","hashOfConfig":"25"},{"size":7449,"mtime":1610739423750,"results":"28","hashOfConfig":"25"},{"size":18663,"mtime":1610666962001,"results":"29","hashOfConfig":"25"},{"size":4171,"mtime":1610666961980,"results":"30","hashOfConfig":"25"},{"size":2815,"mtime":1610752964606,"results":"31","hashOfConfig":"25"},{"size":514,"mtime":1610752964649,"results":"32","hashOfConfig":"25"},{"size":19674,"mtime":1610666962011,"results":"33","hashOfConfig":"25"},{"size":635,"mtime":1610666962002,"results":"34","hashOfConfig":"25"},{"size":277,"mtime":1610472835761,"results":"35","hashOfConfig":"25"},{"size":6899,"mtime":1610752964792,"results":"36","hashOfConfig":"25"},{"size":7998,"mtime":1610655267933,"results":"37","hashOfConfig":"25"},{"size":23,"mtime":1610472835829,"results":"38","hashOfConfig":"25"},{"size":190,"mtime":1610472835971,"results":"39","hashOfConfig":"25"},{"size":11485,"mtime":1610752964660,"results":"40","hashOfConfig":"25"},{"size":1641,"mtime":1610472835794,"results":"41","hashOfConfig":"25"},{"size":7914,"mtime":1610753089775,"results":"42","hashOfConfig":"25"},{"size":6152,"mtime":1610749193384,"results":"43","hashOfConfig":"25"},{"size":687,"mtime":1610666962013,"results":"44","hashOfConfig":"25"},{"size":6845,"mtime":1610752964658,"results":"45","hashOfConfig":"25"},{"size":8893,"mtime":1610752964604,"results":"46","hashOfConfig":"25"},{"size":5358,"mtime":1610752964652,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"9sh8sg",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"50"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"50"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\index.tsx",[],["108","109"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\App.tsx",["110","111"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\RequestList.tsx",["112","113"],"import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport PatientNavBar from './PatientNavBar'\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { Button, Grid } from '@material-ui/core';\r\nimport { getRequestList } from '../remote/remote-functions';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Preview, print } from 'react-html2pdf';\r\n\r\ninterface IPatient{\r\n    healthcardnumber:number,\r\n    firstname:string,\r\n    lastname:string\r\n\r\n}\r\n\r\ninterface IDoctor{\r\n    firstname:string\r\n    lastname:string\r\n    email:string\r\n    phone:string\r\n    \r\n}\r\ninterface IReqList{\r\n    patientId:IPatient,\r\n    doctorId:IDoctor,\r\n    problem:string,\r\n    responsed:boolean,\r\n    timeStamp:string,\r\n    requestId:number\r\n    doctorresponse:string\r\n    hasappointment:boolean\r\n    prescription:string\r\n    timeResponded:string\r\n}\r\n\r\n\r\n\r\nexport const RequestList:React.FunctionComponent<any> = () => {\r\n\r\n    const [data, setRequestList] = useState<IReqList[]>([])\r\n    const location: any = useLocation()\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            marginLeft: '5%',\r\n            marginRight: '5%',\r\n        },\r\n        heading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            flexBasis: '33.33%',\r\n            flexShrink: 0,\r\n        },\r\n        resolvedHeading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            color: \"green\",\r\n        },\r\n        pendingHeading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            color: \"orange\",\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n            \r\n        },\r\n        accordionBackground: {\r\n            backgroundColor: \"#EDF2FB\"\r\n        },\r\n        rootButton: {\r\n            '&:hover': {\r\n                backgroundColor: \"#014F86\",\r\n            },\r\n            background: \"#012A4A\",\r\n            borderRadius: 3,\r\n            border: 0,\r\n            color: 'white',\r\n            fontWeight: 'bold',\r\n            height: 40,\r\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n            marginTop: 15\r\n        },\r\n        doctor: {\r\n            color: \"#014F86\",\r\n            fontWeight: \"bold\",\r\n            display: \"inline\"\r\n        },\r\n        accordionHeading: {\r\n            color: \"#012A4A\"\r\n        }\r\n    }),\r\n    )\r\n\r\n    function downloadDom(){\r\n        print('prescription', 'jsx-template')\r\n    }\r\n\r\n    function getDoctorInfo(dinfo:IDoctor, req:IReqList){\r\n\r\n        return(\r\n            <>\r\n            {console.log(req)}\r\n            <h4 className={classes.accordionHeading}>Doctor's Response:</h4>\r\n            <Grid container spacing={1}>\r\n                <Grid  item xs={4}>Doctor's name:{dinfo.firstname} {dinfo.lastname}  </Grid>  \r\n                <Grid item xs={4}></Grid>\r\n                <Grid item xs={4}></Grid>\r\n\r\n                <Grid item xs={6}>Doctor's contact information: {dinfo.email}/{dinfo.phone}</Grid>\r\n                <Grid item xs={6}></Grid>\r\n                <Grid item xs={12}>Reponse date: {req.timeStamp}</Grid>\r\n                <Grid item xs={12}>Doctor's reponse: {req.doctorresponse}</Grid>\r\n                <Grid item xs={12}>Appointment needed: {req.hasappointment ? \"Yes\" : \"No\"}</Grid>\r\n                <Grid item xs={12}>Prescription: {req.prescription ? req.prescription : \"N/A\"}</Grid>\r\n                <Grid item xs={12}><Button variant=\"contained\" onClick={() => downloadDom()} classes={{\r\n                                root: classes.rootButton,\r\n                            }}>Download</Button></Grid>\r\n            </Grid> \r\n            \r\n            </>\r\n        )\r\n    }\r\n\r\n    async function getContent(){\r\n        console.log(location.state.patientInfo.patientId)\r\n        let getReqList = await getRequestList(location.state.patientInfo.patientId)\r\n        setRequestList(getReqList)\r\n    } \r\n\r\n    useEffect(() => {\r\n        getContent()\r\n    }, [])\r\n\r\n    \r\n        const classes = useStyles();\r\n        const [expanded, setExpanded] = React.useState<string | false>(false);\r\n      \r\n        const handleChange = (panel: string) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\r\n          setExpanded(isExpanded ? panel : false);\r\n        }\r\n      \r\n\r\n        return(\r\n            \r\n            <PatientNavBar>\r\n                <Preview id={'jsx-template'}>\r\n                    <div className={classes.root} >\r\n                    \r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={3}>\r\n                        \r\n                        </Grid>\r\n                        <Grid item xs={3}>{data[0] ? data[0].patientId.firstname : \"\"} {data[0] ? data[0].patientId.lastname : \"\"}</Grid>\r\n                        <Grid item xs={3}>HCN:{data[0] ? data[0].patientId.healthcardnumber: \"\"}</Grid>\r\n                        <Grid item xs={3}></Grid>\r\n                        {data.map(text => \r\n                            <Grid item xs={12}>\r\n                                <Accordion className={classes.accordionBackground} expanded={expanded === `${text.requestId}`} onChange={handleChange(`${text.requestId}`)}>\r\n                                    <AccordionSummary\r\n                                        expandIcon={<ExpandMoreIcon />}\r\n                                        aria-controls=\"panel1bh-content\"\r\n                                        id=\"panel1bh-header\"\r\n                                        >\r\n                                        <Typography className={classes.heading}>Reference number: {text.requestId}</Typography>\r\n                                        <Typography> <span>Status: </span><span className={text.responsed ? classes.resolvedHeading : classes.pendingHeading}>{text.responsed ? \"  Resolved\" : \"  Pending\"}</span></Typography>\r\n                                    </AccordionSummary>\r\n                                <AccordionDetails>\r\n                                    <Typography>\r\n                                        <h4 className={classes.accordionHeading}>Request Information:</h4>\r\n                                        <Grid container spacing={1}>\r\n                                            <Grid item xs={12}>Request created: {text.timeStamp}</Grid>\r\n                                            <Grid item xs={12}>Problem/Symptoms: {text.problem}</Grid>\r\n                                        </Grid>\r\n                                        <br/>\r\n                                        <br/>\r\n                                        {text.doctorId ? getDoctorInfo(text.doctorId, text) : \"\"}\r\n                                    </Typography>\r\n                                </AccordionDetails>\r\n                                </Accordion>\r\n                            </Grid>\r\n                        )}\r\n                                    \r\n                    </Grid>    \r\n                    </div>\r\n                </Preview>\r\n                \r\n            </PatientNavBar> \r\n        )\r\n    \r\n}\r\n","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Login.tsx",["114","115"],"import React, { useState } from \"react\";\r\nimport { TextField, Tabs, Tab, Button, IconButton, Card, InputAdornment, RadioGroup, Radio, FormControlLabel } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\r\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { styles } from '../assets/styles.js';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport Background from '../assets/img/medicalBackground.jpg';\r\nimport { userLogin } from '../remote/remote-functions';\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { exception } from \"console\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            boxShadow: '1px 3px 12px -3px rgba(0,0,0, 1)',\r\n            borderRadius: '1.5rem'\r\n        },\r\n        cssOutlinedInput: {\r\n            '&$focused $notchedOutline': {\r\n                borderColor: \"#014F86\",\r\n            },\r\n            height: 50,\r\n            marginTop: 0,\r\n            paddingTop: 0\r\n        },\r\n\r\n        notchedOutline: {\r\n            borderWidth: '1px',\r\n            borderColor: \"#014F86\"\r\n        },\r\n        focused: {\r\n            borderColor: \"#014F86\"\r\n        },\r\n\r\n        iconfocused: {\r\n            '&:focus': {\r\n                outline: 'none',\r\n            },\r\n        },\r\n\r\n        rootButton: {\r\n            '&:hover': {\r\n                backgroundColor: \"#014F86\",\r\n            },\r\n            background: \"#012A4A\",\r\n            borderRadius: 3,\r\n            border: 0,\r\n            color: 'white',\r\n            fontWeight: 'bold',\r\n            height: 40,\r\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n            marginTop: 15\r\n        },\r\n        indicator: {\r\n            backgroundColor: '#012A4A',\r\n            color: '#012A4A'\r\n        },\r\n    }),\r\n);\r\n\r\nfunction TabPanel(props: any) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-prevent-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-prevent-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && children}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\n\r\nexport const Login: React.FunctionComponent = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const classes = useStyles();\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n    const [hidden, setHidden] = useState(true);\r\n    const [errorUser, setErrorUser] = useState(false);\r\n    const [errorTextUser, setErrorTextUser] = useState(\"\");\r\n    const [errorPassword, setErrorPassword] = useState(false);\r\n    const [errorTextPassword, setErrorTextPassword] = useState(\"\");\r\n    const [errorAuth, setErrorAuth] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [role, setRole] = useState('');\r\n    const [tabValue, setTabValue] = useState(0);\r\n    const [match, setMatch] = useState(false);\r\n\r\n\r\n\r\n    const onChangeUsername = (event: any) => {\r\n        setErrorUser(false);\r\n        setErrorTextUser('');\r\n        setUsername(event.target.value);\r\n    }\r\n\r\n    const passwordOnChange = (event: any) => {\r\n        setErrorPassword(false);\r\n        setErrorTextPassword('');\r\n        setPassword(event.target.value);\r\n    }\r\n    const confirmPasswordOnChange = (event: any) => {\r\n        setConfirmPassword(event.target.value);\r\n    }\r\n\r\n    const handleTabChange = (event: any, newValue: any) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index: any) => {\r\n        setTabValue(index);\r\n    };\r\n\r\n    const toggleShow = () => {\r\n        setHidden(!hidden);\r\n    }\r\n\r\n    const onLogin = async () => {\r\n\r\n        if (username && password) {\r\n            try {\r\n                let user = await userLogin(role, username, password);\r\n                console.log(JSON.stringify(user))\r\n                if(user){\r\n                authentication(user);\r\n                }else{\r\n                    setErrorAuth(true)\r\n                    setError('User Not Found');\r\n                }\r\n            } catch (e) {\r\n                setErrorAuth(true)\r\n                setError('User Not Found');\r\n                console.log(e);\r\n            }\r\n        } else {\r\n            if (!password) {\r\n                setErrorPassword(true);\r\n                setErrorTextPassword('Please enter password')\r\n            }\r\n            if (!username) {\r\n                setErrorUser(true);\r\n                setErrorTextUser('Please enter user')\r\n            }\r\n        }\r\n    }\r\n\r\n    const authentication = (user: any) => {\r\n        if(user.role === \"Admin\"){\r\n            history.push({\r\n                pathname: '/admin',\r\n                state: {  //to access state use useLocation hook in function component\r\n                    adminInfo: user\r\n                },\r\n            });\r\n        }else if(user.role === \"Doctor\"){\r\n            if(user.status === 'Approved'){\r\n                history.push({\r\n                    pathname: '/doctor',\r\n                    state: {  //to access state use useLocation hook in function component\r\n                        doctorInfo: user\r\n                    },\r\n                });\r\n            }else if(user.status === 'Pending'){\r\n                setErrorAuth(true)\r\n                setError('Account is in Pending Status')\r\n            }else if(user.status === 'Rejected'){\r\n                setErrorAuth(true)\r\n                setError('Account is Rejected')\r\n            }  \r\n        }else if(user.role === \"Patient\"){\r\n            history.push({\r\n                pathname: '/patient',\r\n                state: {  //to access state use useLocation hook in function component\r\n                    patientInfo: user\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    const onRegister = () => {\r\n        if (username && password && role) {\r\n            if (password !== confirmPassword) {\r\n                setMatch(true)\r\n            } else {\r\n                history.push({\r\n                    pathname: '/register',\r\n                    state: {  //to access state use useLocation hook in function component\r\n                        role: role,\r\n                        username: username,\r\n                        password: password \r\n                    },\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const MyRadio = withStyles({\r\n        root: {\r\n            color: \"#012A4A\",\r\n            '&$checked': {\r\n                color: \"#014F86\",\r\n            },\r\n        },\r\n        checked: {},\r\n    })((props) => <Radio color=\"default\" {...props} />);\r\n\r\n    const handleRadioChange = (event: any) => {\r\n        setRole(event.target.value);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ backgroundImage: `url(${Background})`, backgroundSize: 'cover', minHeight: '100vh', height: 'auto' }}>\r\n            <h1 id=\"title\">Revature Medical Clinic</h1>\r\n            <Card className=\"cardContainer\" classes={{ root: classes.root }}>\r\n                <Tabs\r\n                    value={tabValue}\r\n                    onChange={handleTabChange}\r\n                    variant=\"fullWidth\"\r\n                    classes={{\r\n                        indicator: classes.indicator,\r\n                    }}\r\n                    className=\"loginTab\"\r\n                >\r\n                    <Tab label=\"LOGIN\" style={{ color: \"white\", backgroundColor: \"#014F86\", width: \"30%\" }} />\r\n                    <Tab label=\"REGISTER\" style={{ color: \"white\", backgroundColor: \"#014F86\" }} />\r\n                </Tabs>\r\n                {/*  ----------------------------LOGIN------------------------ */}\r\n                <TabPanel value={tabValue} index={0}>\r\n                    <form className=\"form\" noValidate>\r\n                        <div className=\"cardRadio\">\r\n                            <RadioGroup row name=\"role\" onChange={handleRadioChange} style={{ color: \"#012A4A\" }}>\r\n                                <FormControlLabel\r\n                                    value=\"Patient\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Patient\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Doctor\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Doctor\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Admin\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Admin\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                            </RadioGroup>\r\n                        </div>\r\n                        <TextField\r\n                            error={errorUser}\r\n                            helperText={errorTextUser}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            placeholder=\"Username\"\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={onChangeUsername}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <AccountCircle />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            error={errorPassword}\r\n                            helperText={errorTextPassword}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            placeholder=\"Password\"\r\n                            type={hidden ? \"password\" : \"text\"}\r\n                            value={password}\r\n                            onChange={passwordOnChange}\r\n                            style={{ marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <VpnKeyIcon />\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={toggleShow}\r\n                                            style={{ color: \"#014F86\" }}\r\n                                        >\r\n                                            {hidden ? <Visibility /> : <VisibilityOff />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <Button\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            className=\"submit\"\r\n                            onClick={() => onLogin()}\r\n                            classes={{\r\n                                root: classes.rootButton,\r\n                            }}\r\n                        > LOG IN </Button>\r\n\r\n                        {(errorAuth) ? <p style={styles.errorTextStyle}>{error}</p> : null}\r\n\r\n                    </form>\r\n                </TabPanel>\r\n                {/*  ----------------------------Register------------------------ */}\r\n\r\n                <TabPanel value={tabValue} index={1}>\r\n                    <form className=\"form\" noValidate>\r\n                        <div className=\"cardRadio\">\r\n                            <RadioGroup row name=\"role\" onChange={handleRadioChange} style={{ color: \"#012A4A\" }}>\r\n                                <FormControlLabel\r\n                                    value=\"Patient\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Patient\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Doctor\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Doctor\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                            </RadioGroup>\r\n                        </div>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            placeholder=\"New Username\"\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={onChangeUsername}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <AccountCircle />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            placeholder=\"New Password\"\r\n                            type=\"password\"\r\n                            value={password}\r\n                            onChange={passwordOnChange}\r\n                            style={{ marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <VpnKeyIcon />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"confirm password\"\r\n                            placeholder=\"Confirm Password\"\r\n                            type=\"password\"\r\n                            value={confirmPassword}\r\n                            onChange={confirmPasswordOnChange}\r\n                            style={{ marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <VpnKeyIcon />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <Button\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            className=\"submit\"\r\n                            onClick={() => onRegister()}\r\n                            classes={{\r\n                                root: classes.rootButton,\r\n                            }}\r\n                        > REGISTER </Button>\r\n\r\n                        {(match) ? <p style={styles.errorTextStyle}>Password doesn't match</p> : null}\r\n\r\n                    </form>\r\n\r\n                </TabPanel>\r\n\r\n\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Admin.tsx",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Doctor.tsx",["116","117","118","119","120","121","122","123","124","125","126","127"],"import React, { useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { IconButton, Tooltip, Paper, Grid, InputLabel, TextField, RadioGroup, FormControlLabel, Radio, Button, Select, MenuItem } from '@material-ui/core';\r\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport DoctorNavBar from './DoctorNavBar';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '&$underline': {\r\n                borderBottom: '0',\r\n            },\r\n        },\r\n        underline: {\r\n            '&:after': {\r\n                borderBottom: '2px solid #012A4A',\r\n            },\r\n        },\r\n        backButton: {\r\n            '&:hover': {\r\n                color: '#014F86',\r\n            },\r\n            color: \"#012A4A\",\r\n            backgroundColor: \"#EDF2FB\",\r\n            position: 'absolute',\r\n            top: 5,\r\n            left: 5,\r\n        },\r\n        paper: {\r\n            padding: '2rem',\r\n            margin: 'auto',\r\n            width: '84%',\r\n            position: 'relative',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between',\r\n            backgroundColor: \"#EDF2FB\",\r\n        },\r\n        rootButton: {\r\n            '&:hover': {\r\n                backgroundColor: \"#014F86\",\r\n            },\r\n            background: \"#012A4A\",\r\n            borderRadius: \"2rem\",\r\n            border: 0,\r\n            color: 'white',\r\n            fontWeight: 'bold',\r\n            height: 40,\r\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n            width: '20%',\r\n            float: 'right'\r\n        },\r\n    })\r\n);\r\n\r\nexport const Doctor: React.FunctionComponent = (props) => {\r\n    const location: any = useLocation();\r\n\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <DoctorNavBar>\r\n        <div>\r\n            <h2 id=\"registerationTitle\">Doctor Details</h2>\r\n            <Paper elevation={3} classes={{ root: classes.paper }}>\r\n                <Grid container spacing={3} >\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> First Name </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.firstname}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Last Name </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.lastname}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Age </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.age}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Gender </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.gender}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Phone Number</InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.phone}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Email Address</InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.email}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Residential Address </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.address}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Education </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.education}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Certifications </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.certification}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Awards </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.awards}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                   \r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n       </DoctorNavBar>\r\n    );\r\n\r\n    return(\r\n        <DoctorNavBar doctorInfo={location.state.doctorInfo}>\r\n           {location.state.doctorInfo.username}\r\n        </DoctorNavBar>\r\n    )\r\n\r\n}\r\n\r\nexport default Doctor;","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\ForumList.tsx",["128"],"import React from 'react'\r\nimport PatientNavBar from './PatientNavBar'\r\nimport {Forum}  from './forum'\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport DoctorNavBar from './DoctorNavBar'\r\n\r\n\r\nexport const ForumList:React.FunctionComponent = () => {\r\n    const location: any = useLocation();\r\n\r\n    return(\r\n        location.state.patientInfo !== undefined\r\n      ?<PatientNavBar>\r\n            <Forum />\r\n        </PatientNavBar> :\r\n        <DoctorNavBar>\r\n            <Forum/>\r\n        </DoctorNavBar>\r\n    )\r\n}","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Register.tsx",["129"],"import React, { useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { IconButton, Tooltip, Paper, Grid, InputLabel, TextField, RadioGroup, FormControlLabel, Radio, Button, Select, MenuItem } from '@material-ui/core';\r\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { doctorRegister, patientRegister } from '../remote/remote-functions';\r\nimport { styles } from '../assets/styles.js';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '&$underline': {\r\n                borderBottom: '0',\r\n            },\r\n        },\r\n        underline: {\r\n            '&:after': {\r\n                borderBottom: '2px solid #012A4A',\r\n            },\r\n        },\r\n        backButton: {\r\n            '&:hover': {\r\n                color: '#014F86',\r\n            },\r\n            color: \"#012A4A\",\r\n            backgroundColor: \"#EDF2FB\",\r\n            position: 'absolute',\r\n            top: 5,\r\n            left: 5,\r\n        },\r\n        paper: {\r\n            padding: '2rem',\r\n            margin: 'auto',\r\n            width: '84%',\r\n            position: 'relative',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between',\r\n            backgroundColor: \"#EDF2FB\",\r\n        },\r\n        rootButton: {\r\n            '&:hover': {\r\n                backgroundColor: \"#014F86\",\r\n            },\r\n            background: \"#012A4A\",\r\n            borderRadius: \"2rem\",\r\n            border: 0,\r\n            color: 'white',\r\n            fontWeight: 'bold',\r\n            height: 40,\r\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n            width: '20%',\r\n            float: 'right'\r\n        },\r\n    })\r\n);\r\n\r\nexport const Register: React.FunctionComponent = (props) => {\r\n    const location: any = useLocation();\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n    const [age, setAge] = useState(0);\r\n    const [gender, setGender] = useState(\"\");\r\n    const [phone, setPhone] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [address, setAddress] = useState(\"\");\r\n    const [language, setLanguage] = useState(\"\");\r\n    const [healthcardnumber, setHealthcardnumber] = useState(\"\");\r\n    const [education, setEducation] = useState(\"\");\r\n    const [certification, setCertification] = useState(\"\");\r\n    const [speciality, setSpeciality] = useState(\"\");\r\n    const [awards, setAwards] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n\r\n\r\n    const onRegisterSubmit = async () => {\r\n        const patientCredentials = {\r\n            username: location.state.username,\r\n            password: location.state.password,\r\n            firstname: firstname,\r\n            lastname: lastname,\r\n            age: age,\r\n            gender: gender,\r\n            phone: phone,\r\n            email: email,\r\n            address: address,\r\n            language: language,\r\n            healthcardnumber: healthcardnumber,\r\n            role: 'Patient'\r\n        }\r\n\r\n        const doctorCredentials = {\r\n            username: location.state.username,\r\n            password: location.state.password,\r\n            firstname: firstname,\r\n            lastname: lastname,\r\n            age: age,\r\n            gender: gender,\r\n            phone: phone,\r\n            email: email,\r\n            address: address,\r\n            language: language,\r\n            education: education,\r\n            certification: certification,\r\n            speciality: speciality,\r\n            awards: awards,\r\n            status: 'Pending',\r\n            role: 'Doctor'\r\n        }\r\n\r\n        if (location.state.role === 'Doctor') {\r\n            if (firstname && lastname && age && gender && speciality) {\r\n                try {\r\n                    let user = await doctorRegister(doctorCredentials)\r\n                    history.push('/');\r\n                } catch (e) {\r\n                    console.log(e);\r\n                }\r\n            } else {\r\n                setError(\"Please fill out all required fields\");\r\n            }\r\n        } else if (location.state.role === 'Patient') {\r\n            if (firstname && lastname && age && gender && healthcardnumber) {\r\n                try {\r\n                    let user = await patientRegister(patientCredentials)\r\n                    console.log(\"Doctor registered -> \" + JSON.stringify(user));\r\n                    history.push({\r\n                        pathname: '/patient',\r\n                        state: {\r\n                            patientInfo: user\r\n                        },\r\n                    });\r\n                } catch (e) {\r\n                    console.log(e);\r\n                }\r\n            } else {\r\n                setError(\"Please fill out all required fields\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const MyRadio = withStyles({\r\n        root: {\r\n            color: \"#012A4A\",\r\n            '&$checked': {\r\n                color: \"#014F86\",\r\n            },\r\n        },\r\n        checked: {},\r\n    })((props) => <Radio color=\"default\" {...props} />);\r\n\r\n    return (\r\n        <div>\r\n            <Tooltip title=\"Go Back\">\r\n                <IconButton\r\n                    className='float-left'\r\n                    onClick={() => history.push('/')}\r\n                    classes={{\r\n                        root: classes.backButton,\r\n                    }}>\r\n                    <ArrowBackIcon style={{ fontSize: 40 }} />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <h2 id=\"registerationTitle\">Fill out the registeration details</h2>\r\n            <Paper elevation={3} classes={{ root: classes.paper }}>\r\n                <Grid container spacing={3} >\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> First Name </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            required\r\n                            value={firstname}\r\n                            onChange={e => setFirstname(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Last Name </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            required\r\n                            value={lastname}\r\n                            onChange={e => setLastname(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Age </InputLabel>\r\n                        <TextField\r\n                            type=\"number\"\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={age}\r\n                            onChange={e => setAge(parseInt(e.target.value))}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Gender </InputLabel>\r\n                        <RadioGroup row name=\"gender\" value={gender} onChange={(e: any) => setGender(e.target.value)}>\r\n                            <FormControlLabel value=\"female\" control={<MyRadio />} label=\"Female\" style={{ color: \"#012A4A\" }} />\r\n                            <FormControlLabel value=\"male\" control={<MyRadio />} label=\"Male\" style={{ color: \"#012A4A\" }} />\r\n                            <FormControlLabel value=\"other\" control={<MyRadio />} label=\"Other\" style={{ color: \"#012A4A\" }} />\r\n                        </RadioGroup>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Phone Number</InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={phone}\r\n                            onChange={e => setPhone(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Email Address</InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={email}\r\n                            onChange={e => setEmail(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Residential Address </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={address}\r\n                            onChange={e => setAddress(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Language Spoken </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={language}\r\n                            onChange={e => setLanguage(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    {\r\n                        (location.state.role === 'Patient') ?\r\n                            <Grid item xs={12}>\r\n                                <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Health Card Number </InputLabel>\r\n                                <TextField\r\n                                    variant=\"filled\"\r\n                                    fullWidth\r\n                                    value={healthcardnumber}\r\n                                    onChange={e => setHealthcardnumber(e.target.value)}\r\n                                    style={{ marginBottom: 5, marginTop: 5 }}\r\n                                    InputProps={{\r\n                                        classes: {\r\n                                            root: classes.root,\r\n                                            underline: classes.underline,\r\n                                        },\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                    {\r\n                        (location.state.role === 'Doctor') ?\r\n                            <>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Speciality </InputLabel>\r\n                                    <Select\r\n                                        variant=\"filled\"\r\n                                        value={speciality}\r\n                                        fullWidth\r\n                                        onChange={e => setSpeciality(String(e.target.value))}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                    >\r\n                                        <MenuItem value={'Allergy and immunology'}>Allergy and immunology</MenuItem>\r\n                                        <MenuItem value={'Anesthesiologist'}>Anesthesiologist</MenuItem>\r\n                                        <MenuItem value={'Cardiologist'}>Cardiologist</MenuItem>\r\n                                        <MenuItem value={'Dermatology'}>Dermatology</MenuItem>\r\n                                        <MenuItem value={'Emergency medicine'}>Emergency medicine</MenuItem>\r\n                                        <MenuItem value={'Family medicine'}>Family medicine</MenuItem>\r\n                                        <MenuItem value={'Medical genetics'}>Medical genetics</MenuItem>\r\n                                        <MenuItem value={'Neurology'}>Neurology</MenuItem>\r\n                                        <MenuItem value={'Ophthalmology'}>Ophthalmology</MenuItem>\r\n                                        <MenuItem value={'Pathology'}>Pathology</MenuItem>\r\n                                        <MenuItem value={'Physical medicine and rehabilitation'}>Physical medicine and rehabilitation</MenuItem>\r\n                                        <MenuItem value={'Psychiatry'}>Psychiatry</MenuItem>\r\n                                        <MenuItem value={'Radiation oncology'}>Radiation oncology</MenuItem>\r\n                                        <MenuItem value={'Surgery'}>Surgery</MenuItem>\r\n                                        <MenuItem value={'Urology'}>Urology</MenuItem>\r\n                                    </Select>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}> Certifications </InputLabel>\r\n                                    <TextField\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                        value={certification}\r\n                                        onChange={e => setCertification(e.target.value)}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                        InputProps={{\r\n                                            classes: {\r\n                                                root: classes.root,\r\n                                                underline: classes.underline,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}> Education Details </InputLabel>\r\n                                    <TextField\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                        multiline\r\n                                        rows={5}\r\n                                        value={education}\r\n                                        onChange={e => setEducation(e.target.value)}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                        InputProps={{\r\n                                            classes: {\r\n                                                root: classes.root,\r\n                                                underline: classes.underline,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}> Awards </InputLabel>\r\n                                    <TextField\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                        multiline\r\n                                        rows={5}\r\n                                        value={awards}\r\n                                        onChange={e => setAwards(e.target.value)}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                        InputProps={{\r\n                                            classes: {\r\n                                                root: classes.root,\r\n                                                underline: classes.underline,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            type=\"button\"\r\n                            variant=\"contained\"\r\n                            className=\"submit\"\r\n                            onClick={() => onRegisterSubmit()}\r\n                            classes={{\r\n                                root: classes.rootButton,\r\n                            }}\r\n                        > REGISTER </Button>\r\n                        {(error) ? <p style={styles.errorTextStyle}>{error}</p> : null}\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientHome.tsx",["130"],"import React from 'react';\r\nimport '../assets/patient.scss'\r\nimport { PatientNavBar } from './PatientNavBar';\r\nimport { RequestList } from './RequestList';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n\r\n\r\nexport const PatientHome: React.FunctionComponent<any> = () => {\r\n    const location: any = useLocation();\r\n    return(\r\n        <>\r\n                <PatientNavBar patientInfo={location.state.patientInfo}>\r\n                    <div>{location.state.patientInfo.patientId}</div>\r\n                </PatientNavBar>\r\n\r\n          </>  \r\n        \r\n    )\r\n}\r\n\r\nexport default PatientHome;","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\assets\\styles.js",[],["131","132"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\remote-functions.ts",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientNavBar.tsx",["133"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SpeakerNotesIcon from '@material-ui/icons/SpeakerNotes';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    appBar: {\r\n      transition: theme.transitions.create(['margin', 'width'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n      transition: theme.transitions.create(['margin', 'width'], {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n      display: 'none',\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n      justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n      transition: theme.transitions.create('margin', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n      transition: theme.transitions.create('margin', {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n      marginLeft: 0,\r\n    },\r\n    toolbar: {\r\n      backgroundColor: \"#014F86\"\r\n    }\r\n  }),\r\n);\r\n\r\n\r\n\r\n\r\nexport const PatientNavBar:React.FunctionComponent<any> = (props) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = useState(false);\r\n  const history = useHistory();\r\n  const location: any = useLocation();\r\n\r\n  const navbarData = [\r\n    {\r\n      name: 'Home',\r\n      path: '/patient',\r\n    },\r\n    {\r\n      name: 'Past requests',\r\n      path: '/requestList',\r\n    },\r\n    {\r\n      name: 'Create request',\r\n      path: '/request',\r\n    },\r\n    {\r\n      name: 'Forum',\r\n      path: '/forumList',\r\n    },\r\n    {\r\n      name: 'Logout',\r\n      path: '/',\r\n    }\r\n  ]\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n \r\n  const homeClicked = () => {\r\n    history.push({\r\n      pathname: navbarData[0].path,\r\n      state: {  //to access state use useLocation hook in function component\r\n        patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \r\n    }\r\n  })\r\n  }\r\n\r\n  const requestListClicked = () => {\r\n      history.push({\r\n        pathname: navbarData[1].path,\r\n        state: {  //to access state use useLocation hook in function component\r\n            patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \r\n        }\r\n    })\r\n  }\r\n\r\n  const createRequestClicked = () => {\r\n    history.push({\r\n      pathname: navbarData[2].path,\r\n      state: {  //to access state use useLocation hook in function component\r\n          patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \r\n      }\r\n  })\r\n  }\r\n\r\n  const forumClicked = () => {\r\n    history.push({\r\n      pathname: navbarData[3].path,\r\n      state: {  //to access state use useLocation hook in function component\r\n          patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \r\n      }\r\n  })\r\n  }\r\n\r\n  const logoutClicked = () => {\r\n    history.push(navbarData[4].path)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h5\" noWrap>\r\n            Revature Medical Clinic\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        \r\n        <div className={classes.drawerHeader}>\r\n          {props.patientInfo ? props.patientInfo.firstname : location.state.patientInfo.firstname }\r\n          {props.patientInfo ? props.patientInfo.lastname : location.state.patientInfo.lastname }\r\n          <IconButton onClick={handleDrawerClose}>\r\n          {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n\r\n          <List>\r\n\r\n                <ListItem onClick={homeClicked}  button key={navbarData[0].name}>\r\n                <ListItemIcon><HomeIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[0].name} />\r\n                </ListItem>\r\n          \r\n                <ListItem onClick={requestListClicked}  button key={navbarData[1].name}>\r\n                <ListItemIcon><DescriptionIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[1].name} />\r\n                </ListItem>\r\n           \r\n                <ListItem onClick={createRequestClicked}  button key={navbarData[2].name}>\r\n                <ListItemIcon><NoteAddIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[2].name} />\r\n                </ListItem>\r\n              \r\n                <ListItem onClick={forumClicked}  button key={navbarData[3].name}>\r\n                <ListItemIcon><SpeakerNotesIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[3].name} />\r\n                </ListItem>\r\n\r\n                <ListItem onClick={logoutClicked} button key={navbarData[4].name}>\r\n                <ListItemIcon><ExitToAppIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[4].name} />\r\n                </ListItem>\r\n              \r\n          </List>\r\n        \r\n        <Divider />\r\n      </Drawer>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <div className={classes.drawerHeader} />\r\n        <Typography component=\"span\">\r\n          {props.children}\r\n        </Typography>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientNavBar","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\index.ts",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\index.ts",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\Forum.tsx",["134","135","136","137","138","139"],"import { spawn } from \"child_process\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { forumList, messageList } from \"./mockups\";\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Message } from \"./Message\";\r\nimport { Button, Container } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { postTopic,postMessage } from '../../remote/remote-functions';\r\nimport moment from 'moment';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"60%\",\r\n      maxWidth: \"36ch\",\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    inline: {\r\n      display: \"inline\",\r\n    },\r\n  })\r\n);\r\n\r\nexport const Forum: React.FC = (props) => {\r\n  const [forums, setForums] = useState<any>([]);\r\n\r\n  const [message, setMessage] = useState<any>([]);\r\n\r\n  const [isShow, setIsShow] = useState<any>(false);\r\n\r\n  const [topic, setTopic] = useState<string>();\r\n\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const [inputShow, setInputShow] = useState<boolean>(false);\r\n\r\n  const [inputTopic,setInputTopic] = useState<string>();\r\n\r\n  const [inputMessage, setInputMessage] = useState<string>();\r\n\r\n  const [currentTopic,setCurrentTopic]=useState<number>();\r\n\r\n  async function getMessagesByForumId(forumId: number, topic: string) {\r\n    setIsShow(true);\r\n\r\n    setTopic(topic);\r\n    setLoading(true);\r\n    setInputShow(false);\r\n    setCurrentTopic(forumId);\r\n    let url = `http://localhost:8080/message/${forumId}`;\r\n    try {\r\n      let response = await fetch(url);\r\n      const data = await response.json();\r\n      console.log(data);\r\n      setMessage(data);\r\n      setLoading(false);\r\n      return data;\r\n    } catch (error) {\r\n      console.log(\"Request Failed\", error);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const onPostTopic=async()=>{\r\n    const topicstring={\r\n      topic:inputTopic\r\n    }\r\n    const data=await postTopic(topicstring);\r\n    setForums([...forums,data])\r\n    setInputTopic('');\r\n    setInputShow(false)\r\n\r\n  }\r\n\r\n  const handleTopicChange=e=>{\r\n    \r\n    setInputTopic(e.target.value);\r\n  }\r\n  const handleMessageChange=e=>{\r\n    setInputMessage(e.target.value);\r\n    \r\n  }\r\n\r\n  const onPostMessage=async()=>{\r\n    const currentInputMessage={\r\n      message:inputMessage,\r\n      forumId:{\r\n        forumId:currentTopic\r\n      }\r\n    }\r\n    const data=await postMessage(currentInputMessage);\r\n    setInputMessage('')\r\n    setMessage([...message,data])\r\n    \r\n  }\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchforum = async () => {\r\n      try {\r\n        const responses = await fetch(\"http://localhost:8080/forum\");\r\n        const data = await responses.json();\r\n\r\n        setForums(data);\r\n        console.log(data);\r\n      } catch (e) {\r\n        console.log(e.message);\r\n      }\r\n    };\r\n    fetchforum();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {isShow ? (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            setIsShow(false);\r\n          }}\r\n        >\r\n          Back\r\n        </Button>\r\n      ) : null}\r\n      {isShow ? <Typography variant=\"h4\">{topic}</Typography> : null}\r\n      <Grid container spacing={3}>\r\n        \r\n        {!isShow ? (\r\n          <Grid item xs={4}>\r\n            <Button  onClick={()=>{setInputShow(true)}} >New Post</Button>\r\n            <List className={classes.root}>\r\n              {forums.map((r, index) => (\r\n                <ListItem\r\n                  alignItems=\"flex-start\"\r\n                  onClick={() => getMessagesByForumId(r.forumId, r.topic)}\r\n                >\r\n             \r\n                  <ListItemText\r\n                    primary={<Typography variant=\"h4\">{r.topic}</Typography>}\r\n                    secondary={\r\n                      <React.Fragment>\r\n                        <Typography\r\n                          component=\"span\"\r\n                          variant=\"body2\"\r\n                          className={classes.inline}\r\n                          color=\"textPrimary\"\r\n                        >\r\n                          by:{r.username}\r\n                          <br />\r\n                        </Typography>\r\n                        Submitted:{moment(r.timeStamp).format('YYYY-MM-DD HH:mm:ss')}\r\n                      </React.Fragment>\r\n                    }\r\n                  />\r\n                </ListItem>\r\n              ))}\r\n\r\n              <Divider variant=\"inset\" component=\"li\" />\r\n            </List>\r\n          </Grid>\r\n        ) : null}\r\n        {inputShow ? (\r\n          <div>\r\n            <TextField id=\"standard-basic\" label=\"Input your topic\" name=\"topic\" value={inputTopic} onChange={handleTopicChange}/><br/>\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\"  onClick={() => onPostTopic()}>\r\n              Submit\r\n            </Button>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={()=>setInputShow(false)}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        ) : null}\r\n        {/* <Button onClick= {()=>getMessagesByForumId(3)}>click</Button> */}\r\n        {loading ? <Typography variant=\"h4\">Loading......</Typography> : null}\r\n        {isShow ? (\r\n          <Grid item xs={8}>\r\n            {!loading\r\n              ? message.map((m, index) => (\r\n                  <Message\r\n                    message={m.message}\r\n                    timestamp={moment(m.timeStamp).format('YYYY-MM-DD HH:mm:ss')}\r\n                    doctor={!m.doctorId ? \"\" : m.doctorId.username}\r\n                    patient={!m.patientId ? \"\" : m.patientId.username}\r\n                  />\r\n                ))\r\n              : null}\r\n            {!loading ? (\r\n              <div >\r\n                <TextField id=\"standard-basic\" label=\"Write your post\" name=\"message\" value={inputMessage} onChange={handleMessageChange}/>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onPostMessage}>\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            ) : null}\r\n          </Grid>\r\n        ) : null}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\Message.tsx",["140","141","142","143","144","145","146","147","148"],"import { spawn } from \"child_process\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { forumList } from \"./mockups\";\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\ninterface MessageIdProps {\r\n  message: string;\r\n  timestamp: string;\r\n  doctor: string;\r\n  patient: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      maxWidth: \"36ch\",\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    inline: {\r\n      display: \"inline\",\r\n    },\r\n  })\r\n);\r\n\r\nexport const Message: React.FC<MessageIdProps> = ({\r\n  message,\r\n  timestamp,\r\n  doctor,\r\n  patient,\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <ListItemText\r\n        primary={<Typography variant=\"h4\">{message}</Typography>}\r\n        secondary={\r\n          <React.Fragment>\r\n            <Typography\r\n              component=\"span\"\r\n              variant=\"body2\"\r\n              className={classes.inline}\r\n              color=\"textPrimary\"\r\n            >\r\n              by:{patient ? patient : doctor}\r\n              <br />\r\n            </Typography>\r\n            Submitted:{timestamp}\r\n          </React.Fragment>\r\n        }\r\n      />\r\n      \r\n    </>\r\n  );\r\n};\r\n",["149","150"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DoctorNavBar.tsx",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Request.tsx",["151"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\common\\DoctorsList.tsx",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\common\\DoctorInfoItem.tsx",["152"],"import React, { useState } from 'react';\r\nimport { Paper, Grid, Chip, Avatar, Tooltip, IconButton, LinearProgress } from '@material-ui/core';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\r\nimport { updateStatus } from '../../remote/remote-functions';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        paperItem: {\r\n            '&:hover': {\r\n                backgroundColor: '#0262a6',\r\n            },\r\n            marginTop: 10,\r\n            padding: 5,\r\n            fontSize: 22,\r\n            backgroundColor: '#014F86',\r\n            color: 'white',\r\n        },\r\n        ApproveButton: {\r\n            '&:hover': {\r\n                color: '#4BB543',\r\n            },\r\n            color: \"white\",\r\n        },\r\n        DenyButton: {\r\n            '&:hover': {\r\n                color: '#DC143C',\r\n            },\r\n            color: \"white\",\r\n        },\r\n        progressStyle: {\r\n            backgroundColor: '#EDF2FB'\r\n        },\r\n        progressBar: {\r\n            backgroundColor: '#012A4A'\r\n        }\r\n    })\r\n);\r\n\r\n\r\n\r\n\r\nexport const DoctorInfoItem: React.FunctionComponent<any> = (props: any) => {\r\n    const classes = useStyles();\r\n\r\n    const item = props.item;\r\n    const [updating, setUpdating] = useState(false)\r\n\r\n\r\n    const statusColor = (status) => {\r\n        switch (status) {\r\n            case 'Approved':\r\n                return <Chip style={{ backgroundColor: '#4BB543', color: 'white', width: '5rem' }} label='Approved' />;\r\n            case 'Rejected':\r\n                return <Chip style={{ backgroundColor: '#DC143C', color: 'white', width: '5rem' }} label='Rejected' />;\r\n            case 'Pending':\r\n                return <Chip style={{ backgroundColor: '#e0e0e0', color: '#012A4A', width: '5rem' }} label='Pending' />;\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (doctorId, status, email) => {\r\n        try {\r\n            setUpdating(true)\r\n            let res = await updateStatus(doctorId, status, email)\r\n            props.handleChange();\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Paper elevation={1} classes={{ root: classes.paperItem }}>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={3} style={{ marginTop: 8, marginLeft: 10 }}>\r\n                        {statusColor(item.status)}\r\n                    </Grid>\r\n                    <Grid item xs style={{ marginTop: 8 }}>\r\n                        <Chip avatar={<Avatar style={{ backgroundColor: '#014F86', color: 'white' }}>ID</Avatar>} label={item.doctorId} style={{ fontSize: 20 }} />\r\n                    </Grid>\r\n                    <Grid item xs={6} style={{ marginTop: 8 }}>\r\n                        {item.firstname} {item.lastname}\r\n                    </Grid>\r\n                    <Grid>\r\n                        <Tooltip title=\"Approved\">\r\n                            <span>\r\n                            <IconButton\r\n                                onClick={() => onSubmit(item.doctorId, \"Approved\", item.email)}\r\n                                disabled={item.status === 'Approved'}\r\n                                classes={{\r\n                                    root: classes.ApproveButton,\r\n                                }}>\r\n                                <ThumbUpIcon style={{ fontSize: 35 }} />\r\n                            </IconButton>\r\n                            </span>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                    <Grid>\r\n                        <Tooltip title=\"Reject\">\r\n                            <IconButton\r\n                                onClick={() => onSubmit(item.doctorId, \"Rejected\", item.email)}\r\n                                disabled={item.status === 'Rejected'}\r\n                                classes={{\r\n                                    root: classes.DenyButton,\r\n                                }}>\r\n                                <ThumbDownIcon style={{ fontSize: 35 }} />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Paper>\r\n            {updating === true ?\r\n                <LinearProgress classes={{indeterminate: classes.progressStyle, barColorPrimary: classes.progressBar}}/>\r\n            :null}\r\n        </>\r\n    );\r\n}","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DocRequestList.tsx",["153","154","155","156","157","158","159"],"import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport PatientNavBar from './PatientNavBar'\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { Button, Checkbox, Grid, TextareaAutosize, TextField } from '@material-ui/core';\r\nimport { getPendingRequestList, postDoctorResponse } from '../remote/remote-functions';\r\nimport { useLocation } from 'react-router-dom';\r\nimport DoctorNavBar from './DoctorNavBar';\r\nimport { textChangeRangeIsUnchanged } from 'typescript';\r\n\r\ninterface IPatient{\r\n    healthCardNumber:number,\r\n    firstname:string,\r\n    lastname:string\r\n    email:string\r\n    phone:string\r\n\r\n}\r\n\r\ninterface IDoctor{\r\n    firstname:string\r\n    lastname:string\r\n    email:string\r\n    phone:string\r\n}\r\ninterface IReqList{\r\n    patientId:IPatient,\r\n    doctorId:IDoctor,\r\n    problem:string,\r\n    responsed:boolean,\r\n    timeStamp:string,\r\n    requestId:number\r\n    prescription:string\r\n}\r\n\r\n\r\nexport const DocRequestList:React.FunctionComponent<any> = () => {\r\n\r\n    const [data, setRequestList] = useState<IReqList[]>([])\r\n    const location: any = useLocation()\r\n\r\n   \r\n   // const {doctorid} = location.state.doctorInfo.doctorId;  \r\n   // const {patientid} = location.state.patientInfo.patientId;\r\n  //  const patientid = useState<IPatient[]>([])\r\n    \r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            marginLeft: '5%',\r\n            marginRight: '5%',\r\n        },\r\n        heading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            flexBasis: '33.33%',\r\n            flexShrink: 0,\r\n        },\r\n        secondaryHeading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            color: theme.palette.text.secondary,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n    }),\r\n    )\r\n\r\n    /* ------------------------- */\r\n    const [prescription,setPrescription] = useState<string>(\"\");\r\n    const [doctorresponse,setDocRes] = useState<string>(\"\");\r\n    const [hasappointment, setAppointment] = useState<boolean>(false);\r\n\r\n   \r\n\r\n    // const requestId = 1;\r\n   \r\n    \r\n   \r\n    const handlePrescription=e=>{\r\n        setPrescription(e.target.value);\r\n      }\r\n\r\n      const handleDocRes=e=>{        \r\n        setDocRes(e.target.value);   \r\n      }\r\n\r\n\r\n      const handleAppointment = (event: any) => {\r\n        setAppointment(true);\r\n      };\r\n\r\n     \r\n     \r\n\r\n    const postDocResponse=async(reqid)=>{\r\n       \r\n        const docResponse={\r\n             prescription,\r\n             doctorresponse,\r\n             requestId:reqid,\r\n             hasappointment\r\n            \r\n           \r\n          }\r\n      \r\n        const data=await postDoctorResponse(docResponse);\r\n        setPrescription(\"\")\r\n        setDocRes(\"\")\r\n       // setAppointment(false)\r\n\r\n        setExpanded(false)\r\n        \r\n      }\r\n\r\n      /* ------------------------- */\r\n\r\n\r\n    function getDoctorInfo(pinfo:IPatient){\r\n        \r\n        return(\r\n            <>\r\n            <h4>Patient's Details:</h4>\r\n            \r\n            Patients's Name: {pinfo.firstname} {pinfo.lastname}<br/>\r\n            Patient's email: {pinfo.email} <br/>\r\n            Patient's Phone: {pinfo.phone}\r\n             \r\n            </>\r\n        )\r\n    }\r\n\r\n    async function getContent(){       \r\n        let getReqList = await getPendingRequestList(location.state.doctorInfo.doctorId)\r\n        setRequestList(getReqList) \r\n    } \r\n\r\n     useEffect(() => {\r\n        getContent()\r\n    }, [])\r\n\r\n    \r\n        const classes = useStyles();\r\n        const [expanded, setExpanded] = React.useState<string | false>(false);\r\n      \r\n        const handleChange = (panel: string) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\r\n          setExpanded(isExpanded ? panel : false);\r\n        }\r\n        \r\n        return(\r\n            \r\n            <DoctorNavBar>\r\n                {console.log(data[0] ? data[0].requestId: \"\")}\r\n                <div className={classes.root}>\r\n                \r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={3}>\r\n                    \r\n                    </Grid>\r\n                    <Grid item xs={3}>Doctor Name: {data[0] ? data[0].doctorId.firstname : \"\"}</Grid>\r\n                    <Grid item xs={3}></Grid>\r\n                    <Grid item xs={3}></Grid>\r\n                    {data.map(text => \r\n                        <Grid item xs={12}>                            \r\n                            <Accordion expanded={expanded === `${text.requestId}`} onChange={handleChange(`${text.requestId}`)}>\r\n                                <AccordionSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"panel1bh-content\"\r\n                                    id=\"panel1bh-header\"\r\n                                    >\r\n                                    <Typography className={classes.heading} >Reference number: {text.requestId}\r\n                                    <input type='hidden' name=\"props.requestid\" value={text.requestId} />\r\n                                    </Typography>\r\n                                    <Typography className={classes.secondaryHeading}>Status: {text.responsed ? \"Resolved\" : \"Pending\"}</Typography>\r\n                                </AccordionSummary>\r\n                            <AccordionDetails>\r\n                                <Typography>\r\n                                     {getDoctorInfo(text.patientId)}<br/><br/>\r\n                                    \r\n                                    Problem/Symptoms: {text.problem}<br/><br/>\r\n                                   \r\n                                    Medication: <br/>   \r\n                                        <TextField\r\n                                                id=\"outlined-required\"\r\n                                                label=\"Medication details\"\r\n                                                value={prescription} onChange={handlePrescription}\r\n                                                variant=\"outlined\"\r\n                                                />\r\n                                    <br/>  <br/> \r\n                                    Advice to patient: <br/>       \r\n                                    <TextField\r\n                                                id=\"outlined-required\"\r\n                                                label=\"Any Precautions\"\r\n                                                value={doctorresponse} onChange={handleDocRes}\r\n                                                variant=\"outlined\"\r\n                                                />                                      \r\n                                   \r\n                                            <br/> <br/> \r\n                                           \r\n                                    Need Appointment:\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        onChange={handleAppointment}\r\n                                        />\r\n                                       <br/>\r\n                                    <Button variant=\"contained\" color=\"primary\" onClick={()=>postDocResponse(text.requestId)}>\r\n                                        Submit\r\n                                    </Button>                                                    \r\n                                           \r\n                                </Typography>\r\n                            </AccordionDetails>\r\n                            </Accordion>\r\n                        </Grid>\r\n                    )}\r\n                                \r\n                  </Grid>    \r\n                </div>\r\n                \r\n            </DoctorNavBar> \r\n        )\r\n    \r\n}\r\n","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PastRequestList.tsx",["160","161"],{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","severity":1,"message":"167","line":1,"column":16,"nodeType":"168","messageId":"169","endLine":1,"endColumn":24},{"ruleId":"166","severity":1,"message":"170","line":3,"column":35,"nodeType":"168","messageId":"169","endLine":3,"endColumn":39},{"ruleId":"166","severity":1,"message":"171","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":13},{"ruleId":"172","severity":1,"message":"173","line":139,"column":8,"nodeType":"174","endLine":139,"endColumn":10,"suggestions":"175"},{"ruleId":"166","severity":1,"message":"176","line":13,"column":10,"nodeType":"168","messageId":"169","endLine":13,"endColumn":19},{"ruleId":"166","severity":1,"message":"177","line":129,"column":11,"nodeType":"168","messageId":"169","endLine":129,"endColumn":28},{"ruleId":"166","severity":1,"message":"167","line":1,"column":17,"nodeType":"168","messageId":"169","endLine":1,"endColumn":25},{"ruleId":"166","severity":1,"message":"178","line":3,"column":10,"nodeType":"168","messageId":"169","endLine":3,"endColumn":20},{"ruleId":"166","severity":1,"message":"179","line":3,"column":22,"nodeType":"168","messageId":"169","endLine":3,"endColumn":29},{"ruleId":"166","severity":1,"message":"180","line":3,"column":67,"nodeType":"168","messageId":"169","endLine":3,"endColumn":77},{"ruleId":"166","severity":1,"message":"181","line":3,"column":79,"nodeType":"168","messageId":"169","endLine":3,"endColumn":95},{"ruleId":"166","severity":1,"message":"182","line":3,"column":97,"nodeType":"168","messageId":"169","endLine":3,"endColumn":102},{"ruleId":"166","severity":1,"message":"183","line":3,"column":104,"nodeType":"168","messageId":"169","endLine":3,"endColumn":110},{"ruleId":"166","severity":1,"message":"184","line":3,"column":112,"nodeType":"168","messageId":"169","endLine":3,"endColumn":118},{"ruleId":"166","severity":1,"message":"185","line":3,"column":120,"nodeType":"168","messageId":"169","endLine":3,"endColumn":128},{"ruleId":"166","severity":1,"message":"186","line":4,"column":22,"nodeType":"168","messageId":"169","endLine":4,"endColumn":32},{"ruleId":"166","severity":1,"message":"187","line":59,"column":11,"nodeType":"168","messageId":"169","endLine":59,"endColumn":18},{"ruleId":"188","severity":1,"message":"189","line":155,"column":5,"nodeType":"190","messageId":"191","endLine":159,"endColumn":6},{"ruleId":"166","severity":1,"message":"192","line":4,"column":10,"nodeType":"168","messageId":"169","endLine":4,"endColumn":20},{"ruleId":"166","severity":1,"message":"193","line":117,"column":25,"nodeType":"168","messageId":"169","endLine":117,"endColumn":29},{"ruleId":"166","severity":1,"message":"194","line":4,"column":10,"nodeType":"168","messageId":"169","endLine":4,"endColumn":21},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","severity":1,"message":"170","line":23,"column":10,"nodeType":"168","messageId":"169","endLine":23,"endColumn":14},{"ruleId":"166","severity":1,"message":"195","line":1,"column":10,"nodeType":"168","messageId":"169","endLine":1,"endColumn":15},{"ruleId":"166","severity":1,"message":"196","line":3,"column":10,"nodeType":"168","messageId":"169","endLine":3,"endColumn":19},{"ruleId":"166","severity":1,"message":"197","line":3,"column":21,"nodeType":"168","messageId":"169","endLine":3,"endColumn":32},{"ruleId":"166","severity":1,"message":"198","line":9,"column":8,"nodeType":"168","messageId":"169","endLine":9,"endColumn":22},{"ruleId":"166","severity":1,"message":"199","line":10,"column":8,"nodeType":"168","messageId":"169","endLine":10,"endColumn":14},{"ruleId":"166","severity":1,"message":"200","line":13,"column":18,"nodeType":"168","messageId":"169","endLine":13,"endColumn":27},{"ruleId":"166","severity":1,"message":"195","line":1,"column":10,"nodeType":"168","messageId":"169","endLine":1,"endColumn":15},{"ruleId":"166","severity":1,"message":"167","line":2,"column":17,"nodeType":"168","messageId":"169","endLine":2,"endColumn":25},{"ruleId":"166","severity":1,"message":"201","line":2,"column":27,"nodeType":"168","messageId":"169","endLine":2,"endColumn":36},{"ruleId":"166","severity":1,"message":"196","line":3,"column":10,"nodeType":"168","messageId":"169","endLine":3,"endColumn":19},{"ruleId":"166","severity":1,"message":"202","line":5,"column":8,"nodeType":"168","messageId":"169","endLine":5,"endColumn":12},{"ruleId":"166","severity":1,"message":"203","line":6,"column":8,"nodeType":"168","messageId":"169","endLine":6,"endColumn":16},{"ruleId":"166","severity":1,"message":"204","line":7,"column":8,"nodeType":"168","messageId":"169","endLine":7,"endColumn":15},{"ruleId":"166","severity":1,"message":"198","line":9,"column":8,"nodeType":"168","messageId":"169","endLine":9,"endColumn":22},{"ruleId":"166","severity":1,"message":"199","line":10,"column":8,"nodeType":"168","messageId":"169","endLine":10,"endColumn":14},{"ruleId":"162","replacedBy":"205"},{"ruleId":"164","replacedBy":"206"},{"ruleId":"166","severity":1,"message":"207","line":29,"column":17,"nodeType":"168","messageId":"169","endLine":29,"endColumn":20},{"ruleId":"166","severity":1,"message":"207","line":65,"column":17,"nodeType":"168","messageId":"169","endLine":65,"endColumn":20},{"ruleId":"166","severity":1,"message":"171","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":13},{"ruleId":"166","severity":1,"message":"208","line":3,"column":8,"nodeType":"168","messageId":"169","endLine":3,"endColumn":21},{"ruleId":"166","severity":1,"message":"209","line":10,"column":18,"nodeType":"168","messageId":"169","endLine":10,"endColumn":26},{"ruleId":"166","severity":1,"message":"210","line":10,"column":34,"nodeType":"168","messageId":"169","endLine":10,"endColumn":50},{"ruleId":"166","severity":1,"message":"211","line":14,"column":10,"nodeType":"168","messageId":"169","endLine":14,"endColumn":36},{"ruleId":"166","severity":1,"message":"212","line":114,"column":15,"nodeType":"168","messageId":"169","endLine":114,"endColumn":19},{"ruleId":"172","severity":1,"message":"173","line":147,"column":8,"nodeType":"174","endLine":147,"endColumn":10,"suggestions":"213"},{"ruleId":"166","severity":1,"message":"214","line":40,"column":7,"nodeType":"168","messageId":"169","endLine":40,"endColumn":16},{"ruleId":"172","severity":1,"message":"173","line":93,"column":8,"nodeType":"174","endLine":93,"endColumn":10,"suggestions":"215"},"no-native-reassign",["216"],"no-negated-in-lhs",["217"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getContent'. Either include it or remove the dependency array.","ArrayExpression",["218"],"'exception' is defined but never used.","'handleChangeIndex' is assigned a value but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Radio' is defined but never used.","'Button' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'withStyles' is defined but never used.","'history' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'useHistory' is defined but never used.","'user' is assigned a value but never used.","'RequestList' is defined but never used.","'spawn' is defined but never used.","'forumList' is defined but never used.","'messageList' is defined but never used.","'ListItemAvatar' is defined but never used.","'Avatar' is defined but never used.","'Container' is defined but never used.","'useEffect' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'Divider' is defined but never used.",["216"],["217"],"'res' is assigned a value but never used.","'PatientNavBar' is defined but never used.","'Checkbox' is defined but never used.","'TextareaAutosize' is defined but never used.","'textChangeRangeIsUnchanged' is defined but never used.","'data' is assigned a value but never used.",["219"],"'useStyles' is assigned a value but never used.",["220"],"no-global-assign","no-unsafe-negation",{"desc":"221","fix":"222"},{"desc":"221","fix":"223"},{"desc":"221","fix":"224"},"Update the dependencies array to be: [getContent]",{"range":"225","text":"226"},{"range":"227","text":"226"},{"range":"228","text":"226"},[4374,4376],"[getContent]",[3919,3921],[2523,2525]]