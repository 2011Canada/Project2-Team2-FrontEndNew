<<<<<<< HEAD
[{"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/index.tsx":"1","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/reportWebVitals.ts":"2","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/App.tsx":"3","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Admin.tsx":"4","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Register.tsx":"5","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Login.tsx":"6","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Doctor.tsx":"7","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/ForumList.tsx":"8","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/PatientHome.tsx":"9","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/RequestList.tsx":"10","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/assets/styles.js":"11","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/remote/remote-functions.ts":"12","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/PatientNavBar.tsx":"13","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/forum/index.ts":"14","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/remote/index.ts":"15","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/forum/Forum.tsx":"16","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/forum/Message.tsx":"17","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/common/DoctorsList.tsx":"18","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/common/DoctorInfoItem.tsx":"19","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/DoctorNavBar.tsx":"20"},{"size":509,"mtime":1610231284218,"results":"21","hashOfConfig":"22"},{"size":425,"mtime":1610037340781,"results":"23","hashOfConfig":"22"},{"size":1221,"mtime":1610479257915,"results":"24","hashOfConfig":"22"},{"size":4052,"mtime":1610650814529,"results":"25","hashOfConfig":"22"},{"size":19255,"mtime":1610479775609,"results":"26","hashOfConfig":"22"},{"size":18192,"mtime":1610478559849,"results":"27","hashOfConfig":"22"},{"size":394,"mtime":1610662289600,"results":"28","hashOfConfig":"22"},{"size":251,"mtime":1610479257915,"results":"29","hashOfConfig":"22"},{"size":613,"mtime":1610563980959,"results":"30","hashOfConfig":"22"},{"size":4597,"mtime":1610563888633,"results":"31","hashOfConfig":"22"},{"size":265,"mtime":1610232998511,"results":"32","hashOfConfig":"22"},{"size":3591,"mtime":1610644497476,"results":"33","hashOfConfig":"22"},{"size":7520,"mtime":1610563888632,"results":"34","hashOfConfig":"22"},{"size":23,"mtime":1610479257919,"results":"35","hashOfConfig":"22"},{"size":183,"mtime":1610404764196,"results":"36","hashOfConfig":"22"},{"size":8297,"mtime":1610662289605,"results":"37","hashOfConfig":"22"},{"size":1578,"mtime":1610479257918,"results":"38","hashOfConfig":"22"},{"size":661,"mtime":1610651085709,"results":"39","hashOfConfig":"22"},{"size":4365,"mtime":1610651197118,"results":"40","hashOfConfig":"22"},{"size":7272,"mtime":1610662289601,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"18x09dl",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/index.tsx",[],["93","94"],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/reportWebVitals.ts",[],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/App.tsx",["95","96"],"import React, {useState} from 'react';\nimport './assets/primary.scss';\nimport { BrowserRouter as Router, Link, Route, Switch, Redirect } from 'react-router-dom';\nimport { Register } from './components/Register';\nimport { Login } from './components/Login';\nimport { Admin } from './components/Admin';\nimport { Doctor } from './components/Doctor';\nimport { PatientHome } from './components/PatientHome';\nimport { RequestList } from './components/RequestList';\nimport {ForumList} from './components/ForumList'\n\nfunction App() {\n  return (\n    <div>\n      <Router >\n        <Switch>\n          <Route exact path=\"/login\" component={Login} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/admin\" component={Admin} />\n          <Route path=\"/doctor\" component={Doctor} />\n          <Route path=\"/patient\" component={PatientHome} />\n          <Route path=\"/requestList\" component={RequestList} />\n          <Route path=\"/forumList\" component={ForumList} />\n          <Redirect from=\"/\" to=\"/login\" /> \n          \n        </Switch>\n        {/* <Link to=\"/login\"> login</Link> */}\n        {/* <Link to=\"/patient\">Patient</Link> */}\n      </Router> \n    </div>\n  );\n}\n\nexport default App;\n\n      ","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Admin.tsx",["97"],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Register.tsx",["98"],"import React, { useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { IconButton, Tooltip, Paper, Grid, InputLabel, TextField, RadioGroup, FormControlLabel, Radio, Button, Select, MenuItem } from '@material-ui/core';\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { doctorRegister, patientRegister } from '../remote/remote-functions';\nimport { styles } from '../assets/styles.js';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            '&$underline': {\n                borderBottom: '0',\n            },\n        },\n        underline: {\n            '&:after': {\n                borderBottom: '2px solid #012A4A',\n            },\n        },\n        backButton: {\n            '&:hover': {\n                color: '#014F86',\n            },\n            color: \"#012A4A\",\n            backgroundColor: \"#EDF2FB\",\n            position: 'absolute',\n            top: 5,\n            left: 5,\n        },\n        paper: {\n            padding: '2rem',\n            margin: 'auto',\n            width: '84%',\n            position: 'relative',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            backgroundColor: \"#EDF2FB\",\n        },\n        rootButton: {\n            '&:hover': {\n                backgroundColor: \"#014F86\",\n            },\n            background: \"#012A4A\",\n            borderRadius: \"2rem\",\n            border: 0,\n            color: 'white',\n            fontWeight: 'bold',\n            height: 40,\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\n            width: '20%',\n            float: 'right'\n        },\n    })\n);\n\nexport const Register: React.FunctionComponent = (props) => {\n    const location: any = useLocation();\n    const history = useHistory();\n    const classes = useStyles();\n\n    const [firstname, setFirstname] = useState(\"\");\n    const [lastname, setLastname] = useState(\"\");\n    const [age, setAge] = useState(0);\n    const [gender, setGender] = useState(\"\");\n    const [phone, setPhone] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [language, setLanguage] = useState(\"\");\n    const [healthcardnumber, setHealthcardnumber] = useState(\"\");\n    const [education, setEducation] = useState(\"\");\n    const [certification, setCertification] = useState(\"\");\n    const [speciality, setSpeciality] = useState(\"\");\n    const [awards, setAwards] = useState(\"\");\n    const [error, setError] = useState(\"\");\n\n\n    const onRegisterSubmit = async () => {\n        const patientCredentials = {\n            username: location.state.username,\n            password: location.state.password,\n            firstname: firstname,\n            lastname: lastname,\n            age: age,\n            gender: gender,\n            phone: phone,\n            email: email,\n            address: address,\n            language: language,\n            healthcardnumber: healthcardnumber,\n            role: 'Patient'\n        }\n\n        const doctorCredentials = {\n            username: location.state.username,\n            password: location.state.password,\n            firstname: firstname,\n            lastname: lastname,\n            age: age,\n            gender: gender,\n            phone: phone,\n            email: email,\n            address: address,\n            language: language,\n            education: education,\n            certification: certification,\n            speciality: speciality,\n            awards: awards,\n            status: 'Pending',\n            role: 'Doctor'\n        }\n\n        if (location.state.role === 'Doctor') {\n            if (firstname && lastname && age && gender && speciality) {\n                try {\n                    let user = await doctorRegister(doctorCredentials)\n                    history.push('/');\n                } catch (e) {\n                    console.log(e);\n                }\n            } else {\n                setError(\"Please fill out all required fields\");\n            }\n        } else if (location.state.role === 'Patient') {\n            if (firstname && lastname && age && gender && healthcardnumber) {\n                try {\n                    let user = await patientRegister(patientCredentials)\n                    console.log(\"Doctor registered -> \" + JSON.stringify(user));\n                    history.push({\n                        pathname: '/patient',\n                        state: {\n                            patientInfo: user\n                        },\n                    });\n                } catch (e) {\n                    console.log(e);\n                }\n            } else {\n                setError(\"Please fill out all required fields\");\n            }\n        }\n\n    }\n\n    const MyRadio = withStyles({\n        root: {\n            color: \"#012A4A\",\n            '&$checked': {\n                color: \"#014F86\",\n            },\n        },\n        checked: {},\n    })((props) => <Radio color=\"default\" {...props} />);\n\n    return (\n        <div>\n            <Tooltip title=\"Go Back\">\n                <IconButton\n                    className='float-left'\n                    onClick={() => history.push('/')}\n                    classes={{\n                        root: classes.backButton,\n                    }}>\n                    <ArrowBackIcon style={{ fontSize: 40 }} />\n                </IconButton>\n            </Tooltip>\n            <h2 id=\"registerationTitle\">Fill out the registeration details</h2>\n            <Paper elevation={3} classes={{ root: classes.paper }}>\n                <Grid container spacing={3} >\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> First Name </InputLabel>\n                        <TextField\n                            variant=\"filled\"\n                            fullWidth\n                            required\n                            value={firstname}\n                            onChange={e => setFirstname(e.target.value)}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.root,\n                                    underline: classes.underline,\n                                },\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Last Name </InputLabel>\n                        <TextField\n                            variant=\"filled\"\n                            fullWidth\n                            required\n                            value={lastname}\n                            onChange={e => setLastname(e.target.value)}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.root,\n                                    underline: classes.underline,\n                                },\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Age </InputLabel>\n                        <TextField\n                            type=\"number\"\n                            variant=\"filled\"\n                            fullWidth\n                            value={age}\n                            onChange={e => setAge(parseInt(e.target.value))}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.root,\n                                    underline: classes.underline,\n                                },\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Gender </InputLabel>\n                        <RadioGroup row name=\"gender\" value={gender} onChange={(e: any) => setGender(e.target.value)}>\n                            <FormControlLabel value=\"female\" control={<MyRadio />} label=\"Female\" style={{ color: \"#012A4A\" }} />\n                            <FormControlLabel value=\"male\" control={<MyRadio />} label=\"Male\" style={{ color: \"#012A4A\" }} />\n                            <FormControlLabel value=\"other\" control={<MyRadio />} label=\"Other\" style={{ color: \"#012A4A\" }} />\n                        </RadioGroup>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}> Phone Number</InputLabel>\n                        <TextField\n                            variant=\"filled\"\n                            fullWidth\n                            value={phone}\n                            onChange={e => setPhone(e.target.value)}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.root,\n                                    underline: classes.underline,\n                                },\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}> Email Address</InputLabel>\n                        <TextField\n                            variant=\"filled\"\n                            fullWidth\n                            value={email}\n                            onChange={e => setEmail(e.target.value)}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.root,\n                                    underline: classes.underline,\n                                },\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}> Residential Address </InputLabel>\n                        <TextField\n                            variant=\"filled\"\n                            fullWidth\n                            value={address}\n                            onChange={e => setAddress(e.target.value)}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.root,\n                                    underline: classes.underline,\n                                },\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}> Language Spoken </InputLabel>\n                        <TextField\n                            variant=\"filled\"\n                            fullWidth\n                            value={language}\n                            onChange={e => setLanguage(e.target.value)}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.root,\n                                    underline: classes.underline,\n                                },\n                            }}\n                        />\n                    </Grid>\n                    {\n                        (location.state.role === 'Patient') ?\n                            <Grid item xs={12}>\n                                <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Health Card Number </InputLabel>\n                                <TextField\n                                    variant=\"filled\"\n                                    fullWidth\n                                    value={healthcardnumber}\n                                    onChange={e => setHealthcardnumber(e.target.value)}\n                                    style={{ marginBottom: 5, marginTop: 5 }}\n                                    InputProps={{\n                                        classes: {\n                                            root: classes.root,\n                                            underline: classes.underline,\n                                        },\n                                    }}\n                                />\n                            </Grid>\n                            :\n                            null\n                    }\n\n                    {\n                        (location.state.role === 'Doctor') ?\n                            <>\n                                <Grid item xs={6}>\n                                    <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Speciality </InputLabel>\n                                    <Select\n                                        variant=\"filled\"\n                                        value={speciality}\n                                        fullWidth\n                                        onChange={e => setSpeciality(String(e.target.value))}\n                                        style={{ marginBottom: 5, marginTop: 5 }}\n                                    >\n                                        <MenuItem value={'Allergy and immunology'}>Allergy and immunology</MenuItem>\n                                        <MenuItem value={'Anesthesiologist'}>Anesthesiologist</MenuItem>\n                                        <MenuItem value={'Cardiologist'}>Cardiologist</MenuItem>\n                                        <MenuItem value={'Dermatology'}>Dermatology</MenuItem>\n                                        <MenuItem value={'Emergency medicine'}>Emergency medicine</MenuItem>\n                                        <MenuItem value={'Family medicine'}>Family medicine</MenuItem>\n                                        <MenuItem value={'Medical genetics'}>Medical genetics</MenuItem>\n                                        <MenuItem value={'Neurology'}>Neurology</MenuItem>\n                                        <MenuItem value={'Ophthalmology'}>Ophthalmology</MenuItem>\n                                        <MenuItem value={'Pathology'}>Pathology</MenuItem>\n                                        <MenuItem value={'Physical medicine and rehabilitation'}>Physical medicine and rehabilitation</MenuItem>\n                                        <MenuItem value={'Psychiatry'}>Psychiatry</MenuItem>\n                                        <MenuItem value={'Radiation oncology'}>Radiation oncology</MenuItem>\n                                        <MenuItem value={'Surgery'}>Surgery</MenuItem>\n                                        <MenuItem value={'Urology'}>Urology</MenuItem>\n                                    </Select>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <InputLabel style={{ marginBottom: 0 }}> Certifications </InputLabel>\n                                    <TextField\n                                        variant=\"filled\"\n                                        fullWidth\n                                        value={certification}\n                                        onChange={e => setCertification(e.target.value)}\n                                        style={{ marginBottom: 5, marginTop: 5 }}\n                                        InputProps={{\n                                            classes: {\n                                                root: classes.root,\n                                                underline: classes.underline,\n                                            },\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <InputLabel style={{ marginBottom: 0 }}> Education Details </InputLabel>\n                                    <TextField\n                                        variant=\"filled\"\n                                        fullWidth\n                                        multiline\n                                        rows={5}\n                                        value={education}\n                                        onChange={e => setEducation(e.target.value)}\n                                        style={{ marginBottom: 5, marginTop: 5 }}\n                                        InputProps={{\n                                            classes: {\n                                                root: classes.root,\n                                                underline: classes.underline,\n                                            },\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <InputLabel style={{ marginBottom: 0 }}> Awards </InputLabel>\n                                    <TextField\n                                        variant=\"filled\"\n                                        fullWidth\n                                        multiline\n                                        rows={5}\n                                        value={awards}\n                                        onChange={e => setAwards(e.target.value)}\n                                        style={{ marginBottom: 5, marginTop: 5 }}\n                                        InputProps={{\n                                            classes: {\n                                                root: classes.root,\n                                                underline: classes.underline,\n                                            },\n                                        }}\n                                    />\n                                </Grid>\n                            </>\n                            :\n                            null\n                    }\n\n                    <Grid item xs={12}>\n                        <Button\n                            type=\"button\"\n                            variant=\"contained\"\n                            className=\"submit\"\n                            onClick={() => onRegisterSubmit()}\n                            classes={{\n                                root: classes.rootButton,\n                            }}\n                        > REGISTER </Button>\n                        {(error) ? <p style={styles.errorTextStyle}>{error}</p> : null}\n                    </Grid>\n                </Grid>\n            </Paper>\n        </div>\n    );\n}\n\nexport default Register;","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Login.tsx",["99"],"import React, { useState } from \"react\";\nimport { TextField, Tabs, Tab, Button, IconButton, Card, InputAdornment, RadioGroup, Radio, FormControlLabel } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { styles } from '../assets/styles.js';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport Background from '../assets/img/medicalBackground.jpg';\nimport { userLogin } from '../remote/remote-functions';\n\nimport { useHistory } from \"react-router-dom\";\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            boxShadow: '1px 3px 12px -3px rgba(0,0,0, 1)',\n            borderRadius: '1.5rem'\n        },\n        cssOutlinedInput: {\n            '&$focused $notchedOutline': {\n                borderColor: \"#014F86\",\n            },\n            height: 50,\n            marginTop: 0,\n            paddingTop: 0\n        },\n\n        notchedOutline: {\n            borderWidth: '1px',\n            borderColor: \"#014F86\"\n        },\n        focused: {\n            borderColor: \"#014F86\"\n        },\n\n        iconfocused: {\n            '&:focus': {\n                outline: 'none',\n            },\n        },\n\n        rootButton: {\n            '&:hover': {\n                backgroundColor: \"#014F86\",\n            },\n            background: \"#012A4A\",\n            borderRadius: 3,\n            border: 0,\n            color: 'white',\n            fontWeight: 'bold',\n            height: 40,\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\n            marginTop: 15\n        },\n        indicator: {\n            backgroundColor: '#012A4A',\n            color: '#012A4A'\n        },\n    }),\n);\n\nfunction TabPanel(props: any) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`scrollable-prevent-tabpanel-${index}`}\n            aria-labelledby={`scrollable-prevent-tab-${index}`}\n            {...other}\n        >\n            {value === index && children}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\n\nexport const Login: React.FunctionComponent = (props) => {\n\n    const history = useHistory();\n\n    const classes = useStyles();\n    const [username, setUsername] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\n    const [hidden, setHidden] = useState(true);\n    const [errorUser, setErrorUser] = useState(false);\n    const [errorTextUser, setErrorTextUser] = useState(\"\");\n    const [errorPassword, setErrorPassword] = useState(false);\n    const [errorTextPassword, setErrorTextPassword] = useState(\"\");\n    const [errorAuth, setErrorAuth] = useState(false);\n    const [error, setError] = useState('');\n    const [role, setRole] = useState('');\n    const [tabValue, setTabValue] = useState(0);\n    const [match, setMatch] = useState(false);\n\n\n\n    const onChangeUsername = (event: any) => {\n        setErrorUser(false);\n        setErrorTextUser('');\n        setUsername(event.target.value);\n    }\n\n    const passwordOnChange = (event: any) => {\n        setErrorPassword(false);\n        setErrorTextPassword('');\n        setPassword(event.target.value);\n    }\n    const confirmPasswordOnChange = (event: any) => {\n        setConfirmPassword(event.target.value);\n    }\n\n    const handleTabChange = (event: any, newValue: any) => {\n        setTabValue(newValue);\n    };\n\n    const handleChangeIndex = (index: any) => {\n        setTabValue(index);\n    };\n\n    const toggleShow = () => {\n        setHidden(!hidden);\n    }\n\n    const onLogin = async () => {\n\n        if (username && password) {\n            try {\n                let user = await userLogin(role, username, password);\n                console.log(JSON.stringify(user))\n                if(user){\n                authentication(user);\n                }else{\n                    setErrorAuth(true)\n                    setError('User Not Found');\n                }\n            } catch (e) {\n                setErrorAuth(true)\n                setError('User Not Found');\n                console.log(e);\n            }\n        } else {\n            if (!password) {\n                setErrorPassword(true);\n                setErrorTextPassword('Please enter password')\n            }\n            if (!username) {\n                setErrorUser(true);\n                setErrorTextUser('Please enter user')\n            }\n        }\n    }\n\n    const authentication = (user: any) => {\n        if(user.role === \"Admin\"){\n            history.push({\n                pathname: '/admin',\n                state: {  //to access state use useLocation hook in function component\n                    adminInfo: user\n                },\n            });\n        }else if(user.role === \"Doctor\"){\n            if(user.status === 'Approved'){\n                history.push({\n                    pathname: '/doctor',\n                    state: {  //to access state use useLocation hook in function component\n                        doctorInfo: user\n                    },\n                });\n            }else if(user.status === 'Pending'){\n                setErrorAuth(true)\n                setError('Account is in Pending Status')\n            }else if(user.status === 'Rejected'){\n                setErrorAuth(true)\n                setError('Account is Rejected')\n            }  \n        }else if(user.role === \"Patient\"){\n            history.push({\n                pathname: '/patient',\n                state: {  //to access state use useLocation hook in function component\n                    patientInfo: user\n                },\n            });\n        }\n    }\n\n    const onRegister = () => {\n        if (username && password && role) {\n            if (password !== confirmPassword) {\n                setMatch(true)\n            } else {\n                history.push({\n                    pathname: '/register',\n                    state: {  //to access state use useLocation hook in function component\n                        role: role,\n                        username: username,\n                        password: password \n                    },\n                });\n            }\n        }\n    }\n\n    const MyRadio = withStyles({\n        root: {\n            color: \"#012A4A\",\n            '&$checked': {\n                color: \"#014F86\",\n            },\n        },\n        checked: {},\n    })((props) => <Radio color=\"default\" {...props} />);\n\n    const handleRadioChange = (event: any) => {\n        setRole(event.target.value);\n    };\n\n\n\n    return (\n        <div style={{ backgroundImage: `url(${Background})`, backgroundSize: 'cover', minHeight: '100vh', height: 'auto' }}>\n            <h1 id=\"title\">Revature Medical Clinic</h1>\n            <Card className=\"cardContainer\" classes={{ root: classes.root }}>\n                <Tabs\n                    value={tabValue}\n                    onChange={handleTabChange}\n                    variant=\"fullWidth\"\n                    classes={{\n                        indicator: classes.indicator,\n                    }}\n                    className=\"loginTab\"\n                >\n                    <Tab label=\"LOGIN\" style={{ color: \"white\", backgroundColor: \"#014F86\", width: \"30%\" }} />\n                    <Tab label=\"REGISTER\" style={{ color: \"white\", backgroundColor: \"#014F86\" }} />\n                </Tabs>\n                {/*  ----------------------------LOGIN------------------------ */}\n                <TabPanel value={tabValue} index={0}>\n                    <form className=\"form\" noValidate>\n                        <div className=\"cardRadio\">\n                            <RadioGroup row name=\"role\" onChange={handleRadioChange} style={{ color: \"#012A4A\" }}>\n                                <FormControlLabel\n                                    value=\"Patient\"\n                                    control={<MyRadio />}\n                                    label=\"Patient\"\n                                    labelPlacement=\"top\"\n                                    style={{ color: \"#012A4A\" }}\n                                />\n                                <FormControlLabel\n                                    value=\"Doctor\"\n                                    control={<MyRadio />}\n                                    label=\"Doctor\"\n                                    labelPlacement=\"top\"\n                                    style={{ color: \"#012A4A\" }}\n                                />\n                                <FormControlLabel\n                                    value=\"Admin\"\n                                    control={<MyRadio />}\n                                    label=\"Admin\"\n                                    labelPlacement=\"top\"\n                                    style={{ color: \"#012A4A\" }}\n                                />\n                            </RadioGroup>\n                        </div>\n                        <TextField\n                            error={errorUser}\n                            helperText={errorTextUser}\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            placeholder=\"Username\"\n                            name=\"username\"\n                            value={username}\n                            onChange={onChangeUsername}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.cssOutlinedInput,\n                                    notchedOutline: classes.notchedOutline,\n                                    focused: classes.focused,\n                                },\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <AccountCircle />\n                                    </InputAdornment>\n                                )\n                            }}\n                        />\n\n                        <TextField\n                            error={errorPassword}\n                            helperText={errorTextPassword}\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            placeholder=\"Password\"\n                            type={hidden ? \"password\" : \"text\"}\n                            value={password}\n                            onChange={passwordOnChange}\n                            style={{ marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.cssOutlinedInput,\n                                    notchedOutline: classes.notchedOutline,\n                                    focused: classes.focused,\n                                },\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <VpnKeyIcon />\n                                    </InputAdornment>\n                                ),\n                                endAdornment: (\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle password visibility\"\n                                            onClick={toggleShow}\n                                            style={{ color: \"#014F86\" }}\n                                        >\n                                            {hidden ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                )\n                            }}\n                        />\n\n                        <Button\n                            type=\"button\"\n                            fullWidth\n                            variant=\"contained\"\n                            className=\"submit\"\n                            onClick={() => onLogin()}\n                            classes={{\n                                root: classes.rootButton,\n                            }}\n                        > LOG IN </Button>\n\n                        {(errorAuth) ? <p style={styles.errorTextStyle}>{error}</p> : null}\n\n                    </form>\n                </TabPanel>\n                {/*  ----------------------------Register------------------------ */}\n\n                <TabPanel value={tabValue} index={1}>\n                    <form className=\"form\" noValidate>\n                        <div className=\"cardRadio\">\n                            <RadioGroup row name=\"role\" onChange={handleRadioChange} style={{ color: \"#012A4A\" }}>\n                                <FormControlLabel\n                                    value=\"Patient\"\n                                    control={<MyRadio />}\n                                    label=\"Patient\"\n                                    labelPlacement=\"top\"\n                                    style={{ color: \"#012A4A\" }}\n                                />\n                                <FormControlLabel\n                                    value=\"Doctor\"\n                                    control={<MyRadio />}\n                                    label=\"Doctor\"\n                                    labelPlacement=\"top\"\n                                    style={{ color: \"#012A4A\" }}\n                                />\n                            </RadioGroup>\n                        </div>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            placeholder=\"New Username\"\n                            name=\"username\"\n                            value={username}\n                            onChange={onChangeUsername}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.cssOutlinedInput,\n                                    notchedOutline: classes.notchedOutline,\n                                    focused: classes.focused,\n                                },\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <AccountCircle />\n                                    </InputAdornment>\n                                )\n                            }}\n                        />\n\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            placeholder=\"New Password\"\n                            type=\"password\"\n                            value={password}\n                            onChange={passwordOnChange}\n                            style={{ marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.cssOutlinedInput,\n                                    notchedOutline: classes.notchedOutline,\n                                    focused: classes.focused,\n                                },\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <VpnKeyIcon />\n                                    </InputAdornment>\n                                )\n                            }}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"confirm password\"\n                            placeholder=\"Confirm Password\"\n                            type=\"password\"\n                            value={confirmPassword}\n                            onChange={confirmPasswordOnChange}\n                            style={{ marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.cssOutlinedInput,\n                                    notchedOutline: classes.notchedOutline,\n                                    focused: classes.focused,\n                                },\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <VpnKeyIcon />\n                                    </InputAdornment>\n                                )\n                            }}\n                        />\n\n                        <Button\n                            type=\"button\"\n                            fullWidth\n                            variant=\"contained\"\n                            className=\"submit\"\n                            onClick={() => onRegister()}\n                            classes={{\n                                root: classes.rootButton,\n                            }}\n                        > REGISTER </Button>\n\n                        {(match) ? <p style={styles.errorTextStyle}>Password doesn't match</p> : null}\n\n                    </form>\n\n                </TabPanel>\n\n\n            </Card>\n        </div>\n    );\n}\n\n","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Doctor.tsx",[],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/ForumList.tsx",[],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/PatientHome.tsx",["100","101"],"import React from 'react';\nimport '../assets/patient.scss'\nimport { PatientNavBar } from './PatientNavBar';\nimport { RequestList } from './RequestList';\nimport { useLocation } from 'react-router-dom';\n\n\n\nexport const PatientHome: React.FunctionComponent<any> = () => {\n    const location: any = useLocation();\n    const {patientInfo} = location.state;\n    return(\n        <>\n                <PatientNavBar patientInfo={location.state.patientInfo}>\n                    <div>{location.state.patientInfo.patientId}</div>\n                </PatientNavBar>\n\n          </>  \n        \n    )\n}\n\nexport default PatientHome;","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/RequestList.tsx",["102","103"],"import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport PatientNavBar from './PatientNavBar'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Grid } from '@material-ui/core';\nimport { getRequestList } from '../remote/remote-functions';\nimport { useLocation } from 'react-router-dom';\n\ninterface IPatient{\n    healthCardNumber:number,\n    firstname:string,\n\n}\n\ninterface IDoctor{\n    firstname:string\n    lastname:string\n    email:string\n    phone:string\n}\ninterface IReqList{\n    patientId:IPatient,\n    doctorId:IDoctor,\n    problem:string,\n    responsed:boolean,\n    timeStamp:string,\n    requestId:number\n    prescription:string\n}\n\n\n\nexport const RequestList:React.FunctionComponent<any> = () => {\n\n    const [data, setRequestList] = useState<IReqList[]>([])\n    const location: any = useLocation()\n\n    const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            marginLeft: '5%',\n            marginRight: '5%',\n        },\n        heading: {\n            fontSize: theme.typography.pxToRem(15),\n            flexBasis: '33.33%',\n            flexShrink: 0,\n        },\n        secondaryHeading: {\n            fontSize: theme.typography.pxToRem(15),\n            color: theme.palette.text.secondary,\n        },\n        paper: {\n            padding: theme.spacing(2),\n            textAlign: 'center',\n            color: theme.palette.text.secondary,\n        },\n    }),\n    )\n\n    function getDoctorInfo(dinfo:IDoctor){\n\n        return(\n            <>\n            <h4>Doctor's Response:</h4>\n            \n            Doctor's name: {dinfo.firstname} {dinfo.lastname}<br/>\n            Doctor's contact information: {dinfo.email}, phone: {dinfo.phone}\n             \n            </>\n        )\n    }\n\n    async function getContent(){\n        console.log(location.state.patientInfo.patientId)\n        let getReqList = await getRequestList(location.state.patientInfo.patientId)\n        setRequestList(getReqList)\n    } \n\n    useEffect(() => {\n        getContent()\n    }, [])\n\n    \n        const classes = useStyles();\n        const [expanded, setExpanded] = React.useState<string | false>(false);\n      \n        const handleChange = (panel: string) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\n          setExpanded(isExpanded ? panel : false);\n        }\n      \n\n        return(\n            \n            <PatientNavBar>\n \n                <div className={classes.root}>\n                \n                <Grid container spacing={2}>\n                    <Grid item xs={3}>\n                    \n                    </Grid>\n                    <Grid item xs={3}>{data[0] ? data[0].patientId.firstname : \"\"}</Grid>\n                    <Grid item xs={3}>HCN:</Grid>\n                    <Grid item xs={3}></Grid>\n                    {data.map(text => \n                        <Grid item xs={12}>\n                            <Accordion expanded={expanded === `${text.requestId}`} onChange={handleChange(`${text.requestId}`)}>\n                                <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1bh-content\"\n                                    id=\"panel1bh-header\"\n                                    >\n                                    <Typography className={classes.heading}>Reference number: {text.requestId}</Typography>\n                                    <Typography className={classes.secondaryHeading}>Status: {text.responsed ? \"Resolved\" : \"Pending\"}</Typography>\n                                </AccordionSummary>\n                            <AccordionDetails>\n                                <Typography>\n                                    <h4>Request Information:</h4>\n                                    Problem/Symptoms: {text.problem}<br/>\n                                    {text.doctorId ? getDoctorInfo(text.doctorId) : \"no doctor\"}\n                                </Typography>\n                            </AccordionDetails>\n                            </Accordion>\n                        </Grid>\n                    )}\n                                \n                  </Grid>    \n                </div>\n                \n            </PatientNavBar> \n        )\n    \n}\n","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/assets/styles.js",[],["104","105"],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/remote/remote-functions.ts",[],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/PatientNavBar.tsx",["106"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport HomeIcon from '@material-ui/icons/Home';\nimport SpeakerNotesIcon from '@material-ui/icons/SpeakerNotes';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    appBar: {\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    hide: {\n      display: 'none',\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    drawerHeader: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: 'flex-end',\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      marginLeft: -drawerWidth,\n    },\n    contentShift: {\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    },\n    toolbar: {\n      backgroundColor: \"#014F86\"\n    }\n  }),\n);\n\n\n\n\nexport const PatientNavBar:React.FunctionComponent<any> = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = useState(false);\n  const history = useHistory();\n  const location: any = useLocation();\n\n  const navbarData = [\n    {\n      name: 'Home',\n      path: '/patient',\n    },\n    {\n      name: 'Past requests',\n      path: '/requestList',\n    },\n    {\n      name: 'Create request',\n      path: '/',\n    },\n    {\n      name: 'Forum',\n      path: '/forumList',\n    },\n    {\n      name: 'Logout',\n      path: '/',\n    }\n  ]\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n \n  const homeClicked = () => {\n    history.push({\n      pathname: navbarData[0].path,\n      state: {  //to access state use useLocation hook in function component\n        patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \n    }\n  })\n  }\n\n  const requestListClicked = () => {\n      history.push({\n        pathname: navbarData[1].path,\n        state: {  //to access state use useLocation hook in function component\n            patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \n        }\n    })\n  }\n\n  const createRequestClicked = () => {\n    history.push({\n      pathname: navbarData[2].path,\n      state: {  //to access state use useLocation hook in function component\n          patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \n      }\n  })\n  }\n\n  const forumClicked = () => {\n    history.push({\n      pathname: navbarData[3].path,\n      state: {  //to access state use useLocation hook in function component\n          patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \n      }\n  })\n  }\n\n  const logoutClicked = () => {\n    history.push(navbarData[4].path)\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h5\" noWrap>\n            Revature Medical Clinic\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n\n          <List>\n\n                <ListItem onClick={homeClicked}  button key={navbarData[0].name}>\n                <ListItemIcon><HomeIcon/></ListItemIcon>\n                <ListItemText primary={navbarData[0].name} />\n                </ListItem>\n          \n                <ListItem onClick={requestListClicked}  button key={navbarData[1].name}>\n                <ListItemIcon><DescriptionIcon/></ListItemIcon>\n                <ListItemText primary={navbarData[1].name} />\n                </ListItem>\n           \n                <ListItem onClick={createRequestClicked}  button key={navbarData[2].name}>\n                <ListItemIcon><NoteAddIcon/></ListItemIcon>\n                <ListItemText primary={navbarData[2].name} />\n                </ListItem>\n              \n                <ListItem onClick={forumClicked}  button key={navbarData[3].name}>\n                <ListItemIcon><SpeakerNotesIcon/></ListItemIcon>\n                <ListItemText primary={navbarData[3].name} />\n                </ListItem>\n\n                <ListItem onClick={logoutClicked} button key={navbarData[4].name}>\n                <ListItemIcon><ExitToAppIcon/></ListItemIcon>\n                <ListItemText primary={navbarData[4].name} />\n                </ListItem>\n              \n          </List>\n        \n        <Divider />\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <Typography paragraph>\n          {props.children}\n        </Typography>\n      </main>\n    </div>\n  );\n}\n\nexport default PatientNavBar","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/forum/index.ts",[],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/remote/index.ts",[],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/forum/Forum.tsx",["107","108","109","110","111","112"],"import { spawn } from \"child_process\";\nimport React, { useState, useEffect } from \"react\";\nimport { forumList, messageList } from \"./mockups\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Message } from \"./Message\";\nimport { Button, Container } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { postTopic,postMessage } from '../../remote/remote-functions';\nimport moment from 'moment';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"60%\",\n      maxWidth: \"36ch\",\n      backgroundColor: theme.palette.background.paper,\n    },\n    inline: {\n      display: \"inline\",\n    },\n  })\n);\n\nexport const Forum: React.FC = (props) => {\n  const [forums, setForums] = useState<any>([]);\n\n  const [message, setMessage] = useState<any>([]);\n\n  const [isShow, setIsShow] = useState<any>(false);\n\n  const [topic, setTopic] = useState<string>();\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [inputShow, setInputShow] = useState<boolean>(false);\n\n  const [inputTopic,setInputTopic] = useState<string>();\n\n  const [inputMessage, setInputMessage] = useState<string>();\n\n  const [currentTopic,setCurrentTopic]=useState<number>();\n\n  async function getMessagesByForumId(forumId: number, topic: string) {\n    setIsShow(true);\n\n    setTopic(topic);\n    setLoading(true);\n    setInputShow(false);\n    setCurrentTopic(forumId);\n    let url = `http://localhost:8080/message/${forumId}`;\n    try {\n      let response = await fetch(url);\n      const data = await response.json();\n      console.log(data);\n      setMessage(data);\n      setLoading(false);\n      return data;\n    } catch (error) {\n      console.log(\"Request Failed\", error);\n    }\n  }\n\n\n\n  const onPostTopic=async()=>{\n    const topicstring={\n      topic:inputTopic\n    }\n    const data=await postTopic(topicstring);\n    setForums([...forums,data])\n    setInputTopic('');\n    setInputShow(false)\n\n  }\n\n  const handleTopicChange=e=>{\n    \n    setInputTopic(e.target.value);\n  }\n  const handleMessageChange=e=>{\n    setInputMessage(e.target.value);\n    \n  }\n\n  const onPostMessage=async()=>{\n    const currentInputMessage={\n      message:inputMessage,\n      forumId:{\n        forumId:currentTopic\n      }\n    }\n    const data=await postMessage(currentInputMessage);\n    setInputMessage('')\n    setMessage([...message,data])\n    \n  }\n\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    const fetchforum = async () => {\n      try {\n        const responses = await fetch(\"http://localhost:8080/forum\");\n        const data = await responses.json();\n\n        setForums(data);\n        console.log(data);\n      } catch (e) {\n        console.log(e.message);\n      }\n    };\n    fetchforum();\n  }, []);\n\n  return (\n    <div>\n      {isShow ? (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            setIsShow(false);\n          }}\n        >\n          Back\n        </Button>\n      ) : null}\n      {isShow ? <Typography variant=\"h4\">{topic}</Typography> : null}\n      <Grid container spacing={3}>\n        \n        {!isShow ? (\n          <Grid item xs={4}>\n            <Button  onClick={()=>{setInputShow(true)}} >New Post</Button>\n            <List className={classes.root}>\n              {forums.map((r, index) => (\n                <ListItem\n                  alignItems=\"flex-start\"\n                  onClick={() => getMessagesByForumId(r.forumId, r.topic)}\n                >\n             \n                  <ListItemText\n                    primary={<Typography variant=\"h4\">{r.topic}</Typography>}\n                    secondary={\n                      <React.Fragment>\n                        <Typography\n                          component=\"span\"\n                          variant=\"body2\"\n                          className={classes.inline}\n                          color=\"textPrimary\"\n                        >\n                          by:{r.username}\n                          <br />\n                        </Typography>\n                        Submitted:{moment(r.timeStamp).format('YYYY-MM-DD HH:mm:ss')}\n                      </React.Fragment>\n                    }\n                  />\n                </ListItem>\n              ))}\n\n              <Divider variant=\"inset\" component=\"li\" />\n            </List>\n          </Grid>\n        ) : null}\n        {inputShow ? (\n          <div>\n            <TextField id=\"standard-basic\" label=\"Input your topic\" name=\"topic\" value={inputTopic} onChange={handleTopicChange}/><br/>\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\"  onClick={() => onPostTopic()}>\n              Submit\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={()=>setInputShow(false)}>\n              Cancel\n            </Button>\n          </div>\n        ) : null}\n        {/* <Button onClick= {()=>getMessagesByForumId(3)}>click</Button> */}\n        {loading ? <Typography variant=\"h4\">Loading......</Typography> : null}\n        {isShow ? (\n          <Grid item xs={8}>\n            {!loading\n              ? message.map((m, index) => (\n                  <Message\n                    message={m.message}\n                    timestamp={moment(m.timeStamp).format('YYYY-MM-DD HH:mm:ss')}\n                    doctor={!m.doctorId ? \"\" : m.doctorId.username}\n                    patient={!m.patientId ? \"\" : m.patientId.username}\n                  />\n                ))\n              : null}\n            {!loading ? (\n              <div >\n                <TextField id=\"standard-basic\" label=\"Write your post\" name=\"message\" value={inputMessage} onChange={handleMessageChange}/>\n                <Button variant=\"contained\" color=\"primary\" onClick={onPostMessage}>\n                  Submit\n                </Button>\n              </div>\n            ) : null}\n          </Grid>\n        ) : null}\n      </Grid>\n    </div>\n  );\n};\n","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/forum/Message.tsx",["113","114","115","116","117","118","119","120","121"],"import { spawn } from \"child_process\";\nimport React, { useState, useEffect } from \"react\";\nimport { forumList } from \"./mockups\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\n\n\ninterface MessageIdProps {\n  message: string;\n  timestamp: string;\n  doctor: string;\n  patient: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      maxWidth: \"36ch\",\n      backgroundColor: theme.palette.background.paper,\n    },\n    inline: {\n      display: \"inline\",\n    },\n  })\n);\n\nexport const Message: React.FC<MessageIdProps> = ({\n  message,\n  timestamp,\n  doctor,\n  patient,\n}) => {\n  const classes = useStyles();\n  return (\n    <>\n      <ListItemText\n        primary={<Typography variant=\"h4\">{message}</Typography>}\n        secondary={\n          <React.Fragment>\n            <Typography\n              component=\"span\"\n              variant=\"body2\"\n              className={classes.inline}\n              color=\"textPrimary\"\n            >\n              by:{patient ? patient : doctor}\n              <br />\n            </Typography>\n            Submitted:{timestamp}\n          </React.Fragment>\n        }\n      />\n      \n    </>\n  );\n};\n","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/common/DoctorsList.tsx",[],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/common/DoctorInfoItem.tsx",["122"],"import React, { useState } from 'react';\nimport { Paper, Grid, Chip, Avatar, Tooltip, IconButton, LinearProgress } from '@material-ui/core';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport { updateStatus } from '../../remote/remote-functions';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paperItem: {\n            '&:hover': {\n                backgroundColor: '#0262a6',\n            },\n            marginTop: 10,\n            padding: 5,\n            fontSize: 22,\n            backgroundColor: '#014F86',\n            color: 'white',\n        },\n        ApproveButton: {\n            '&:hover': {\n                color: '#4BB543',\n            },\n            color: \"white\",\n        },\n        DenyButton: {\n            '&:hover': {\n                color: '#DC143C',\n            },\n            color: \"white\",\n        },\n        progressStyle: {\n            backgroundColor: '#EDF2FB'\n        },\n        progressBar: {\n            backgroundColor: '#012A4A'\n        }\n    })\n);\n\n\n\n\nexport const DoctorInfoItem: React.FunctionComponent<any> = (props: any) => {\n    const classes = useStyles();\n\n    const item = props.item;\n    const [updating, setUpdating] = useState(false)\n\n\n    const statusColor = (status) => {\n        switch (status) {\n            case 'Approved':\n                return <Chip style={{ backgroundColor: '#4BB543', color: 'white', width: '5rem' }} label='Approved' />;\n            case 'Rejected':\n                return <Chip style={{ backgroundColor: '#DC143C', color: 'white', width: '5rem' }} label='Rejected' />;\n            case 'Pending':\n                return <Chip style={{ backgroundColor: '#e0e0e0', color: '#012A4A', width: '5rem' }} label='Pending' />;\n        }\n    }\n\n    const onSubmit = async (doctorId, status, email) => {\n        try {\n            setUpdating(true)\n            let res = await updateStatus(doctorId, status, email)\n            props.handleChange();\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    return (\n        <>\n            <Paper elevation={1} classes={{ root: classes.paperItem }}>\n                <Grid container spacing={1}>\n                    <Grid item xs={3} style={{ marginTop: 8, marginLeft: 10 }}>\n                        {statusColor(item.status)}\n                    </Grid>\n                    <Grid item xs style={{ marginTop: 8 }}>\n                        <Chip avatar={<Avatar style={{ backgroundColor: '#014F86', color: 'white' }}>ID</Avatar>} label={item.doctorId} style={{ fontSize: 20 }} />\n                    </Grid>\n                    <Grid item xs={6} style={{ marginTop: 8 }}>\n                        {item.firstname} {item.lastname}\n                    </Grid>\n                    <Grid>\n                        <Tooltip title=\"Approved\">\n                            <span>\n                            <IconButton\n                                onClick={() => onSubmit(item.doctorId, \"Approved\", item.email)}\n                                disabled={item.status === 'Approved'}\n                                classes={{\n                                    root: classes.ApproveButton,\n                                }}>\n                                <ThumbUpIcon style={{ fontSize: 35 }} />\n                            </IconButton>\n                            </span>\n                        </Tooltip>\n                    </Grid>\n                    <Grid>\n                        <Tooltip title=\"Reject\">\n                            <IconButton\n                                onClick={() => onSubmit(item.doctorId, \"Rejected\", item.email)}\n                                disabled={item.status === 'Rejected'}\n                                classes={{\n                                    root: classes.DenyButton,\n                                }}>\n                                <ThumbDownIcon style={{ fontSize: 35 }} />\n                            </IconButton>\n                        </Tooltip>\n                    </Grid>\n                </Grid>\n\n            </Paper>\n            {updating === true ?\n                <LinearProgress classes={{indeterminate: classes.progressStyle, barColorPrimary: classes.progressBar}}/>\n            :null}\n        </>\n    );\n}","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/DoctorNavBar.tsx",[],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":1,"column":16,"nodeType":"129","messageId":"130","endLine":1,"endColumn":24},{"ruleId":"127","severity":1,"message":"131","line":3,"column":35,"nodeType":"129","messageId":"130","endLine":3,"endColumn":39},{"ruleId":"127","severity":1,"message":"132","line":37,"column":11,"nodeType":"129","messageId":"130","endLine":37,"endColumn":24},{"ruleId":"127","severity":1,"message":"133","line":117,"column":25,"nodeType":"129","messageId":"130","endLine":117,"endColumn":29},{"ruleId":"127","severity":1,"message":"134","line":128,"column":11,"nodeType":"129","messageId":"130","endLine":128,"endColumn":28},{"ruleId":"127","severity":1,"message":"135","line":4,"column":10,"nodeType":"129","messageId":"130","endLine":4,"endColumn":21},{"ruleId":"127","severity":1,"message":"136","line":11,"column":12,"nodeType":"129","messageId":"130","endLine":11,"endColumn":23},{"ruleId":"127","severity":1,"message":"137","line":2,"column":8,"nodeType":"129","messageId":"130","endLine":2,"endColumn":13},{"ruleId":"138","severity":1,"message":"139","line":87,"column":8,"nodeType":"140","endLine":87,"endColumn":10,"suggestions":"141"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"131","line":23,"column":10,"nodeType":"129","messageId":"130","endLine":23,"endColumn":14},{"ruleId":"127","severity":1,"message":"142","line":1,"column":10,"nodeType":"129","messageId":"130","endLine":1,"endColumn":15},{"ruleId":"127","severity":1,"message":"143","line":3,"column":10,"nodeType":"129","messageId":"130","endLine":3,"endColumn":19},{"ruleId":"127","severity":1,"message":"144","line":3,"column":21,"nodeType":"129","messageId":"130","endLine":3,"endColumn":32},{"ruleId":"127","severity":1,"message":"145","line":9,"column":8,"nodeType":"129","messageId":"130","endLine":9,"endColumn":22},{"ruleId":"127","severity":1,"message":"146","line":10,"column":8,"nodeType":"129","messageId":"130","endLine":10,"endColumn":14},{"ruleId":"127","severity":1,"message":"147","line":13,"column":18,"nodeType":"129","messageId":"130","endLine":13,"endColumn":27},{"ruleId":"127","severity":1,"message":"142","line":1,"column":10,"nodeType":"129","messageId":"130","endLine":1,"endColumn":15},{"ruleId":"127","severity":1,"message":"128","line":2,"column":17,"nodeType":"129","messageId":"130","endLine":2,"endColumn":25},{"ruleId":"127","severity":1,"message":"148","line":2,"column":27,"nodeType":"129","messageId":"130","endLine":2,"endColumn":36},{"ruleId":"127","severity":1,"message":"143","line":3,"column":10,"nodeType":"129","messageId":"130","endLine":3,"endColumn":19},{"ruleId":"127","severity":1,"message":"149","line":5,"column":8,"nodeType":"129","messageId":"130","endLine":5,"endColumn":12},{"ruleId":"127","severity":1,"message":"150","line":6,"column":8,"nodeType":"129","messageId":"130","endLine":6,"endColumn":16},{"ruleId":"127","severity":1,"message":"151","line":7,"column":8,"nodeType":"129","messageId":"130","endLine":7,"endColumn":15},{"ruleId":"127","severity":1,"message":"145","line":9,"column":8,"nodeType":"129","messageId":"130","endLine":9,"endColumn":22},{"ruleId":"127","severity":1,"message":"146","line":10,"column":8,"nodeType":"129","messageId":"130","endLine":10,"endColumn":14},{"ruleId":"127","severity":1,"message":"152","line":65,"column":17,"nodeType":"129","messageId":"130","endLine":65,"endColumn":20},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'location' is assigned a value but never used.","'user' is assigned a value but never used.","'handleChangeIndex' is assigned a value but never used.","'RequestList' is defined but never used.","'patientInfo' is assigned a value but never used.","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getContent'. Either include it or remove the dependency array.","ArrayExpression",["155"],"'spawn' is defined but never used.","'forumList' is defined but never used.","'messageList' is defined but never used.","'ListItemAvatar' is defined but never used.","'Avatar' is defined but never used.","'Container' is defined but never used.","'useEffect' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'Divider' is defined but never used.","'res' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},"Update the dependencies array to be: [getContent]",{"range":"158","text":"159"},[2361,2363],"[getContent]"]
=======
[{"C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\index.tsx":"1","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\reportWebVitals.ts":"2","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\App.tsx":"3","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Register.tsx":"4","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Login.tsx":"5","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Doctor.tsx":"6","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Admin.tsx":"7","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\RequestList.tsx":"8","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientHome.tsx":"9","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientNavBar.tsx":"10","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DoctorHome.tsx":"11","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DoctorNavBar.tsx":"12"},{"size":519,"mtime":1610227387259,"results":"13","hashOfConfig":"14"},{"size":440,"mtime":1610227387269,"results":"15","hashOfConfig":"14"},{"size":1318,"mtime":1610231502959,"results":"16","hashOfConfig":"14"},{"size":135,"mtime":1610227387242,"results":"17","hashOfConfig":"14"},{"size":171,"mtime":1610227387212,"results":"18","hashOfConfig":"14"},{"size":131,"mtime":1610227387209,"results":"19","hashOfConfig":"14"},{"size":129,"mtime":1610227387204,"results":"20","hashOfConfig":"14"},{"size":250,"mtime":1610227387243,"results":"21","hashOfConfig":"14"},{"size":575,"mtime":1610227387215,"results":"22","hashOfConfig":"14"},{"size":5367,"mtime":1610227387240,"results":"23","hashOfConfig":"14"},{"size":561,"mtime":1610226009770,"results":"24","hashOfConfig":"14"},{"size":5177,"mtime":1610224933000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"4izccs",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\index.tsx",[],["57","58"],"C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\reportWebVitals.ts",[],"C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\App.tsx",["59"],"import React from 'react';\r\n// import './App.css';\r\nimport './assets/primary.scss';\r\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom'\r\nimport { Register } from './components/Register';\r\nimport { Login } from './components/Login';\r\nimport { Admin } from './components/Admin';\r\nimport { Doctor } from './components/Doctor';\r\nimport { PatientHome } from './components/PatientHome';\r\nimport { RequestList } from './components/RequestList';\r\nimport { DoctorHome } from './components/DoctorHome';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" id=\"container\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" render={() => <h1>Default Path</h1>} />\r\n          <Route path=\"/register\" component={Register} />\r\n          <Route path=\"/login\" component={Login} />\r\n          <Route path=\"/admin\" component={Admin} />\r\n          \r\n          <Route path=\"/patient\" component={PatientHome} />\r\n          <Route path=\"/requestList\" component={RequestList} />\r\n          <Route path=\"/doctor\" component={DoctorHome} />\r\n          \r\n        </Switch>\r\n        <Link to=\"/login\"> login</Link>&nbsp;|&nbsp;\r\n        <Link to=\"/patient\">Patient</Link>&nbsp;|&nbsp;\r\n        <Link to=\"/doctor\">Doctor</Link>&nbsp;\r\n      </Router> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Register.tsx",[],"C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Login.tsx",["60"],"import React from 'react';\r\nimport { Redirect } from 'react-router';\r\n\r\nexport const Login: React.FunctionComponent = () => {\r\n    return(\r\n       <h1>Login</h1>\r\n    )\r\n}","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Doctor.tsx",[],"C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Admin.tsx",[],"C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\RequestList.tsx",[],"C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientHome.tsx",["61","62","63","64","65","66"],"import { Container } from '@material-ui/core';\r\nimport { Router } from '@material-ui/icons';\r\nimport React from 'react';\r\nimport { Route, Switch } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport '../assets/patient.scss'\r\nimport { PatientNavBar } from './PatientNavBar';\r\nimport { RequestList } from './RequestList';\r\n\r\n\r\n\r\nexport const PatientHome: React.FunctionComponent = () => {\r\n    return(\r\n        <>\r\n                <PatientNavBar>\r\n                    <div>hiiiii</div>\r\n                </PatientNavBar>\r\n\r\n          </>  \r\n        \r\n    )\r\n}","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientNavBar.tsx",["67","68","69","70"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { RequestList } from './RequestList';\r\nimport { Router } from '@material-ui/icons';\r\nimport { Route, Switch } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    appBar: {\r\n      transition: theme.transitions.create(['margin', 'width'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n      transition: theme.transitions.create(['margin', 'width'], {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n      display: 'none',\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n      justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n      transition: theme.transitions.create('margin', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n      transition: theme.transitions.create('margin', {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n      marginLeft: 0,\r\n    },\r\n    toolbar: {\r\n      backgroundColor: \"#014F86\"\r\n    }\r\n  }),\r\n);\r\n\r\nconst navbarData = [\r\n  {\r\n    name: 'Home',\r\n    path: '/patient'\r\n  },\r\n  {\r\n    name: 'View requests',\r\n    path: '/requestList'\r\n  },\r\n  {\r\n    name: 'Create request',\r\n    path: '/'\r\n  },\r\n  {\r\n    name: 'Forum',\r\n    path: '/'\r\n  }\r\n  \r\n]\r\n\r\n\r\nexport const PatientNavBar:React.FunctionComponent = (props) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h5\" noWrap>\r\n            Revature Medical Clinic\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n\r\n          <List>\r\n            {navbarData.map((text, index) => (\r\n              <ListItem component={Link} to={text.path} button key={text.name}>\r\n                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                <ListItemText primary={text.name} />\r\n                \r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        \r\n        <Divider />\r\n      </Drawer>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <div className={classes.drawerHeader} />\r\n        <Typography paragraph>\r\n          {props.children}\r\n        </Typography>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientNavBar","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DoctorHome.tsx",["71","72","73","74","75","76"],"import { Container } from '@material-ui/core';\nimport { Router } from '@material-ui/icons';\nimport React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport '../assets/patient.scss'\nimport { DoctorNavBar } from './DoctorNavBar';\nimport { RequestList } from './RequestList';\n\n\n\nexport const DoctorHome: React.FunctionComponent = () => {\n    return(\n        <>\n                <DoctorNavBar>\n                    <div>Doctor Navbar Test</div>\n                </DoctorNavBar>\n\n          </>  \n        \n    )\n}","C:\\Revature\\proj2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DoctorNavBar.tsx",["77","78","79","80"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { RequestList } from './RequestList';\nimport { Router } from '@material-ui/icons';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    appBar: {\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    hide: {\n      display: 'none',\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    drawerHeader: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: 'flex-end',\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      marginLeft: -drawerWidth,\n    },\n    contentShift: {\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    },\n    toolbar: {\n      backgroundColor: \"#014F86\"\n    }\n  }),\n);\n\nconst navbarData = [\n  {\n    name: 'Home',\n    path: '/doctor'\n  },\n  {\n    name: 'View pending requests',\n    path: '/'\n  },\n  {\n    name: 'View past requests',\n    path: '/'\n  },\n  {\n    name: 'Forum',\n    path: '/'\n  }\n  \n]\n\n\nexport const DoctorNavBar:React.FunctionComponent = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h5\" noWrap>\n            Revature Medical Clinic\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n\n          <List>\n            {navbarData.map((text, index) => (\n              <ListItem component={Link} to={text.path} button key={text.name}>\n                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n                <ListItemText primary={text.name} />\n                \n              </ListItem>\n            ))}\n          </List>\n        \n        <Divider />\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <Typography paragraph>\n          {props.children}\n        </Typography>\n      </main>\n    </div>\n  );\n}\n\nexport default DoctorNavBar",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":8,"column":10,"nodeType":"87","messageId":"88","endLine":8,"endColumn":16},{"ruleId":"85","severity":1,"message":"89","line":2,"column":10,"nodeType":"87","messageId":"88","endLine":2,"endColumn":18},{"ruleId":"85","severity":1,"message":"90","line":1,"column":10,"nodeType":"87","messageId":"88","endLine":1,"endColumn":19},{"ruleId":"85","severity":1,"message":"91","line":2,"column":10,"nodeType":"87","messageId":"88","endLine":2,"endColumn":16},{"ruleId":"85","severity":1,"message":"92","line":4,"column":10,"nodeType":"87","messageId":"88","endLine":4,"endColumn":15},{"ruleId":"85","severity":1,"message":"93","line":4,"column":17,"nodeType":"87","messageId":"88","endLine":4,"endColumn":23},{"ruleId":"85","severity":1,"message":"94","line":5,"column":10,"nodeType":"87","messageId":"88","endLine":5,"endColumn":14},{"ruleId":"85","severity":1,"message":"95","line":8,"column":10,"nodeType":"87","messageId":"88","endLine":8,"endColumn":21},{"ruleId":"85","severity":1,"message":"95","line":20,"column":10,"nodeType":"87","messageId":"88","endLine":20,"endColumn":21},{"ruleId":"85","severity":1,"message":"91","line":21,"column":10,"nodeType":"87","messageId":"88","endLine":21,"endColumn":16},{"ruleId":"85","severity":1,"message":"92","line":22,"column":10,"nodeType":"87","messageId":"88","endLine":22,"endColumn":15},{"ruleId":"85","severity":1,"message":"93","line":22,"column":17,"nodeType":"87","messageId":"88","endLine":22,"endColumn":23},{"ruleId":"85","severity":1,"message":"90","line":1,"column":10,"nodeType":"87","messageId":"88","endLine":1,"endColumn":19},{"ruleId":"85","severity":1,"message":"91","line":2,"column":10,"nodeType":"87","messageId":"88","endLine":2,"endColumn":16},{"ruleId":"85","severity":1,"message":"92","line":4,"column":10,"nodeType":"87","messageId":"88","endLine":4,"endColumn":15},{"ruleId":"85","severity":1,"message":"93","line":4,"column":17,"nodeType":"87","messageId":"88","endLine":4,"endColumn":23},{"ruleId":"85","severity":1,"message":"94","line":5,"column":10,"nodeType":"87","messageId":"88","endLine":5,"endColumn":14},{"ruleId":"85","severity":1,"message":"95","line":8,"column":10,"nodeType":"87","messageId":"88","endLine":8,"endColumn":21},{"ruleId":"85","severity":1,"message":"95","line":20,"column":10,"nodeType":"87","messageId":"88","endLine":20,"endColumn":21},{"ruleId":"85","severity":1,"message":"91","line":21,"column":10,"nodeType":"87","messageId":"88","endLine":21,"endColumn":16},{"ruleId":"85","severity":1,"message":"92","line":22,"column":10,"nodeType":"87","messageId":"88","endLine":22,"endColumn":15},{"ruleId":"85","severity":1,"message":"93","line":22,"column":17,"nodeType":"87","messageId":"88","endLine":22,"endColumn":23},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"@typescript-eslint/no-unused-vars","'Doctor' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'Container' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'Link' is defined but never used.","'RequestList' is defined but never used.","no-global-assign","no-unsafe-negation"]
>>>>>>> f55b7c0008e68f11d2d2dd7862c47d03487fe0d9
