[{"C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\index.tsx":"1","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\reportWebVitals.ts":"2","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\App.tsx":"3","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Admin.tsx":"4","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Login.tsx":"5","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\RequestList.tsx":"6","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\ForumList.tsx":"7","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Register.tsx":"8","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientHome.tsx":"9","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Doctor.tsx":"10","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PastRequestList.tsx":"11","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DocRequestList.tsx":"12","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\assets\\styles.js":"13","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\remote-functions.ts":"14","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientNavBar.tsx":"15","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\common\\DoctorsList.tsx":"16","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DoctorNavBar.tsx":"17","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\index.ts":"18","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\common\\DoctorInfoItem.tsx":"19","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\index.ts":"20","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\Forum.tsx":"21","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Request.tsx":"22"},{"size":526,"mtime":1610678041598,"results":"23","hashOfConfig":"24"},{"size":440,"mtime":1610678041603,"results":"25","hashOfConfig":"24"},{"size":1633,"mtime":1610767264237,"results":"26","hashOfConfig":"24"},{"size":4171,"mtime":1610678041577,"results":"27","hashOfConfig":"24"},{"size":18663,"mtime":1610678041584,"results":"28","hashOfConfig":"24"},{"size":6728,"mtime":1610767264268,"results":"29","hashOfConfig":"24"},{"size":514,"mtime":1610723776847,"results":"30","hashOfConfig":"24"},{"size":19674,"mtime":1610678041587,"results":"31","hashOfConfig":"24"},{"size":2965,"mtime":1610767264249,"results":"32","hashOfConfig":"24"},{"size":2815,"mtime":1610762475081,"results":"33","hashOfConfig":"24"},{"size":5534,"mtime":1610768884315,"results":"34","hashOfConfig":"24"},{"size":9058,"mtime":1610769091599,"results":"35","hashOfConfig":"24"},{"size":277,"mtime":1610678041575,"results":"36","hashOfConfig":"24"},{"size":6899,"mtime":1610767264295,"results":"37","hashOfConfig":"24"},{"size":8174,"mtime":1610767264252,"results":"38","hashOfConfig":"24"},{"size":687,"mtime":1610678041590,"results":"39","hashOfConfig":"24"},{"size":7922,"mtime":1610767264245,"results":"40","hashOfConfig":"24"},{"size":23,"mtime":1610678041595,"results":"41","hashOfConfig":"24"},{"size":6845,"mtime":1610762475088,"results":"42","hashOfConfig":"24"},{"size":190,"mtime":1610678041602,"results":"43","hashOfConfig":"24"},{"size":11485,"mtime":1610762475090,"results":"44","hashOfConfig":"24"},{"size":6583,"mtime":1610767264254,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1sjr72t",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"48"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"48"},"C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\index.tsx",[],["103","104"],"C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\reportWebVitals.ts",[],"C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\App.tsx",["105","106"],"import React, {useState} from 'react';\r\nimport './assets/primary.scss';\r\nimport { BrowserRouter as Router, Link, Route, Switch, Redirect } from 'react-router-dom';\r\nimport { Register } from './components/Register';\r\nimport { Login } from './components/Login';\r\nimport { Admin } from './components/Admin';\r\nimport { Doctor } from './components/Doctor';\r\nimport { PatientHome } from './components/PatientHome';\r\nimport { RequestList } from './components/RequestList';\r\nimport { DocRequestList } from './components/DocRequestList';\r\nimport { PastRequestList } from './components/PastRequestList';\r\nimport {ForumList} from './components/ForumList'\r\nimport { Request } from './components/Request';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Router >\r\n        <Switch>\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route path=\"/register\" component={Register} />\r\n          <Route path=\"/admin\" component={Admin} />\r\n          <Route path=\"/doctor\" component={Doctor} />\r\n          <Route path=\"/patient\" component={PatientHome} />\r\n          <Route path=\"/requestList\" component={RequestList} />\r\n          <Route path=\"/docRequestList\" component={DocRequestList} />\r\n          <Route path=\"/pastRequestList\" component={PastRequestList} />\r\n          <Route path=\"/forumList\" component={ForumList} />\r\n          <Route path=\"/request\" component={Request}/>\r\n          <Redirect from=\"/\" to=\"/login\" /> \r\n          \r\n        </Switch>\r\n        {/* <Link to=\"/login\"> login</Link> */}\r\n        {/* <Link to=\"/patient\">Patient</Link> */}\r\n      </Router> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n      ","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Admin.tsx",["107"],"import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\nimport { IconButton, Tooltip, Paper, RadioGroup, FormControlLabel, Radio } from '@material-ui/core';\r\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport { getDoctorsList } from '../remote/remote-functions';\r\nimport { DoctorsList } from './common/DoctorsList';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            padding: '2px',\r\n            margin: 'auto',\r\n            width: '80%',\r\n            position: 'relative',\r\n            display: 'flex',\r\n            justifyContent: 'space-evenly',\r\n            backgroundColor: '#EDF2FB',\r\n            fontWeight: 'bolder',\r\n            color: '#012A4A'\r\n        },\r\n        logoutButton: {\r\n            '&:hover': {\r\n                color: '#014F86',\r\n            },\r\n            color: \"#012A4A\",\r\n            backgroundColor: \"#EDF2FB\",\r\n            position: 'absolute',\r\n            top: '1.2rem',\r\n            right: '2rem',\r\n        },\r\n    })\r\n);\r\n\r\nexport const Admin: React.FunctionComponent = () => {\r\n    const history = useHistory();\r\n    const location: any = useLocation();\r\n    const classes = useStyles();\r\n    const [doctorsList, setDoctorsList] = useState([]);\r\n    const [filter, setFilter] = useState(\"Pending\");\r\n    const [update, setUpdate] = useState(false);\r\n\r\n    async function getDocList() {\r\n        let docList = await getDoctorsList();\r\n        let sortedDocList = docList.sort(function (a, b) { return b.doctorID - a.doctorID; });\r\n        setDoctorsList(sortedDocList);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDocList()\r\n        setUpdate(false)\r\n    }, [update])\r\n\r\n    const MyRadio = withStyles({\r\n        root: {\r\n            color: \"#012A4A\",\r\n            '&$checked': {\r\n                color: \"#014F86\",\r\n            },\r\n        },\r\n        checked: {},\r\n    })((props) => <Radio color=\"default\" {...props} />);\r\n\r\n    const handleRadioChange = (event: any) => {\r\n        setFilter(event.target.value);\r\n    };\r\n\r\n    const handleChange = () => {\r\n        setUpdate(true);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2 id=\"adminTitle\">ADMIN PORTAL</h2>\r\n            <Tooltip title=\"Log out\">\r\n                <IconButton\r\n                    className='float-left'\r\n                    onClick={() => history.push('/')}\r\n                    classes={{\r\n                        root: classes.logoutButton,\r\n                    }}>\r\n                    <ExitToAppIcon style={{ fontSize: 35 }} />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Paper elevation={3} classes={{ root: classes.root }}>\r\n                <h2>Doctor Accounts</h2>\r\n                <RadioGroup row name=\"role\" onChange={handleRadioChange} style={{ color: \"#012A4A\", display: 'flex', justifyContent: 'space-around', width: '50%' }}>\r\n                    <FormControlLabel\r\n                        value=\"Pending\"\r\n                        control={<MyRadio />}\r\n                        label=\"Pending\"\r\n                        labelPlacement=\"start\"\r\n                        style={{ color: \"#012A4A\" }}\r\n                    />\r\n                    <FormControlLabel\r\n                        value=\"Approved\"\r\n                        control={<MyRadio />}\r\n                        label=\"Approved\"\r\n                        labelPlacement=\"start\"\r\n                        style={{ color: \"#012A4A\" }}\r\n                    />\r\n                    <FormControlLabel\r\n                        value=\"Rejected\"\r\n                        control={<MyRadio />}\r\n                        label=\"Rejected\"\r\n                        labelPlacement=\"start\"\r\n                        style={{ color: \"#012A4A\" }}\r\n                    />\r\n                </RadioGroup>\r\n            </Paper>\r\n            <Paper elevation={6} id=\"listPanel\">\r\n                <DoctorsList doctorsList={doctorsList} filter={filter} handleChange={handleChange} />\r\n            </Paper>\r\n           \r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Admin;","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Login.tsx",["108"],"import React, { useState } from \"react\";\r\nimport { TextField, Tabs, Tab, Button, IconButton, Card, InputAdornment, RadioGroup, Radio, FormControlLabel } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\r\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { styles } from '../assets/styles.js';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport Background from '../assets/img/medicalBackground.jpg';\r\nimport { userLogin } from '../remote/remote-functions';\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            boxShadow: '1px 3px 12px -3px rgba(0,0,0, 1)',\r\n            borderRadius: '1.5rem'\r\n        },\r\n        cssOutlinedInput: {\r\n            '&$focused $notchedOutline': {\r\n                borderColor: \"#014F86\",\r\n            },\r\n            height: 50,\r\n            marginTop: 0,\r\n            paddingTop: 0\r\n        },\r\n\r\n        notchedOutline: {\r\n            borderWidth: '1px',\r\n            borderColor: \"#014F86\"\r\n        },\r\n        focused: {\r\n            borderColor: \"#014F86\"\r\n        },\r\n\r\n        iconfocused: {\r\n            '&:focus': {\r\n                outline: 'none',\r\n            },\r\n        },\r\n\r\n        rootButton: {\r\n            '&:hover': {\r\n                backgroundColor: \"#014F86\",\r\n            },\r\n            background: \"#012A4A\",\r\n            borderRadius: 3,\r\n            border: 0,\r\n            color: 'white',\r\n            fontWeight: 'bold',\r\n            height: 40,\r\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n            marginTop: 15\r\n        },\r\n        indicator: {\r\n            backgroundColor: '#012A4A',\r\n            color: '#012A4A'\r\n        },\r\n    }),\r\n);\r\n\r\nfunction TabPanel(props: any) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-prevent-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-prevent-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && children}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\n\r\nexport const Login: React.FunctionComponent = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const classes = useStyles();\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n    const [hidden, setHidden] = useState(true);\r\n    const [errorUser, setErrorUser] = useState(false);\r\n    const [errorTextUser, setErrorTextUser] = useState(\"\");\r\n    const [errorPassword, setErrorPassword] = useState(false);\r\n    const [errorTextPassword, setErrorTextPassword] = useState(\"\");\r\n    const [errorAuth, setErrorAuth] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [role, setRole] = useState('');\r\n    const [tabValue, setTabValue] = useState(0);\r\n    const [match, setMatch] = useState(false);\r\n\r\n\r\n\r\n    const onChangeUsername = (event: any) => {\r\n        setErrorUser(false);\r\n        setErrorTextUser('');\r\n        setUsername(event.target.value);\r\n    }\r\n\r\n    const passwordOnChange = (event: any) => {\r\n        setErrorPassword(false);\r\n        setErrorTextPassword('');\r\n        setPassword(event.target.value);\r\n    }\r\n    const confirmPasswordOnChange = (event: any) => {\r\n        setConfirmPassword(event.target.value);\r\n    }\r\n\r\n    const handleTabChange = (event: any, newValue: any) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index: any) => {\r\n        setTabValue(index);\r\n    };\r\n\r\n    const toggleShow = () => {\r\n        setHidden(!hidden);\r\n    }\r\n\r\n    const onLogin = async () => {\r\n\r\n        if (username && password) {\r\n            try {\r\n                let user = await userLogin(role, username, password);\r\n                console.log(JSON.stringify(user))\r\n                if(user){\r\n                authentication(user);\r\n                }else{\r\n                    setErrorAuth(true)\r\n                    setError('User Not Found');\r\n                }\r\n            } catch (e) {\r\n                setErrorAuth(true)\r\n                setError('User Not Found');\r\n                console.log(e);\r\n            }\r\n        } else {\r\n            if (!password) {\r\n                setErrorPassword(true);\r\n                setErrorTextPassword('Please enter password')\r\n            }\r\n            if (!username) {\r\n                setErrorUser(true);\r\n                setErrorTextUser('Please enter user')\r\n            }\r\n        }\r\n    }\r\n\r\n    const authentication = (user: any) => {\r\n        if(user.role === \"Admin\"){\r\n            history.push({\r\n                pathname: '/admin',\r\n                state: {  //to access state use useLocation hook in function component\r\n                    adminInfo: user\r\n                },\r\n            });\r\n        }else if(user.role === \"Doctor\"){\r\n            if(user.status === 'Approved'){\r\n                history.push({\r\n                    pathname: '/doctor',\r\n                    state: {  //to access state use useLocation hook in function component\r\n                        doctorInfo: user\r\n                    },\r\n                });\r\n            }else if(user.status === 'Pending'){\r\n                setErrorAuth(true)\r\n                setError('Account is in Pending Status')\r\n            }else if(user.status === 'Rejected'){\r\n                setErrorAuth(true)\r\n                setError('Account is Rejected')\r\n            }  \r\n        }else if(user.role === \"Patient\"){\r\n            history.push({\r\n                pathname: '/patient',\r\n                state: {  //to access state use useLocation hook in function component\r\n                    patientInfo: user\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    const onRegister = () => {\r\n        if (username && password && role) {\r\n            if (password !== confirmPassword) {\r\n                setMatch(true)\r\n            } else {\r\n                history.push({\r\n                    pathname: '/register',\r\n                    state: {  //to access state use useLocation hook in function component\r\n                        role: role,\r\n                        username: username,\r\n                        password: password \r\n                    },\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const MyRadio = withStyles({\r\n        root: {\r\n            color: \"#012A4A\",\r\n            '&$checked': {\r\n                color: \"#014F86\",\r\n            },\r\n        },\r\n        checked: {},\r\n    })((props) => <Radio color=\"default\" {...props} />);\r\n\r\n    const handleRadioChange = (event: any) => {\r\n        setRole(event.target.value);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ backgroundImage: `url(${Background})`, backgroundSize: 'cover', minHeight: '100vh', height: 'auto' }}>\r\n            <h1 id=\"title\">Revature Medical Clinic</h1>\r\n            <Card className=\"cardContainer\" classes={{ root: classes.root }}>\r\n                <Tabs\r\n                    value={tabValue}\r\n                    onChange={handleTabChange}\r\n                    variant=\"fullWidth\"\r\n                    classes={{\r\n                        indicator: classes.indicator,\r\n                    }}\r\n                    className=\"loginTab\"\r\n                >\r\n                    <Tab label=\"LOGIN\" style={{ color: \"white\", backgroundColor: \"#014F86\", width: \"30%\" }} />\r\n                    <Tab label=\"REGISTER\" style={{ color: \"white\", backgroundColor: \"#014F86\" }} />\r\n                </Tabs>\r\n                {/*  ----------------------------LOGIN------------------------ */}\r\n                <TabPanel value={tabValue} index={0}>\r\n                    <form className=\"form\" noValidate>\r\n                        <div className=\"cardRadio\">\r\n                            <RadioGroup row name=\"role\" onChange={handleRadioChange} style={{ color: \"#012A4A\" }}>\r\n                                <FormControlLabel\r\n                                    value=\"Patient\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Patient\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Doctor\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Doctor\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Admin\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Admin\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                            </RadioGroup>\r\n                        </div>\r\n                        <TextField\r\n                            error={errorUser}\r\n                            helperText={errorTextUser}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            placeholder=\"Username\"\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={onChangeUsername}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <AccountCircle />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            error={errorPassword}\r\n                            helperText={errorTextPassword}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            placeholder=\"Password\"\r\n                            type={hidden ? \"password\" : \"text\"}\r\n                            value={password}\r\n                            onChange={passwordOnChange}\r\n                            style={{ marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <VpnKeyIcon />\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={toggleShow}\r\n                                            style={{ color: \"#014F86\" }}\r\n                                        >\r\n                                            {hidden ? <Visibility /> : <VisibilityOff />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <Button\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            className=\"submit\"\r\n                            onClick={() => onLogin()}\r\n                            classes={{\r\n                                root: classes.rootButton,\r\n                            }}\r\n                        > LOG IN </Button>\r\n\r\n                        {(errorAuth) ? <p style={styles.errorTextStyle}>{error}</p> : null}\r\n\r\n                    </form>\r\n                </TabPanel>\r\n                {/*  ----------------------------Register------------------------ */}\r\n\r\n                <TabPanel value={tabValue} index={1}>\r\n                    <form className=\"form\" noValidate>\r\n                        <div className=\"cardRadio\">\r\n                            <RadioGroup row name=\"role\" onChange={handleRadioChange} style={{ color: \"#012A4A\" }}>\r\n                                <FormControlLabel\r\n                                    value=\"Patient\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Patient\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Doctor\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Doctor\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                            </RadioGroup>\r\n                        </div>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            placeholder=\"New Username\"\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={onChangeUsername}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <AccountCircle />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            placeholder=\"New Password\"\r\n                            type=\"password\"\r\n                            value={password}\r\n                            onChange={passwordOnChange}\r\n                            style={{ marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <VpnKeyIcon />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"confirm password\"\r\n                            placeholder=\"Confirm Password\"\r\n                            type=\"password\"\r\n                            value={confirmPassword}\r\n                            onChange={confirmPasswordOnChange}\r\n                            style={{ marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <VpnKeyIcon />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <Button\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            className=\"submit\"\r\n                            onClick={() => onRegister()}\r\n                            classes={{\r\n                                root: classes.rootButton,\r\n                            }}\r\n                        > REGISTER </Button>\r\n\r\n                        {(match) ? <p style={styles.errorTextStyle}>Password doesn't match</p> : null}\r\n\r\n                    </form>\r\n\r\n                </TabPanel>\r\n\r\n\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\RequestList.tsx",["109","110"],"import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport PatientNavBar from './PatientNavBar'\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { Grid } from '@material-ui/core';\r\nimport { getRequestList } from '../remote/remote-functions';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\ninterface IPatient{\r\n    healthCardNumber:number,\r\n    firstname:string,\r\n\r\n}\r\n\r\ninterface IDoctor{\r\n    firstname:string\r\n    lastname:string\r\n    email:string\r\n    phone:string\r\n}\r\ninterface IReqList{\r\n    patientId:IPatient,\r\n    doctorId:IDoctor,\r\n    problem:string,\r\n    responsed:boolean,\r\n    timeStamp:string,\r\n    requestId:number\r\n    prescription:string\r\n}\r\n\r\n\r\n\r\nexport const RequestList:React.FunctionComponent<any> = () => {\r\n\r\n    const [data, setRequestList] = useState<IReqList[]>([])\r\n    const location: any = useLocation()\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            marginLeft: '5%',\r\n            marginRight: '5%',\r\n        },\r\n        heading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            flexBasis: '33.33%',\r\n            flexShrink: 0,\r\n        },\r\n        secondaryHeading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            color: theme.palette.text.secondary,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n    }),\r\n    )\r\n\r\n    function getDoctorInfo(dinfo:IDoctor){\r\n\r\n        return(\r\n            <>\r\n            <h4>Doctor's Response:</h4>\r\n            \r\n            Doctor's name: {dinfo.firstname} {dinfo.lastname}<br/>\r\n            Doctor's contact information: {dinfo.email}, phone: {dinfo.phone}\r\n             \r\n            </>\r\n        )\r\n    }\r\n\r\n    async function getContent(){\r\n        console.log(location.state.patientInfo.patientId)\r\n        let getReqList = await getRequestList(location.state.patientInfo.patientId)\r\n        setRequestList(getReqList)\r\n    } \r\n\r\n    useEffect(() => {\r\n        getContent()\r\n    }, [])\r\n\r\n    \r\n        const classes = useStyles();\r\n        const [expanded, setExpanded] = React.useState<string | false>(false);\r\n      \r\n        const handleChange = (panel: string) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\r\n          setExpanded(isExpanded ? panel : false);\r\n        }\r\n      \r\n\r\n        return(\r\n            \r\n            <PatientNavBar>\r\n \r\n                <div className={classes.root}>\r\n                \r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={3}>\r\n                    \r\n                    </Grid>\r\n                    <Grid item xs={3}>{data[0] ? data[0].patientId.firstname : \"\"}</Grid>\r\n                    <Grid item xs={3}>HCN:</Grid>\r\n                    <Grid item xs={3}></Grid>\r\n                    {data.map(text => \r\n                        <Grid item xs={12}>\r\n                            <Accordion expanded={expanded === `${text.requestId}`} onChange={handleChange(`${text.requestId}`)}>\r\n                                <AccordionSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"panel1bh-content\"\r\n                                    id=\"panel1bh-header\"\r\n                                    >\r\n                                    <Typography className={classes.heading}>Reference number: {text.requestId}</Typography>\r\n                                    <Typography className={classes.secondaryHeading}>Status: {text.responsed ? \"Resolved\" : \"Pending\"}</Typography>\r\n                                </AccordionSummary>\r\n                            <AccordionDetails>\r\n                                <Typography>\r\n                                    <h4>Request Information:</h4>\r\n                                    Problem/Symptoms: {text.problem}<br/>\r\n                                    {text.doctorId ? getDoctorInfo(text.doctorId) : \"no doctor\"}\r\n                                </Typography>\r\n                            </AccordionDetails>\r\n                            </Accordion>\r\n                        </Grid>\r\n                    )}\r\n                                \r\n                  </Grid>    \r\n                </div>\r\n                \r\n            </PatientNavBar> \r\n        )\r\n    \r\n}\r\n","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\ForumList.tsx",[],"C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Register.tsx",["111"],"import React, { useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { IconButton, Tooltip, Paper, Grid, InputLabel, TextField, RadioGroup, FormControlLabel, Radio, Button, Select, MenuItem } from '@material-ui/core';\r\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { doctorRegister, patientRegister } from '../remote/remote-functions';\r\nimport { styles } from '../assets/styles.js';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '&$underline': {\r\n                borderBottom: '0',\r\n            },\r\n        },\r\n        underline: {\r\n            '&:after': {\r\n                borderBottom: '2px solid #012A4A',\r\n            },\r\n        },\r\n        backButton: {\r\n            '&:hover': {\r\n                color: '#014F86',\r\n            },\r\n            color: \"#012A4A\",\r\n            backgroundColor: \"#EDF2FB\",\r\n            position: 'absolute',\r\n            top: 5,\r\n            left: 5,\r\n        },\r\n        paper: {\r\n            padding: '2rem',\r\n            margin: 'auto',\r\n            width: '84%',\r\n            position: 'relative',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between',\r\n            backgroundColor: \"#EDF2FB\",\r\n        },\r\n        rootButton: {\r\n            '&:hover': {\r\n                backgroundColor: \"#014F86\",\r\n            },\r\n            background: \"#012A4A\",\r\n            borderRadius: \"2rem\",\r\n            border: 0,\r\n            color: 'white',\r\n            fontWeight: 'bold',\r\n            height: 40,\r\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n            width: '20%',\r\n            float: 'right'\r\n        },\r\n    })\r\n);\r\n\r\nexport const Register: React.FunctionComponent = (props) => {\r\n    const location: any = useLocation();\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n    const [age, setAge] = useState(0);\r\n    const [gender, setGender] = useState(\"\");\r\n    const [phone, setPhone] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [address, setAddress] = useState(\"\");\r\n    const [language, setLanguage] = useState(\"\");\r\n    const [healthcardnumber, setHealthcardnumber] = useState(\"\");\r\n    const [education, setEducation] = useState(\"\");\r\n    const [certification, setCertification] = useState(\"\");\r\n    const [speciality, setSpeciality] = useState(\"\");\r\n    const [awards, setAwards] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n\r\n\r\n    const onRegisterSubmit = async () => {\r\n        const patientCredentials = {\r\n            username: location.state.username,\r\n            password: location.state.password,\r\n            firstname: firstname,\r\n            lastname: lastname,\r\n            age: age,\r\n            gender: gender,\r\n            phone: phone,\r\n            email: email,\r\n            address: address,\r\n            language: language,\r\n            healthcardnumber: healthcardnumber,\r\n            role: 'Patient'\r\n        }\r\n\r\n        const doctorCredentials = {\r\n            username: location.state.username,\r\n            password: location.state.password,\r\n            firstname: firstname,\r\n            lastname: lastname,\r\n            age: age,\r\n            gender: gender,\r\n            phone: phone,\r\n            email: email,\r\n            address: address,\r\n            language: language,\r\n            education: education,\r\n            certification: certification,\r\n            speciality: speciality,\r\n            awards: awards,\r\n            status: 'Pending',\r\n            role: 'Doctor'\r\n        }\r\n\r\n        if (location.state.role === 'Doctor') {\r\n            if (firstname && lastname && age && gender && speciality) {\r\n                try {\r\n                    let user = await doctorRegister(doctorCredentials)\r\n                    history.push('/');\r\n                } catch (e) {\r\n                    console.log(e);\r\n                }\r\n            } else {\r\n                setError(\"Please fill out all required fields\");\r\n            }\r\n        } else if (location.state.role === 'Patient') {\r\n            if (firstname && lastname && age && gender && healthcardnumber) {\r\n                try {\r\n                    let user = await patientRegister(patientCredentials)\r\n                    console.log(\"Doctor registered -> \" + JSON.stringify(user));\r\n                    history.push({\r\n                        pathname: '/patient',\r\n                        state: {\r\n                            patientInfo: user\r\n                        },\r\n                    });\r\n                } catch (e) {\r\n                    console.log(e);\r\n                }\r\n            } else {\r\n                setError(\"Please fill out all required fields\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const MyRadio = withStyles({\r\n        root: {\r\n            color: \"#012A4A\",\r\n            '&$checked': {\r\n                color: \"#014F86\",\r\n            },\r\n        },\r\n        checked: {},\r\n    })((props) => <Radio color=\"default\" {...props} />);\r\n\r\n    return (\r\n        <div>\r\n            <Tooltip title=\"Go Back\">\r\n                <IconButton\r\n                    className='float-left'\r\n                    onClick={() => history.push('/')}\r\n                    classes={{\r\n                        root: classes.backButton,\r\n                    }}>\r\n                    <ArrowBackIcon style={{ fontSize: 40 }} />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <h2 id=\"registerationTitle\">Fill out the registeration details</h2>\r\n            <Paper elevation={3} classes={{ root: classes.paper }}>\r\n                <Grid container spacing={3} >\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> First Name </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            required\r\n                            value={firstname}\r\n                            onChange={e => setFirstname(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Last Name </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            required\r\n                            value={lastname}\r\n                            onChange={e => setLastname(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Age </InputLabel>\r\n                        <TextField\r\n                            type=\"number\"\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={age}\r\n                            onChange={e => setAge(parseInt(e.target.value))}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Gender </InputLabel>\r\n                        <RadioGroup row name=\"gender\" value={gender} onChange={(e: any) => setGender(e.target.value)}>\r\n                            <FormControlLabel value=\"female\" control={<MyRadio />} label=\"Female\" style={{ color: \"#012A4A\" }} />\r\n                            <FormControlLabel value=\"male\" control={<MyRadio />} label=\"Male\" style={{ color: \"#012A4A\" }} />\r\n                            <FormControlLabel value=\"other\" control={<MyRadio />} label=\"Other\" style={{ color: \"#012A4A\" }} />\r\n                        </RadioGroup>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Phone Number</InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={phone}\r\n                            onChange={e => setPhone(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Email Address</InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={email}\r\n                            onChange={e => setEmail(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Residential Address </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={address}\r\n                            onChange={e => setAddress(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Language Spoken </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={language}\r\n                            onChange={e => setLanguage(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    {\r\n                        (location.state.role === 'Patient') ?\r\n                            <Grid item xs={12}>\r\n                                <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Health Card Number </InputLabel>\r\n                                <TextField\r\n                                    variant=\"filled\"\r\n                                    fullWidth\r\n                                    value={healthcardnumber}\r\n                                    onChange={e => setHealthcardnumber(e.target.value)}\r\n                                    style={{ marginBottom: 5, marginTop: 5 }}\r\n                                    InputProps={{\r\n                                        classes: {\r\n                                            root: classes.root,\r\n                                            underline: classes.underline,\r\n                                        },\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                    {\r\n                        (location.state.role === 'Doctor') ?\r\n                            <>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Speciality </InputLabel>\r\n                                    <Select\r\n                                        variant=\"filled\"\r\n                                        value={speciality}\r\n                                        fullWidth\r\n                                        onChange={e => setSpeciality(String(e.target.value))}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                    >\r\n                                        <MenuItem value={'Allergy and immunology'}>Allergy and immunology</MenuItem>\r\n                                        <MenuItem value={'Anesthesiologist'}>Anesthesiologist</MenuItem>\r\n                                        <MenuItem value={'Cardiologist'}>Cardiologist</MenuItem>\r\n                                        <MenuItem value={'Dermatology'}>Dermatology</MenuItem>\r\n                                        <MenuItem value={'Emergency medicine'}>Emergency medicine</MenuItem>\r\n                                        <MenuItem value={'Family medicine'}>Family medicine</MenuItem>\r\n                                        <MenuItem value={'Medical genetics'}>Medical genetics</MenuItem>\r\n                                        <MenuItem value={'Neurology'}>Neurology</MenuItem>\r\n                                        <MenuItem value={'Ophthalmology'}>Ophthalmology</MenuItem>\r\n                                        <MenuItem value={'Pathology'}>Pathology</MenuItem>\r\n                                        <MenuItem value={'Physical medicine and rehabilitation'}>Physical medicine and rehabilitation</MenuItem>\r\n                                        <MenuItem value={'Psychiatry'}>Psychiatry</MenuItem>\r\n                                        <MenuItem value={'Radiation oncology'}>Radiation oncology</MenuItem>\r\n                                        <MenuItem value={'Surgery'}>Surgery</MenuItem>\r\n                                        <MenuItem value={'Urology'}>Urology</MenuItem>\r\n                                    </Select>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}> Certifications </InputLabel>\r\n                                    <TextField\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                        value={certification}\r\n                                        onChange={e => setCertification(e.target.value)}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                        InputProps={{\r\n                                            classes: {\r\n                                                root: classes.root,\r\n                                                underline: classes.underline,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}> Education Details </InputLabel>\r\n                                    <TextField\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                        multiline\r\n                                        rows={5}\r\n                                        value={education}\r\n                                        onChange={e => setEducation(e.target.value)}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                        InputProps={{\r\n                                            classes: {\r\n                                                root: classes.root,\r\n                                                underline: classes.underline,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}> Awards </InputLabel>\r\n                                    <TextField\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                        multiline\r\n                                        rows={5}\r\n                                        value={awards}\r\n                                        onChange={e => setAwards(e.target.value)}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                        InputProps={{\r\n                                            classes: {\r\n                                                root: classes.root,\r\n                                                underline: classes.underline,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            type=\"button\"\r\n                            variant=\"contained\"\r\n                            className=\"submit\"\r\n                            onClick={() => onRegisterSubmit()}\r\n                            classes={{\r\n                                root: classes.rootButton,\r\n                            }}\r\n                        > REGISTER </Button>\r\n                        {(error) ? <p style={styles.errorTextStyle}>{error}</p> : null}\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientHome.tsx",["112","113"],"import React from 'react';\r\nimport '../assets/patient.scss'\r\nimport { PatientNavBar } from './PatientNavBar';\r\nimport { RequestList } from './RequestList';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n\r\n\r\nexport const PatientHome: React.FunctionComponent<any> = () => {\r\n    const location: any = useLocation();\r\n    const {patientInfo} = location.state;\r\n    return(\r\n        <>\r\n                <PatientNavBar patientInfo={location.state.patientInfo}>\r\n                    <div>{location.state.patientInfo.patientId}</div>\r\n                </PatientNavBar>\r\n\r\n          </>  \r\n        \r\n    )\r\n}\r\n\r\nexport default PatientHome;","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Doctor.tsx",["114","115","116"],"import React from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { Paper, Divider, IconButton } from '@material-ui/core';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport DoctorNavBar from './DoctorNavBar';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        paper: {\r\n            padding: '2rem',\r\n            position: 'relative',\r\n            width: '50%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            backgroundColor: \"white\",\r\n            color: '#014F86',\r\n            marginBottom: '5rem'\r\n        },\r\n        editButton: {\r\n            '&:hover': {\r\n                color: '#014F86',\r\n            },\r\n            color: \"#012A4A\",\r\n            backgroundColor: \"#EDF2FB\",\r\n        },\r\n    })\r\n);\r\n\r\nexport const Doctor: React.FunctionComponent = (props) => {\r\n    const location: any = useLocation();\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const { firstname, lastname, speciality, age, gender, phone, email, address, education, certification, awards } = location.state.doctorInfo;\r\n\r\n    return (\r\n        <DoctorNavBar>\r\n            <div style={{ minHeight: '100vh', height: 'auto', backgroundColor: '#EDF2FB', display: 'flex', alignItems: 'center', flexDirection: \"column\" }}>\r\n                <div className=\"doctorHome\">\r\n                    <h2>WELCOME</h2>\r\n                    <h1 style={{ textAlign: 'center' }}>Dr. {firstname} {lastname} <br />Speciality: {speciality}</h1>\r\n                </div>\r\n                <Paper elevation={3} classes={{ root: classes.paper }}>\r\n                    <div style={{display:'flex', justifyContent:'space-between'}}>\r\n                        <h2>Personal Information</h2>\r\n                        {/* <IconButton\r\n                            className='float-right'\r\n                            onClick={() => history.push('/')}\r\n                            classes={{\r\n                                root: classes.editButton,\r\n                            }}>\r\n                            <EditIcon style={{ fontSize: 30 }} />\r\n                        </IconButton> */}\r\n                    </div>\r\n                    <Divider />\r\n                    <h3>Age: {age}</h3>\r\n                    <h3>Gneder: {gender}</h3>\r\n                    <h3>Phone: {phone}</h3>\r\n                    <h3>Email: {email}</h3>\r\n                    <h3>Address<br />{address}</h3>\r\n                    <h3>Education<br />{education}</h3>\r\n                    <h3>Certifications<br />{certification}</h3>\r\n                    <h3>Awards<br />{awards}</h3>\r\n                </Paper>\r\n            </div>\r\n        </DoctorNavBar>\r\n    );\r\n\r\n}\r\n\r\nexport default Doctor;","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PastRequestList.tsx",["117","118"],"C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DocRequestList.tsx",["119","120"],"C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\assets\\styles.js",[],["121","122"],"C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\remote-functions.ts",[],"C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientNavBar.tsx",["123"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SpeakerNotesIcon from '@material-ui/icons/SpeakerNotes';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    appBar: {\r\n      transition: theme.transitions.create(['margin', 'width'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n      transition: theme.transitions.create(['margin', 'width'], {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n      display: 'none',\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n      justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n      transition: theme.transitions.create('margin', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n      transition: theme.transitions.create('margin', {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n      marginLeft: 0,\r\n    },\r\n    toolbar: {\r\n      backgroundColor: \"#014F86\"\r\n    }\r\n  }),\r\n);\r\n\r\n\r\n\r\n\r\nexport const PatientNavBar:React.FunctionComponent<any> = (props) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = useState(false);\r\n  const history = useHistory();\r\n  const location: any = useLocation();\r\n\r\n  const navbarData = [\r\n    {\r\n      name: 'Home',\r\n      path: '/patient',\r\n    },\r\n    {\r\n      name: 'Past requests',\r\n      path: '/requestList',\r\n    },\r\n    {\r\n      name: 'Create request',\r\n      path: '/',\r\n    },\r\n    {\r\n      name: 'Forum',\r\n      path: '/forumList',\r\n    },\r\n    {\r\n      name: 'Logout',\r\n      path: '/',\r\n    }\r\n  ]\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n \r\n  const homeClicked = () => {\r\n    history.push({\r\n      pathname: navbarData[0].path,\r\n      state: {  //to access state use useLocation hook in function component\r\n        patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \r\n    }\r\n  })\r\n  }\r\n\r\n  const requestListClicked = () => {\r\n      history.push({\r\n        pathname: navbarData[1].path,\r\n        state: {  //to access state use useLocation hook in function component\r\n            patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \r\n        }\r\n    })\r\n  }\r\n\r\n  const createRequestClicked = () => {\r\n    history.push({\r\n      pathname: navbarData[2].path,\r\n      state: {  //to access state use useLocation hook in function component\r\n          patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \r\n      }\r\n  })\r\n  }\r\n\r\n  const forumClicked = () => {\r\n    history.push({\r\n      pathname: navbarData[3].path,\r\n      state: {  //to access state use useLocation hook in function component\r\n          patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \r\n      }\r\n  })\r\n  }\r\n\r\n  const logoutClicked = () => {\r\n    history.push(navbarData[4].path)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h5\" noWrap>\r\n            Revature Medical Clinic\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n\r\n          <List>\r\n\r\n                <ListItem onClick={homeClicked}  button key={navbarData[0].name}>\r\n                <ListItemIcon><HomeIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[0].name} />\r\n                </ListItem>\r\n          \r\n                <ListItem onClick={requestListClicked}  button key={navbarData[1].name}>\r\n                <ListItemIcon><DescriptionIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[1].name} />\r\n                </ListItem>\r\n           \r\n                <ListItem onClick={createRequestClicked}  button key={navbarData[2].name}>\r\n                <ListItemIcon><NoteAddIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[2].name} />\r\n                </ListItem>\r\n              \r\n                <ListItem onClick={forumClicked}  button key={navbarData[3].name}>\r\n                <ListItemIcon><SpeakerNotesIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[3].name} />\r\n                </ListItem>\r\n\r\n                <ListItem onClick={logoutClicked} button key={navbarData[4].name}>\r\n                <ListItemIcon><ExitToAppIcon/></ListItemIcon>\r\n                <ListItemText primary={navbarData[4].name} />\r\n                </ListItem>\r\n              \r\n          </List>\r\n        \r\n        <Divider />\r\n      </Drawer>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <div className={classes.drawerHeader} />\r\n        <Typography paragraph>\r\n          {props.children}\r\n        </Typography>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientNavBar","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\common\\DoctorsList.tsx",[],"C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DoctorNavBar.tsx",[],"C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\index.ts",[],"C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\common\\DoctorInfoItem.tsx",["124","125"],"import React, { useState } from 'react';\r\nimport { Paper, Grid, Chip, Avatar, Tooltip, IconButton, LinearProgress, Fade, Backdrop, Modal } from '@material-ui/core';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\r\nimport { updateStatus } from '../../remote/remote-functions';\r\nimport { createTrue } from 'typescript';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        paperItem: {\r\n            '&:hover': {\r\n                backgroundColor: '#0262a6',\r\n            },\r\n            marginTop: 10,\r\n            padding: 5,\r\n            fontSize: 22,\r\n            backgroundColor: '#014F86',\r\n            color: 'white',\r\n        },\r\n        ApproveButton: {\r\n            '&:hover': {\r\n                color: '#4BB543',\r\n            },\r\n            color: \"white\",\r\n        },\r\n        DenyButton: {\r\n            '&:hover': {\r\n                color: '#DC143C',\r\n            },\r\n            color: \"white\",\r\n        },\r\n        progressStyle: {\r\n            backgroundColor: '#EDF2FB'\r\n        },\r\n        progressBar: {\r\n            backgroundColor: '#012A4A'\r\n        },\r\n        modal: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            marginLeft: '15%',\r\n            marginRight: '15%'\r\n        },\r\n        modelPaper: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            backgroundColor: theme.palette.background.paper,\r\n            border: '2px solid #000',\r\n            boxShadow: theme.shadows[5],\r\n            color: '#012A4A'\r\n        },\r\n    })\r\n);\r\n\r\n\r\n\r\n\r\nexport const DoctorInfoItem: React.FunctionComponent<any> = (props: any) => {\r\n    const classes = useStyles();\r\n\r\n    const item = props.item;\r\n    const [updating, setUpdating] = useState(false)\r\n    const [model, setModel] = useState(false)\r\n\r\n\r\n    const statusColor = (status) => {\r\n        switch (status) {\r\n            case 'Approved':\r\n                return <Chip style={{ backgroundColor: '#4BB543', color: 'white', width: '5rem' }} label='Approved' />;\r\n            case 'Rejected':\r\n                return <Chip style={{ backgroundColor: '#DC143C', color: 'white', width: '5rem' }} label='Rejected' />;\r\n            case 'Pending':\r\n                return <Chip style={{ backgroundColor: '#e0e0e0', color: '#012A4A', width: '5rem' }} label='Pending' />;\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (doctorId, status, email) => {\r\n        try {\r\n            setUpdating(true)\r\n            let res = await updateStatus(doctorId, status, email)\r\n            props.handleChange();\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Paper elevation={1} classes={{ root: classes.paperItem }} onClick={() => setModel(true)}>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={3} style={{ marginTop: 8, marginLeft: 10 }}>\r\n                        {statusColor(item.status)}\r\n                    </Grid>\r\n                    <Grid item xs style={{ marginTop: 8 }}>\r\n                        <Chip avatar={<Avatar style={{ backgroundColor: '#014F86', color: 'white' }}>ID</Avatar>} label={item.doctorId} style={{ fontSize: 20 }} />\r\n                    </Grid>\r\n                    <Grid item xs={6} style={{ marginTop: 8 }}>\r\n                        {item.firstname} {item.lastname}\r\n                    </Grid>\r\n                    <Grid>\r\n                        <Tooltip title=\"Approved\">\r\n                            <span>\r\n                                <IconButton\r\n                                    onClick={() => onSubmit(item.doctorId, \"Approved\", item.email)}\r\n                                    disabled={item.status === 'Approved'}\r\n                                    classes={{\r\n                                        root: classes.ApproveButton,\r\n                                    }}>\r\n                                    <ThumbUpIcon style={{ fontSize: 35 }} />\r\n                                </IconButton>\r\n                            </span>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                    <Grid>\r\n                        <Tooltip title=\"Reject\">\r\n                            <IconButton\r\n                                onClick={() => onSubmit(item.doctorId, \"Rejected\", item.email)}\r\n                                disabled={item.status === 'Rejected'}\r\n                                classes={{\r\n                                    root: classes.DenyButton,\r\n                                }}>\r\n                                <ThumbDownIcon style={{ fontSize: 35 }} />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Paper>\r\n            {updating === true ?\r\n                <LinearProgress classes={{ indeterminate: classes.progressStyle, barColorPrimary: classes.progressBar }} />\r\n                : null}\r\n            <Modal\r\n                className={classes.modal}\r\n                open={model}\r\n                onClose={() => setModel(false)}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={model}>\r\n                    <Grid container className={classes.modelPaper}>\r\n                        <Grid item xs={4} style={{display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column', backgroundColor: '#EDF2FB'}}>\r\n                            <h2>Dr. {item.firstname} {item.lastname}</h2>\r\n                            <h4>{item.speciality}</h4>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <h3 style={{textDecoration: 'underline'}}>SUMMARY</h3>\r\n                            <h4>Age: {item.age}</h4>\r\n                            <h4>Gender: {item.gender}</h4>\r\n                            <h4>Languages Spoken: {item.language}</h4>\r\n                            <h4>Education: {item.education}</h4>\r\n                            <h4>Certifications: {item.certification}</h4>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <h3  style={{textDecoration: 'underline'}}>PRIMARY LOCATION OF PRACTICE</h3>\r\n                            <h4>Address: {item.address}</h4>\r\n                            <h4> Phone: {item.phone}</h4>\r\n                            <h4>Email Address: {item.email}</h4>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Fade>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\index.ts",[],"C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\Forum.tsx",["126"],"// import { spawn } from \"child_process\";\r\nimport React, { useState, useEffect } from \"react\";\r\n// import { forumList, messageList } from \"./mockups\";\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\n// import ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n// import ListItemText from \"@material-ui/core/ListItemText\";\r\n// import ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\n// import Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n// import { Message } from \"./Message\";\r\nimport { Button, Paper, Tooltip, IconButton } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport {\r\n  postTopic,\r\n  postMessage,\r\n  getTopic,\r\n  getMessage,\r\n} from \"../../remote/remote-functions\";\r\nimport moment from \"moment\";\r\nimport { useLocation } from \"react-router-dom\";\r\n// RCE CSS\r\nimport \"react-chat-elements/dist/main.css\";\r\n// MessageBox component\r\nimport { MessageBox, ChatItem } from \"react-chat-elements\";\r\nimport \"../../assets/primary.scss\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      margin: \"auto\",\r\n    },\r\n    inline: {\r\n      display: \"inline\",\r\n    },\r\n    bubble: {\r\n      width: \"-webkit-fill-available\",\r\n      backgroundColor: \"red\",\r\n    },\r\n    paper: {\r\n      padding: '2rem',\r\n      // width: '84%',\r\n      position: 'relative',\r\n      backgroundColor: \"#EDF2FB\",\r\n      margin: '2rem'\r\n    },\r\n    button: {\r\n      '&:hover': {\r\n        backgroundColor: \"#014F86\",\r\n      },\r\n      background: \"#012A4A\",\r\n      borderRadius: \"2rem\",\r\n      border: 0,\r\n      color: 'white',\r\n      fontWeight: 'bold',\r\n      height: 40,\r\n      boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n      width: '20%',\r\n      marginBottom: '1rem'\r\n    },\r\n    postButton: {\r\n      '&:hover': {\r\n        background: \"#4BB543\",\r\n      },\r\n      backgroundColor: '#014F86',\r\n      color: 'white',\r\n      fontWeight: 'bolder',\r\n      width: '10rem',\r\n      boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n      marginRight: '5px'\r\n    },\r\n    cancelButton: {\r\n      '&:hover': {\r\n        background: \"#DC143C\",\r\n      },\r\n      backgroundColor: '#014F86',\r\n      color: 'white',\r\n      fontWeight: 'bolder',\r\n      width: '10rem',\r\n      boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n    },\r\n    backButton: {\r\n      '&:hover': {\r\n        color: '#014F86',\r\n      },\r\n      color: \"white\",\r\n      backgroundColor: \"#014F86\",\r\n    },\r\n    submitButton: {\r\n      '&:hover': {\r\n        background: \"#4BB543\",\r\n      },\r\n      backgroundColor: '#014F86',\r\n      color: 'white',\r\n      fontWeight: 'bolder',\r\n      width: '8rem',\r\n      boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n      float: \"right\", \r\n      height: '2rem'\r\n    },\r\n  })\r\n);\r\n\r\nexport const Forum: React.FC = (props) => {\r\n  const [forums, setForums] = useState<any>([]);\r\n\r\n  const [message, setMessage] = useState<any>([]);\r\n\r\n  const [isShow, setIsShow] = useState<any>(false);\r\n\r\n  const [topic, setTopic] = useState<string>();\r\n\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const [inputShow, setInputShow] = useState<boolean>(false);\r\n\r\n  const [inputTopic, setInputTopic] = useState<string>();\r\n\r\n  const [inputMessage, setInputMessage] = useState<string>();\r\n\r\n  const [currentTopic, setCurrentTopic] = useState<number>();\r\n\r\n  const [user, setUser] = useState<any>();\r\n\r\n  const location: any = useLocation();\r\n\r\n  async function getMessagesByForumId(forumId: number, topic: string) {\r\n    setIsShow(true);\r\n\r\n    setTopic(topic);\r\n    setLoading(true);\r\n    setInputShow(false);\r\n    setCurrentTopic(forumId);\r\n\r\n    let response = await getMessage(forumId);\r\n    console.log(response);\r\n    setMessage(response);\r\n    setLoading(false);\r\n    return response;\r\n  }\r\n\r\n  const onPostTopic = async () => {\r\n    console.log(\"inputTopic:\" + inputTopic);\r\n\r\n    if (inputTopic?.trim() === \"\" || inputTopic === undefined) {\r\n      console.log(\"null input\");\r\n      alert(\"input should not be null!!\");\r\n      return;\r\n    }\r\n\r\n    const topicstring = {\r\n      topic: inputTopic,\r\n      username: user.username,\r\n      role: user.role,\r\n    };\r\n    const data = await postTopic(topicstring);\r\n    console.log(data);\r\n\r\n    setForums([...forums, data]);\r\n    setInputTopic(\"\");\r\n    setInputShow(false);\r\n  };\r\n\r\n  const handleTopicChange = (e) => {\r\n    setInputTopic(e.target.value);\r\n  };\r\n  const handleMessageChange = (e) => {\r\n    setInputMessage(e.target.value);\r\n  };\r\n\r\n  const onPostMessage = async () => {\r\n    console.log(\"inputmessage:\" + inputMessage);\r\n\r\n    if (inputMessage?.trim() === \"\" || inputMessage === undefined) {\r\n      console.log(\"null input\");\r\n      alert(\"input should not be null!!\");\r\n      return;\r\n    }\r\n    const currentInputMessage =\r\n      user.role === \"Patient\"\r\n        ? {\r\n          message: inputMessage,\r\n          fromusername: user.username,\r\n          forumId: {\r\n            forumId: currentTopic,\r\n          },\r\n          patientId: {\r\n            patientId: user.patientId,\r\n            username: user.username,\r\n          },\r\n        }\r\n        : {\r\n          message: inputMessage,\r\n          fromusername: user.username,\r\n          forumId: {\r\n            forumId: currentTopic,\r\n          },\r\n          doctorId: {\r\n            doctorId: user.doctorId,\r\n            username: user.username,\r\n          },\r\n        };\r\n    const data = await postMessage(currentInputMessage);\r\n    console.log(data);\r\n\r\n    setInputMessage(\"\");\r\n    setMessage([...message, data]);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  function getContent() {\r\n    location.state.patientInfo !== undefined\r\n      ? setUser(location.state.patientInfo)\r\n      : setUser(location.state.doctorInfo);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getContent();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchforum = async () => {\r\n      const responses = await getTopic();\r\n      // console.log(responses);\r\n      setForums(responses);\r\n    };\r\n    fetchforum();\r\n  }, []);\r\n\r\n  return (\r\n    <Paper elevation={3} classes={{ root: classes.paper }}>\r\n      {/* <div\r\n      style={{\r\n        margin: \"auto\",\r\n        width: \"960px\",\r\n        borderStyle: \"solid\",\r\n        borderColor: \"lightblue\",\r\n      }}\r\n    > */}\r\n      {isShow ? (\r\n        // <Button\r\n        //   variant=\"contained\"\r\n        //   color=\"primary\"\r\n        //   onClick={() => {\r\n        //     setIsShow(false);\r\n        //   }}\r\n        // >\r\n        //   Back\r\n        // </Button>\r\n        <Tooltip  title=\"Go Back\">\r\n          <IconButton\r\n            onClick={() => {setIsShow(false)}}\r\n            classes={{root: classes.backButton}}>\r\n              <ArrowBackIcon style={{ fontSize: 40 }} />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : null}\r\n      {isShow ? (\r\n        <div>\r\n          <h1 style={{ textAlign: \"center\" }}>{topic}</h1>\r\n          <Divider />\r\n        </div>\r\n      ) : null}\r\n      <Grid container>\r\n        {!isShow ? (\r\n          <Grid item xs={12}>\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={() => {\r\n                setInputShow(true);\r\n              }}\r\n              classes={{\r\n                root: classes.button,\r\n              }}\r\n            >\r\n              New Post\r\n            </Button>\r\n            {inputShow ? (\r\n              <div style={{ textAlign: \"center\", marginTop: \"30px\" }}>\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  label=\"Input your topic\"\r\n                  fullWidth\r\n                  value={inputTopic}\r\n                  onChange={handleTopicChange}\r\n                  multiline\r\n                  variant=\"outlined\"\r\n                />\r\n                <br />\r\n                <div style={{ margin: '1rem' }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    type=\"submit\"\r\n                    onClick={() => onPostTopic()}\r\n                    classes={{\r\n                      root: classes.postButton,\r\n                    }}\r\n                  >\r\n                    Post\r\n                </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => setInputShow(false)}\r\n                    classes={{\r\n                      root: classes.cancelButton,\r\n                    }}\r\n                  >\r\n                    Cancel\r\n                </Button>\r\n                </div>\r\n              </div>\r\n            ) : null}\r\n            <List className={classes.root}>\r\n              {forums.map((r, index) => (\r\n                <ChatItem\r\n                  avatar={\r\n                    r.role !== \"Patient\"\r\n                      ? \"https://www.cliparthut.com/images/150/FPesi.png\"\r\n                      : \"https://www.cliparthut.com/images/149/WDCFg.png\"\r\n                  }\r\n                  alt={r.username}\r\n                  title={r.topic}\r\n                  subtitle={\"by:\" + r.username}\r\n                  dateString={moment(r.timeStamp).format(\"YYYY-MM-DD HH:mm:ss\")}\r\n                  onClick={() => getMessagesByForumId(r.forumId, r.topic)}\r\n                />\r\n              ))}\r\n\r\n              <Divider variant=\"inset\" component=\"li\" />\r\n            </List>\r\n          </Grid>\r\n        ) : null}\r\n\r\n        {/* <Button onClick= {()=>getMessagesByForumId(3)}>click</Button> */}\r\n        {loading ? <Typography variant=\"h4\">Loading......</Typography> : null}\r\n        {isShow ? (\r\n          <Grid item xs={12}>\r\n            {!loading\r\n              ? message.map((m, index) => (\r\n                <MessageBox\r\n                  type={\"text\"}\r\n                  text={\"by:\" + m.fromusername}\r\n                  title={m.message}\r\n                  dateString={moment(m.timeStamp).format(\r\n                    \"YYYY-MM-DD HH:mm:ss\"\r\n                  )}\r\n                  position={\r\n                    user.username !== m.fromusername ? \"left\" : \"right\"\r\n                  }\r\n                />\r\n              ))\r\n              : null}\r\n            {!loading ? (\r\n              <div\r\n                style={{\r\n                  float: \"right\",\r\n                  marginTop: \"30px\",\r\n                  textAlign: \"center\",\r\n                  display: 'flex',\r\n                  alignItems: 'flex-end'\r\n                }}\r\n              >\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  label=\"Write your post\"\r\n                  name=\"message\"\r\n                  multiline\r\n                  rows={4}\r\n                  value={inputMessage}\r\n                  onChange={handleMessageChange}\r\n                  variant=\"outlined\"\r\n                  style={{marginRight: '1rem', width: '20rem', backgroundColor:'white'}}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={onPostMessage}\r\n                  classes={{root: classes.submitButton}}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            ) : null}\r\n          </Grid>\r\n        ) : null}\r\n      </Grid>\r\n      {/* </div> */}\r\n    </Paper>\r\n  );\r\n};\r\n","C:\\Project_2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Request.tsx",["127"],"import React, { useEffect, useState } from 'react';\r\nimport PatientNavBar from './PatientNavBar';\r\nimport { getDoctorList, postPatientRequest } from '../remote/remote-functions';\r\nimport { Accordion, AccordionDetails, AccordionSummary, Button, createStyles, Grid, makeStyles, Paper, TextField, Theme, Typography } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { useHistory, useLocation } from 'react-router';\r\n\r\nexport const Request: React.FunctionComponent<any> = () => {\r\n\r\n    const [docList, setDocList]  = useState<any>([])\r\n    const [problem, setProblem] = useState<any>()\r\n    const [error, setError] = useState<any>(\"\")\r\n    const location: any = useLocation()\r\n    const history = useHistory();\r\n\r\n    async function getDocList(){\r\n        let doctors = await getDoctorList()\r\n        setDocList(doctors)\r\n    }\r\n\r\n    async function submitRequest(docid:number, patientProblem:string){\r\n        let reqData = {\r\n            doctorId:docid,\r\n            problem: patientProblem,\r\n            patientId: location.state.patientInfo.patientId  \r\n        }\r\n        if(patientProblem === \"\" || patientProblem === undefined){\r\n            setError(\"Please enter your problems/Symptoms\")\r\n        }else{\r\n            let res = await postPatientRequest(reqData)\r\n            setProblem(\"\")\r\n            setError(\"\")\r\n            history.push({\r\n                pathname: \"/requestList\",\r\n                state: {  //to access state use useLocation hook in function component\r\n                  patientInfo:  location.state.patientInfo \r\n                }\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    function handleChangeProblem(event:any){\r\n        setProblem(event.target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDocList()\r\n    }, [])\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        heading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            flexBasis: '33.33%',\r\n            flexShrink: 0,\r\n        },\r\n        paper: {\r\n            padding: '2rem',\r\n            position: 'relative',\r\n            backgroundColor: \"#EDF2FB\",\r\n            margin: '2rem',\r\n            color: '#012A4A'\r\n            \r\n        },\r\n        rootButton: {\r\n            '&:hover': {\r\n                backgroundColor: \"#014F86\",\r\n            },\r\n            background: \"#012A4A\",\r\n            borderRadius: 3,\r\n            border: 0,\r\n            color: 'white',\r\n            fontWeight: 'bold',\r\n            height: 40,\r\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n            marginTop: 15\r\n        },\r\n        accordionHeading: {\r\n            color: \"#012A4A\"\r\n        },\r\n        textbox: {\r\n            width: \"100% important!\" \r\n        }\r\n    }),\r\n    )\r\n\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState<string | false>(false);\r\n      \r\n    const handleChange = (panel: string) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\r\n      setExpanded(isExpanded ? panel : false);\r\n    }\r\n\r\n\r\n    return(\r\n        <PatientNavBar>\r\n            <Paper elevation={3} classes={{ root: classes.paper }}>\r\n                <div>\r\n                \r\n                <Grid container spacing={2}>\r\n                    {docList.map(elem =>\r\n                        <Grid item xs={12}>\r\n                            <Accordion expanded={expanded === `${elem.doctorId}`} onChange={handleChange(`${elem.doctorId}`)}>\r\n                                <AccordionSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"panel1bh-content\"\r\n                                    id=\"panel1bh-header\"\r\n                                    >\r\n                                    <Typography className={classes.heading}>Dr. {elem.firstname} {elem.lastname}</Typography>\r\n                                    <Typography> </Typography>\r\n                                </AccordionSummary>\r\n\r\n                                <AccordionDetails>\r\n                                    <Typography style={{ width: \"100%\", padding: '3rem' }}>\r\n                                        <h4 className={classes.accordionHeading}>Doctor information:</h4>\r\n                                            Email: {elem.email}<br/>\r\n                                            Address: {elem.address}<br/>\r\n                                            Gender: {elem.gender}<br/>\r\n                                            Languages spoken: {elem.language} \r\n                                        <h4 className={classes.accordionHeading}>Doctor Background:</h4>\r\n                                            Speciality: {elem.speciality}<br/>\r\n                                            Education: {elem.education}<br/>\r\n                                            Certification: {elem.certification}<br/>\r\n                                            Awards: {elem.awards}\r\n                                        <h4 className={classes.accordionHeading}>Create Request:</h4>\r\n                                        \r\n                                        <Grid item xs={12}>\r\n                                            Problem:\r\n                                        <TextField\r\n                                            id=\"outlined-multiline-static\"\r\n                                            multiline\r\n                                            rows={4}\r\n                                            fullWidth\r\n                                            variant=\"outlined\"\r\n                                            onChange={handleChangeProblem}\r\n                                            className={classes.textbox}\r\n                                            />\r\n                                            {error}\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                        <Button variant=\"contained\" onClick={() => submitRequest(elem.doctorId, problem)} classes={{\r\n                                            root: classes.rootButton,\r\n                                        }}>Create Request</Button>\r\n                                        </Grid>\r\n                                    </Typography>\r\n                                </AccordionDetails>\r\n                            </Accordion>\r\n                        </Grid>\r\n                    )}\r\n                </Grid>    \r\n            </div>\r\n        </Paper>\r\n        </PatientNavBar>\r\n       \r\n    )\r\n}",{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":1,"column":16,"nodeType":"134","messageId":"135","endLine":1,"endColumn":24},{"ruleId":"132","severity":1,"message":"136","line":3,"column":35,"nodeType":"134","messageId":"135","endLine":3,"endColumn":39},{"ruleId":"132","severity":1,"message":"137","line":37,"column":11,"nodeType":"134","messageId":"135","endLine":37,"endColumn":24},{"ruleId":"132","severity":1,"message":"138","line":128,"column":11,"nodeType":"134","messageId":"135","endLine":128,"endColumn":28},{"ruleId":"132","severity":1,"message":"139","line":2,"column":8,"nodeType":"134","messageId":"135","endLine":2,"endColumn":13},{"ruleId":"140","severity":1,"message":"141","line":87,"column":8,"nodeType":"142","endLine":87,"endColumn":10,"suggestions":"143"},{"ruleId":"132","severity":1,"message":"144","line":117,"column":25,"nodeType":"134","messageId":"135","endLine":117,"endColumn":29},{"ruleId":"132","severity":1,"message":"145","line":4,"column":10,"nodeType":"134","messageId":"135","endLine":4,"endColumn":21},{"ruleId":"132","severity":1,"message":"146","line":11,"column":12,"nodeType":"134","messageId":"135","endLine":11,"endColumn":23},{"ruleId":"132","severity":1,"message":"147","line":3,"column":26,"nodeType":"134","messageId":"135","endLine":3,"endColumn":36},{"ruleId":"132","severity":1,"message":"148","line":6,"column":8,"nodeType":"134","messageId":"135","endLine":6,"endColumn":16},{"ruleId":"132","severity":1,"message":"149","line":32,"column":11,"nodeType":"134","messageId":"135","endLine":32,"endColumn":18},{"ruleId":"132","severity":1,"message":"150","line":41,"column":7,"nodeType":"134","messageId":"135","endLine":41,"endColumn":16},{"ruleId":"140","severity":1,"message":"141","line":94,"column":8,"nodeType":"142","endLine":94,"endColumn":10,"suggestions":"151"},{"ruleId":"132","severity":1,"message":"152","line":104,"column":15,"nodeType":"134","messageId":"135","endLine":104,"endColumn":19},{"ruleId":"140","severity":1,"message":"141","line":131,"column":8,"nodeType":"142","endLine":131,"endColumn":18,"suggestions":"153"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"136","line":23,"column":10,"nodeType":"134","messageId":"135","endLine":23,"endColumn":14},{"ruleId":"132","severity":1,"message":"154","line":7,"column":10,"nodeType":"134","messageId":"135","endLine":7,"endColumn":20},{"ruleId":"132","severity":1,"message":"155","line":82,"column":17,"nodeType":"134","messageId":"135","endLine":82,"endColumn":20},{"ruleId":"140","severity":1,"message":"141","line":225,"column":6,"nodeType":"142","endLine":225,"endColumn":8,"suggestions":"156"},{"ruleId":"132","severity":1,"message":"155","line":30,"column":17,"nodeType":"134","messageId":"135","endLine":30,"endColumn":20},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'location' is assigned a value but never used.","'handleChangeIndex' is assigned a value but never used.","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getContent'. Either include it or remove the dependency array.","ArrayExpression",["159"],"'user' is assigned a value but never used.","'RequestList' is defined but never used.","'patientInfo' is assigned a value but never used.","'IconButton' is defined but never used.","'EditIcon' is defined but never used.","'history' is assigned a value but never used.","'useStyles' is assigned a value but never used.",["160"],"'data' is assigned a value but never used.",["161"],"'createTrue' is defined but never used.","'res' is assigned a value but never used.",["162"],"no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"163","fix":"165"},{"desc":"166","fix":"167"},{"desc":"163","fix":"168"},"Update the dependencies array to be: [getContent]",{"range":"169","text":"170"},{"range":"171","text":"170"},"Update the dependencies array to be: [expanded, getContent]",{"range":"172","text":"173"},{"range":"174","text":"170"},[2447,2449],"[getContent]",[2549,2551],[4097,4107],"[expanded, getContent]",[6114,6116]]