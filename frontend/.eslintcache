[{"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\index.tsx":"1","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\App.tsx":"3","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\RequestList.tsx":"4","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Login.tsx":"5","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Admin.tsx":"6","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Doctor.tsx":"7","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\ForumList.tsx":"8","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Register.tsx":"9","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientHome.tsx":"10","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\assets\\styles.js":"11","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\remote-functions.ts":"12","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientNavBar.tsx":"13","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\index.ts":"14","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\index.ts":"15","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\Forum.tsx":"16","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\Message.tsx":"17","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DoctorNavBar.tsx":"18","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Request.tsx":"19","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\common\\DoctorsList.tsx":"20","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\common\\DoctorInfoItem.tsx":"21","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DocRequestList.tsx":"22","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PastRequestList.tsx":"23"},{"size":526,"mtime":1610472835938,"results":"24","hashOfConfig":"25"},{"size":440,"mtime":1609881921408,"results":"26","hashOfConfig":"25"},{"size":1633,"mtime":1610753165808,"results":"27","hashOfConfig":"25"},{"size":6723,"mtime":1610759134411,"results":"28","hashOfConfig":"25"},{"size":18663,"mtime":1610666962001,"results":"29","hashOfConfig":"25"},{"size":4171,"mtime":1610666961980,"results":"30","hashOfConfig":"25"},{"size":2815,"mtime":1610752964606,"results":"31","hashOfConfig":"25"},{"size":514,"mtime":1610752964649,"results":"32","hashOfConfig":"25"},{"size":19674,"mtime":1610666962011,"results":"33","hashOfConfig":"25"},{"size":2965,"mtime":1610757412446,"results":"34","hashOfConfig":"25"},{"size":277,"mtime":1610472835761,"results":"35","hashOfConfig":"25"},{"size":6899,"mtime":1610752964792,"results":"36","hashOfConfig":"25"},{"size":8174,"mtime":1610757172288,"results":"37","hashOfConfig":"25"},{"size":23,"mtime":1610472835829,"results":"38","hashOfConfig":"25"},{"size":190,"mtime":1610472835971,"results":"39","hashOfConfig":"25"},{"size":11485,"mtime":1610759453076,"results":"40","hashOfConfig":"25"},{"size":1641,"mtime":1610472835794,"results":"41","hashOfConfig":"25"},{"size":7922,"mtime":1610757098065,"results":"42","hashOfConfig":"25"},{"size":6583,"mtime":1610759302019,"results":"43","hashOfConfig":"25"},{"size":687,"mtime":1610666962013,"results":"44","hashOfConfig":"25"},{"size":6845,"mtime":1610752964658,"results":"45","hashOfConfig":"25"},{"size":8893,"mtime":1610752964604,"results":"46","hashOfConfig":"25"},{"size":5358,"mtime":1610752964652,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"9sh8sg",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\index.tsx",[],["104","105"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\App.tsx",["106","107"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\RequestList.tsx",["108","109","110","111","112"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Login.tsx",["113","114"],"import React, { useState } from \"react\";\r\nimport { TextField, Tabs, Tab, Button, IconButton, Card, InputAdornment, RadioGroup, Radio, FormControlLabel } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\r\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { styles } from '../assets/styles.js';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport Background from '../assets/img/medicalBackground.jpg';\r\nimport { userLogin } from '../remote/remote-functions';\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { exception } from \"console\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            boxShadow: '1px 3px 12px -3px rgba(0,0,0, 1)',\r\n            borderRadius: '1.5rem'\r\n        },\r\n        cssOutlinedInput: {\r\n            '&$focused $notchedOutline': {\r\n                borderColor: \"#014F86\",\r\n            },\r\n            height: 50,\r\n            marginTop: 0,\r\n            paddingTop: 0\r\n        },\r\n\r\n        notchedOutline: {\r\n            borderWidth: '1px',\r\n            borderColor: \"#014F86\"\r\n        },\r\n        focused: {\r\n            borderColor: \"#014F86\"\r\n        },\r\n\r\n        iconfocused: {\r\n            '&:focus': {\r\n                outline: 'none',\r\n            },\r\n        },\r\n\r\n        rootButton: {\r\n            '&:hover': {\r\n                backgroundColor: \"#014F86\",\r\n            },\r\n            background: \"#012A4A\",\r\n            borderRadius: 3,\r\n            border: 0,\r\n            color: 'white',\r\n            fontWeight: 'bold',\r\n            height: 40,\r\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n            marginTop: 15\r\n        },\r\n        indicator: {\r\n            backgroundColor: '#012A4A',\r\n            color: '#012A4A'\r\n        },\r\n    }),\r\n);\r\n\r\nfunction TabPanel(props: any) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-prevent-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-prevent-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && children}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\n\r\nexport const Login: React.FunctionComponent = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const classes = useStyles();\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n    const [hidden, setHidden] = useState(true);\r\n    const [errorUser, setErrorUser] = useState(false);\r\n    const [errorTextUser, setErrorTextUser] = useState(\"\");\r\n    const [errorPassword, setErrorPassword] = useState(false);\r\n    const [errorTextPassword, setErrorTextPassword] = useState(\"\");\r\n    const [errorAuth, setErrorAuth] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [role, setRole] = useState('');\r\n    const [tabValue, setTabValue] = useState(0);\r\n    const [match, setMatch] = useState(false);\r\n\r\n\r\n\r\n    const onChangeUsername = (event: any) => {\r\n        setErrorUser(false);\r\n        setErrorTextUser('');\r\n        setUsername(event.target.value);\r\n    }\r\n\r\n    const passwordOnChange = (event: any) => {\r\n        setErrorPassword(false);\r\n        setErrorTextPassword('');\r\n        setPassword(event.target.value);\r\n    }\r\n    const confirmPasswordOnChange = (event: any) => {\r\n        setConfirmPassword(event.target.value);\r\n    }\r\n\r\n    const handleTabChange = (event: any, newValue: any) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index: any) => {\r\n        setTabValue(index);\r\n    };\r\n\r\n    const toggleShow = () => {\r\n        setHidden(!hidden);\r\n    }\r\n\r\n    const onLogin = async () => {\r\n\r\n        if (username && password) {\r\n            try {\r\n                let user = await userLogin(role, username, password);\r\n                console.log(JSON.stringify(user))\r\n                if(user){\r\n                authentication(user);\r\n                }else{\r\n                    setErrorAuth(true)\r\n                    setError('User Not Found');\r\n                }\r\n            } catch (e) {\r\n                setErrorAuth(true)\r\n                setError('User Not Found');\r\n                console.log(e);\r\n            }\r\n        } else {\r\n            if (!password) {\r\n                setErrorPassword(true);\r\n                setErrorTextPassword('Please enter password')\r\n            }\r\n            if (!username) {\r\n                setErrorUser(true);\r\n                setErrorTextUser('Please enter user')\r\n            }\r\n        }\r\n    }\r\n\r\n    const authentication = (user: any) => {\r\n        if(user.role === \"Admin\"){\r\n            history.push({\r\n                pathname: '/admin',\r\n                state: {  //to access state use useLocation hook in function component\r\n                    adminInfo: user\r\n                },\r\n            });\r\n        }else if(user.role === \"Doctor\"){\r\n            if(user.status === 'Approved'){\r\n                history.push({\r\n                    pathname: '/doctor',\r\n                    state: {  //to access state use useLocation hook in function component\r\n                        doctorInfo: user\r\n                    },\r\n                });\r\n            }else if(user.status === 'Pending'){\r\n                setErrorAuth(true)\r\n                setError('Account is in Pending Status')\r\n            }else if(user.status === 'Rejected'){\r\n                setErrorAuth(true)\r\n                setError('Account is Rejected')\r\n            }  \r\n        }else if(user.role === \"Patient\"){\r\n            history.push({\r\n                pathname: '/patient',\r\n                state: {  //to access state use useLocation hook in function component\r\n                    patientInfo: user\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    const onRegister = () => {\r\n        if (username && password && role) {\r\n            if (password !== confirmPassword) {\r\n                setMatch(true)\r\n            } else {\r\n                history.push({\r\n                    pathname: '/register',\r\n                    state: {  //to access state use useLocation hook in function component\r\n                        role: role,\r\n                        username: username,\r\n                        password: password \r\n                    },\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const MyRadio = withStyles({\r\n        root: {\r\n            color: \"#012A4A\",\r\n            '&$checked': {\r\n                color: \"#014F86\",\r\n            },\r\n        },\r\n        checked: {},\r\n    })((props) => <Radio color=\"default\" {...props} />);\r\n\r\n    const handleRadioChange = (event: any) => {\r\n        setRole(event.target.value);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ backgroundImage: `url(${Background})`, backgroundSize: 'cover', minHeight: '100vh', height: 'auto' }}>\r\n            <h1 id=\"title\">Revature Medical Clinic</h1>\r\n            <Card className=\"cardContainer\" classes={{ root: classes.root }}>\r\n                <Tabs\r\n                    value={tabValue}\r\n                    onChange={handleTabChange}\r\n                    variant=\"fullWidth\"\r\n                    classes={{\r\n                        indicator: classes.indicator,\r\n                    }}\r\n                    className=\"loginTab\"\r\n                >\r\n                    <Tab label=\"LOGIN\" style={{ color: \"white\", backgroundColor: \"#014F86\", width: \"30%\" }} />\r\n                    <Tab label=\"REGISTER\" style={{ color: \"white\", backgroundColor: \"#014F86\" }} />\r\n                </Tabs>\r\n                {/*  ----------------------------LOGIN------------------------ */}\r\n                <TabPanel value={tabValue} index={0}>\r\n                    <form className=\"form\" noValidate>\r\n                        <div className=\"cardRadio\">\r\n                            <RadioGroup row name=\"role\" onChange={handleRadioChange} style={{ color: \"#012A4A\" }}>\r\n                                <FormControlLabel\r\n                                    value=\"Patient\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Patient\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Doctor\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Doctor\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Admin\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Admin\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                            </RadioGroup>\r\n                        </div>\r\n                        <TextField\r\n                            error={errorUser}\r\n                            helperText={errorTextUser}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            placeholder=\"Username\"\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={onChangeUsername}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <AccountCircle />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            error={errorPassword}\r\n                            helperText={errorTextPassword}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            placeholder=\"Password\"\r\n                            type={hidden ? \"password\" : \"text\"}\r\n                            value={password}\r\n                            onChange={passwordOnChange}\r\n                            style={{ marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <VpnKeyIcon />\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={toggleShow}\r\n                                            style={{ color: \"#014F86\" }}\r\n                                        >\r\n                                            {hidden ? <Visibility /> : <VisibilityOff />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <Button\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            className=\"submit\"\r\n                            onClick={() => onLogin()}\r\n                            classes={{\r\n                                root: classes.rootButton,\r\n                            }}\r\n                        > LOG IN </Button>\r\n\r\n                        {(errorAuth) ? <p style={styles.errorTextStyle}>{error}</p> : null}\r\n\r\n                    </form>\r\n                </TabPanel>\r\n                {/*  ----------------------------Register------------------------ */}\r\n\r\n                <TabPanel value={tabValue} index={1}>\r\n                    <form className=\"form\" noValidate>\r\n                        <div className=\"cardRadio\">\r\n                            <RadioGroup row name=\"role\" onChange={handleRadioChange} style={{ color: \"#012A4A\" }}>\r\n                                <FormControlLabel\r\n                                    value=\"Patient\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Patient\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Doctor\"\r\n                                    control={<MyRadio />}\r\n                                    label=\"Doctor\"\r\n                                    labelPlacement=\"top\"\r\n                                    style={{ color: \"#012A4A\" }}\r\n                                />\r\n                            </RadioGroup>\r\n                        </div>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            placeholder=\"New Username\"\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={onChangeUsername}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <AccountCircle />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            placeholder=\"New Password\"\r\n                            type=\"password\"\r\n                            value={password}\r\n                            onChange={passwordOnChange}\r\n                            style={{ marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <VpnKeyIcon />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"confirm password\"\r\n                            placeholder=\"Confirm Password\"\r\n                            type=\"password\"\r\n                            value={confirmPassword}\r\n                            onChange={confirmPasswordOnChange}\r\n                            style={{ marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.cssOutlinedInput,\r\n                                    notchedOutline: classes.notchedOutline,\r\n                                    focused: classes.focused,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <VpnKeyIcon />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n\r\n                        <Button\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            className=\"submit\"\r\n                            onClick={() => onRegister()}\r\n                            classes={{\r\n                                root: classes.rootButton,\r\n                            }}\r\n                        > REGISTER </Button>\r\n\r\n                        {(match) ? <p style={styles.errorTextStyle}>Password doesn't match</p> : null}\r\n\r\n                    </form>\r\n\r\n                </TabPanel>\r\n\r\n\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Admin.tsx",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Doctor.tsx",["115","116","117","118","119","120","121","122","123","124","125","126"],"import React, { useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { IconButton, Tooltip, Paper, Grid, InputLabel, TextField, RadioGroup, FormControlLabel, Radio, Button, Select, MenuItem } from '@material-ui/core';\r\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport DoctorNavBar from './DoctorNavBar';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '&$underline': {\r\n                borderBottom: '0',\r\n            },\r\n        },\r\n        underline: {\r\n            '&:after': {\r\n                borderBottom: '2px solid #012A4A',\r\n            },\r\n        },\r\n        backButton: {\r\n            '&:hover': {\r\n                color: '#014F86',\r\n            },\r\n            color: \"#012A4A\",\r\n            backgroundColor: \"#EDF2FB\",\r\n            position: 'absolute',\r\n            top: 5,\r\n            left: 5,\r\n        },\r\n        paper: {\r\n            padding: '2rem',\r\n            margin: 'auto',\r\n            width: '84%',\r\n            position: 'relative',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between',\r\n            backgroundColor: \"#EDF2FB\",\r\n        },\r\n        rootButton: {\r\n            '&:hover': {\r\n                backgroundColor: \"#014F86\",\r\n            },\r\n            background: \"#012A4A\",\r\n            borderRadius: \"2rem\",\r\n            border: 0,\r\n            color: 'white',\r\n            fontWeight: 'bold',\r\n            height: 40,\r\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n            width: '20%',\r\n            float: 'right'\r\n        },\r\n    })\r\n);\r\n\r\nexport const Doctor: React.FunctionComponent = (props) => {\r\n    const location: any = useLocation();\r\n\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <DoctorNavBar>\r\n        <div>\r\n            <h2 id=\"registerationTitle\">Doctor Details</h2>\r\n            <Paper elevation={3} classes={{ root: classes.paper }}>\r\n                <Grid container spacing={3} >\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> First Name </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.firstname}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Last Name </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.lastname}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Age </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.age}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Gender </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.gender}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Phone Number</InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.phone}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Email Address</InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.email}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Residential Address </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.address}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Education </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.education}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Certifications </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.certification}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Awards </InputLabel>\r\n                        <TextField\r\n                            id=\"filled-required\"\r\n                            value={location.state.doctorInfo.awards}\r\n                            variant=\"filled\"\r\n                            />\r\n                    </Grid>\r\n                   \r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n       </DoctorNavBar>\r\n    );\r\n\r\n    return(\r\n        <DoctorNavBar doctorInfo={location.state.doctorInfo}>\r\n           {location.state.doctorInfo.username}\r\n        </DoctorNavBar>\r\n    )\r\n\r\n}\r\n\r\nexport default Doctor;","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\ForumList.tsx",["127"],"import React from 'react'\r\nimport PatientNavBar from './PatientNavBar'\r\nimport {Forum}  from './forum'\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport DoctorNavBar from './DoctorNavBar'\r\n\r\n\r\nexport const ForumList:React.FunctionComponent = () => {\r\n    const location: any = useLocation();\r\n\r\n    return(\r\n        location.state.patientInfo !== undefined\r\n      ?<PatientNavBar>\r\n            <Forum />\r\n        </PatientNavBar> :\r\n        <DoctorNavBar>\r\n            <Forum/>\r\n        </DoctorNavBar>\r\n    )\r\n}","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Register.tsx",["128"],"import React, { useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { IconButton, Tooltip, Paper, Grid, InputLabel, TextField, RadioGroup, FormControlLabel, Radio, Button, Select, MenuItem } from '@material-ui/core';\r\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { doctorRegister, patientRegister } from '../remote/remote-functions';\r\nimport { styles } from '../assets/styles.js';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '&$underline': {\r\n                borderBottom: '0',\r\n            },\r\n        },\r\n        underline: {\r\n            '&:after': {\r\n                borderBottom: '2px solid #012A4A',\r\n            },\r\n        },\r\n        backButton: {\r\n            '&:hover': {\r\n                color: '#014F86',\r\n            },\r\n            color: \"#012A4A\",\r\n            backgroundColor: \"#EDF2FB\",\r\n            position: 'absolute',\r\n            top: 5,\r\n            left: 5,\r\n        },\r\n        paper: {\r\n            padding: '2rem',\r\n            margin: 'auto',\r\n            width: '84%',\r\n            position: 'relative',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between',\r\n            backgroundColor: \"#EDF2FB\",\r\n        },\r\n        rootButton: {\r\n            '&:hover': {\r\n                backgroundColor: \"#014F86\",\r\n            },\r\n            background: \"#012A4A\",\r\n            borderRadius: \"2rem\",\r\n            border: 0,\r\n            color: 'white',\r\n            fontWeight: 'bold',\r\n            height: 40,\r\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\r\n            width: '20%',\r\n            float: 'right'\r\n        },\r\n    })\r\n);\r\n\r\nexport const Register: React.FunctionComponent = (props) => {\r\n    const location: any = useLocation();\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n    const [age, setAge] = useState(0);\r\n    const [gender, setGender] = useState(\"\");\r\n    const [phone, setPhone] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [address, setAddress] = useState(\"\");\r\n    const [language, setLanguage] = useState(\"\");\r\n    const [healthcardnumber, setHealthcardnumber] = useState(\"\");\r\n    const [education, setEducation] = useState(\"\");\r\n    const [certification, setCertification] = useState(\"\");\r\n    const [speciality, setSpeciality] = useState(\"\");\r\n    const [awards, setAwards] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n\r\n\r\n    const onRegisterSubmit = async () => {\r\n        const patientCredentials = {\r\n            username: location.state.username,\r\n            password: location.state.password,\r\n            firstname: firstname,\r\n            lastname: lastname,\r\n            age: age,\r\n            gender: gender,\r\n            phone: phone,\r\n            email: email,\r\n            address: address,\r\n            language: language,\r\n            healthcardnumber: healthcardnumber,\r\n            role: 'Patient'\r\n        }\r\n\r\n        const doctorCredentials = {\r\n            username: location.state.username,\r\n            password: location.state.password,\r\n            firstname: firstname,\r\n            lastname: lastname,\r\n            age: age,\r\n            gender: gender,\r\n            phone: phone,\r\n            email: email,\r\n            address: address,\r\n            language: language,\r\n            education: education,\r\n            certification: certification,\r\n            speciality: speciality,\r\n            awards: awards,\r\n            status: 'Pending',\r\n            role: 'Doctor'\r\n        }\r\n\r\n        if (location.state.role === 'Doctor') {\r\n            if (firstname && lastname && age && gender && speciality) {\r\n                try {\r\n                    let user = await doctorRegister(doctorCredentials)\r\n                    history.push('/');\r\n                } catch (e) {\r\n                    console.log(e);\r\n                }\r\n            } else {\r\n                setError(\"Please fill out all required fields\");\r\n            }\r\n        } else if (location.state.role === 'Patient') {\r\n            if (firstname && lastname && age && gender && healthcardnumber) {\r\n                try {\r\n                    let user = await patientRegister(patientCredentials)\r\n                    console.log(\"Doctor registered -> \" + JSON.stringify(user));\r\n                    history.push({\r\n                        pathname: '/patient',\r\n                        state: {\r\n                            patientInfo: user\r\n                        },\r\n                    });\r\n                } catch (e) {\r\n                    console.log(e);\r\n                }\r\n            } else {\r\n                setError(\"Please fill out all required fields\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const MyRadio = withStyles({\r\n        root: {\r\n            color: \"#012A4A\",\r\n            '&$checked': {\r\n                color: \"#014F86\",\r\n            },\r\n        },\r\n        checked: {},\r\n    })((props) => <Radio color=\"default\" {...props} />);\r\n\r\n    return (\r\n        <div>\r\n            <Tooltip title=\"Go Back\">\r\n                <IconButton\r\n                    className='float-left'\r\n                    onClick={() => history.push('/')}\r\n                    classes={{\r\n                        root: classes.backButton,\r\n                    }}>\r\n                    <ArrowBackIcon style={{ fontSize: 40 }} />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <h2 id=\"registerationTitle\">Fill out the registeration details</h2>\r\n            <Paper elevation={3} classes={{ root: classes.paper }}>\r\n                <Grid container spacing={3} >\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> First Name </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            required\r\n                            value={firstname}\r\n                            onChange={e => setFirstname(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Last Name </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            required\r\n                            value={lastname}\r\n                            onChange={e => setLastname(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Age </InputLabel>\r\n                        <TextField\r\n                            type=\"number\"\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={age}\r\n                            onChange={e => setAge(parseInt(e.target.value))}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Gender </InputLabel>\r\n                        <RadioGroup row name=\"gender\" value={gender} onChange={(e: any) => setGender(e.target.value)}>\r\n                            <FormControlLabel value=\"female\" control={<MyRadio />} label=\"Female\" style={{ color: \"#012A4A\" }} />\r\n                            <FormControlLabel value=\"male\" control={<MyRadio />} label=\"Male\" style={{ color: \"#012A4A\" }} />\r\n                            <FormControlLabel value=\"other\" control={<MyRadio />} label=\"Other\" style={{ color: \"#012A4A\" }} />\r\n                        </RadioGroup>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Phone Number</InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={phone}\r\n                            onChange={e => setPhone(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Email Address</InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={email}\r\n                            onChange={e => setEmail(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Residential Address </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={address}\r\n                            onChange={e => setAddress(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <InputLabel style={{ marginBottom: 0 }}> Language Spoken </InputLabel>\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            value={language}\r\n                            onChange={e => setLanguage(e.target.value)}\r\n                            style={{ marginBottom: 5, marginTop: 5 }}\r\n                            InputProps={{\r\n                                classes: {\r\n                                    root: classes.root,\r\n                                    underline: classes.underline,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    {\r\n                        (location.state.role === 'Patient') ?\r\n                            <Grid item xs={12}>\r\n                                <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Health Card Number </InputLabel>\r\n                                <TextField\r\n                                    variant=\"filled\"\r\n                                    fullWidth\r\n                                    value={healthcardnumber}\r\n                                    onChange={e => setHealthcardnumber(e.target.value)}\r\n                                    style={{ marginBottom: 5, marginTop: 5 }}\r\n                                    InputProps={{\r\n                                        classes: {\r\n                                            root: classes.root,\r\n                                            underline: classes.underline,\r\n                                        },\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                    {\r\n                        (location.state.role === 'Doctor') ?\r\n                            <>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Speciality </InputLabel>\r\n                                    <Select\r\n                                        variant=\"filled\"\r\n                                        value={speciality}\r\n                                        fullWidth\r\n                                        onChange={e => setSpeciality(String(e.target.value))}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                    >\r\n                                        <MenuItem value={'Allergy and immunology'}>Allergy and immunology</MenuItem>\r\n                                        <MenuItem value={'Anesthesiologist'}>Anesthesiologist</MenuItem>\r\n                                        <MenuItem value={'Cardiologist'}>Cardiologist</MenuItem>\r\n                                        <MenuItem value={'Dermatology'}>Dermatology</MenuItem>\r\n                                        <MenuItem value={'Emergency medicine'}>Emergency medicine</MenuItem>\r\n                                        <MenuItem value={'Family medicine'}>Family medicine</MenuItem>\r\n                                        <MenuItem value={'Medical genetics'}>Medical genetics</MenuItem>\r\n                                        <MenuItem value={'Neurology'}>Neurology</MenuItem>\r\n                                        <MenuItem value={'Ophthalmology'}>Ophthalmology</MenuItem>\r\n                                        <MenuItem value={'Pathology'}>Pathology</MenuItem>\r\n                                        <MenuItem value={'Physical medicine and rehabilitation'}>Physical medicine and rehabilitation</MenuItem>\r\n                                        <MenuItem value={'Psychiatry'}>Psychiatry</MenuItem>\r\n                                        <MenuItem value={'Radiation oncology'}>Radiation oncology</MenuItem>\r\n                                        <MenuItem value={'Surgery'}>Surgery</MenuItem>\r\n                                        <MenuItem value={'Urology'}>Urology</MenuItem>\r\n                                    </Select>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}> Certifications </InputLabel>\r\n                                    <TextField\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                        value={certification}\r\n                                        onChange={e => setCertification(e.target.value)}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                        InputProps={{\r\n                                            classes: {\r\n                                                root: classes.root,\r\n                                                underline: classes.underline,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}> Education Details </InputLabel>\r\n                                    <TextField\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                        multiline\r\n                                        rows={5}\r\n                                        value={education}\r\n                                        onChange={e => setEducation(e.target.value)}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                        InputProps={{\r\n                                            classes: {\r\n                                                root: classes.root,\r\n                                                underline: classes.underline,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <InputLabel style={{ marginBottom: 0 }}> Awards </InputLabel>\r\n                                    <TextField\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                        multiline\r\n                                        rows={5}\r\n                                        value={awards}\r\n                                        onChange={e => setAwards(e.target.value)}\r\n                                        style={{ marginBottom: 5, marginTop: 5 }}\r\n                                        InputProps={{\r\n                                            classes: {\r\n                                                root: classes.root,\r\n                                                underline: classes.underline,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            type=\"button\"\r\n                            variant=\"contained\"\r\n                            className=\"submit\"\r\n                            onClick={() => onRegisterSubmit()}\r\n                            classes={{\r\n                                root: classes.rootButton,\r\n                            }}\r\n                        > REGISTER </Button>\r\n                        {(error) ? <p style={styles.errorTextStyle}>{error}</p> : null}\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientHome.tsx",["129"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\assets\\styles.js",[],["130","131"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\remote-functions.ts",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PatientNavBar.tsx",["132"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\index.ts",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\remote\\index.ts",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\Forum.tsx",["133"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\forum\\Message.tsx",["134","135","136","137","138","139","140","141","142"],"import { spawn } from \"child_process\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { forumList } from \"./mockups\";\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\ninterface MessageIdProps {\r\n  message: string;\r\n  timestamp: string;\r\n  doctor: string;\r\n  patient: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      maxWidth: \"36ch\",\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    inline: {\r\n      display: \"inline\",\r\n    },\r\n  })\r\n);\r\n\r\nexport const Message: React.FC<MessageIdProps> = ({\r\n  message,\r\n  timestamp,\r\n  doctor,\r\n  patient,\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <ListItemText\r\n        primary={<Typography variant=\"h4\">{message}</Typography>}\r\n        secondary={\r\n          <React.Fragment>\r\n            <Typography\r\n              component=\"span\"\r\n              variant=\"body2\"\r\n              className={classes.inline}\r\n              color=\"textPrimary\"\r\n            >\r\n              by:{patient ? patient : doctor}\r\n              <br />\r\n            </Typography>\r\n            Submitted:{timestamp}\r\n          </React.Fragment>\r\n        }\r\n      />\r\n      \r\n    </>\r\n  );\r\n};\r\n",["143","144"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DoctorNavBar.tsx",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\Request.tsx",["145"],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\common\\DoctorsList.tsx",[],"C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\common\\DoctorInfoItem.tsx",["146"],"import React, { useState } from 'react';\r\nimport { Paper, Grid, Chip, Avatar, Tooltip, IconButton, LinearProgress } from '@material-ui/core';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\r\nimport { updateStatus } from '../../remote/remote-functions';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        paperItem: {\r\n            '&:hover': {\r\n                backgroundColor: '#0262a6',\r\n            },\r\n            marginTop: 10,\r\n            padding: 5,\r\n            fontSize: 22,\r\n            backgroundColor: '#014F86',\r\n            color: 'white',\r\n        },\r\n        ApproveButton: {\r\n            '&:hover': {\r\n                color: '#4BB543',\r\n            },\r\n            color: \"white\",\r\n        },\r\n        DenyButton: {\r\n            '&:hover': {\r\n                color: '#DC143C',\r\n            },\r\n            color: \"white\",\r\n        },\r\n        progressStyle: {\r\n            backgroundColor: '#EDF2FB'\r\n        },\r\n        progressBar: {\r\n            backgroundColor: '#012A4A'\r\n        }\r\n    })\r\n);\r\n\r\n\r\n\r\n\r\nexport const DoctorInfoItem: React.FunctionComponent<any> = (props: any) => {\r\n    const classes = useStyles();\r\n\r\n    const item = props.item;\r\n    const [updating, setUpdating] = useState(false)\r\n\r\n\r\n    const statusColor = (status) => {\r\n        switch (status) {\r\n            case 'Approved':\r\n                return <Chip style={{ backgroundColor: '#4BB543', color: 'white', width: '5rem' }} label='Approved' />;\r\n            case 'Rejected':\r\n                return <Chip style={{ backgroundColor: '#DC143C', color: 'white', width: '5rem' }} label='Rejected' />;\r\n            case 'Pending':\r\n                return <Chip style={{ backgroundColor: '#e0e0e0', color: '#012A4A', width: '5rem' }} label='Pending' />;\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (doctorId, status, email) => {\r\n        try {\r\n            setUpdating(true)\r\n            let res = await updateStatus(doctorId, status, email)\r\n            props.handleChange();\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Paper elevation={1} classes={{ root: classes.paperItem }}>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={3} style={{ marginTop: 8, marginLeft: 10 }}>\r\n                        {statusColor(item.status)}\r\n                    </Grid>\r\n                    <Grid item xs style={{ marginTop: 8 }}>\r\n                        <Chip avatar={<Avatar style={{ backgroundColor: '#014F86', color: 'white' }}>ID</Avatar>} label={item.doctorId} style={{ fontSize: 20 }} />\r\n                    </Grid>\r\n                    <Grid item xs={6} style={{ marginTop: 8 }}>\r\n                        {item.firstname} {item.lastname}\r\n                    </Grid>\r\n                    <Grid>\r\n                        <Tooltip title=\"Approved\">\r\n                            <span>\r\n                            <IconButton\r\n                                onClick={() => onSubmit(item.doctorId, \"Approved\", item.email)}\r\n                                disabled={item.status === 'Approved'}\r\n                                classes={{\r\n                                    root: classes.ApproveButton,\r\n                                }}>\r\n                                <ThumbUpIcon style={{ fontSize: 35 }} />\r\n                            </IconButton>\r\n                            </span>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                    <Grid>\r\n                        <Tooltip title=\"Reject\">\r\n                            <IconButton\r\n                                onClick={() => onSubmit(item.doctorId, \"Rejected\", item.email)}\r\n                                disabled={item.status === 'Rejected'}\r\n                                classes={{\r\n                                    root: classes.DenyButton,\r\n                                }}>\r\n                                <ThumbDownIcon style={{ fontSize: 35 }} />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Paper>\r\n            {updating === true ?\r\n                <LinearProgress classes={{indeterminate: classes.progressStyle, barColorPrimary: classes.progressBar}}/>\r\n            :null}\r\n        </>\r\n    );\r\n}","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\DocRequestList.tsx",["147","148","149","150","151","152","153"],"import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport PatientNavBar from './PatientNavBar'\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { Button, Checkbox, Grid, TextareaAutosize, TextField } from '@material-ui/core';\r\nimport { getPendingRequestList, postDoctorResponse } from '../remote/remote-functions';\r\nimport { useLocation } from 'react-router-dom';\r\nimport DoctorNavBar from './DoctorNavBar';\r\nimport { textChangeRangeIsUnchanged } from 'typescript';\r\n\r\ninterface IPatient{\r\n    healthCardNumber:number,\r\n    firstname:string,\r\n    lastname:string\r\n    email:string\r\n    phone:string\r\n\r\n}\r\n\r\ninterface IDoctor{\r\n    firstname:string\r\n    lastname:string\r\n    email:string\r\n    phone:string\r\n}\r\ninterface IReqList{\r\n    patientId:IPatient,\r\n    doctorId:IDoctor,\r\n    problem:string,\r\n    responsed:boolean,\r\n    timeStamp:string,\r\n    requestId:number\r\n    prescription:string\r\n}\r\n\r\n\r\nexport const DocRequestList:React.FunctionComponent<any> = () => {\r\n\r\n    const [data, setRequestList] = useState<IReqList[]>([])\r\n    const location: any = useLocation()\r\n\r\n   \r\n   // const {doctorid} = location.state.doctorInfo.doctorId;  \r\n   // const {patientid} = location.state.patientInfo.patientId;\r\n  //  const patientid = useState<IPatient[]>([])\r\n    \r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            marginLeft: '5%',\r\n            marginRight: '5%',\r\n        },\r\n        heading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            flexBasis: '33.33%',\r\n            flexShrink: 0,\r\n        },\r\n        secondaryHeading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            color: theme.palette.text.secondary,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n    }),\r\n    )\r\n\r\n    /* ------------------------- */\r\n    const [prescription,setPrescription] = useState<string>(\"\");\r\n    const [doctorresponse,setDocRes] = useState<string>(\"\");\r\n    const [hasappointment, setAppointment] = useState<boolean>(false);\r\n\r\n   \r\n\r\n    // const requestId = 1;\r\n   \r\n    \r\n   \r\n    const handlePrescription=e=>{\r\n        setPrescription(e.target.value);\r\n      }\r\n\r\n      const handleDocRes=e=>{        \r\n        setDocRes(e.target.value);   \r\n      }\r\n\r\n\r\n      const handleAppointment = (event: any) => {\r\n        setAppointment(true);\r\n      };\r\n\r\n     \r\n     \r\n\r\n    const postDocResponse=async(reqid)=>{\r\n       \r\n        const docResponse={\r\n             prescription,\r\n             doctorresponse,\r\n             requestId:reqid,\r\n             hasappointment\r\n            \r\n           \r\n          }\r\n      \r\n        const data=await postDoctorResponse(docResponse);\r\n        setPrescription(\"\")\r\n        setDocRes(\"\")\r\n       // setAppointment(false)\r\n\r\n        setExpanded(false)\r\n        \r\n      }\r\n\r\n      /* ------------------------- */\r\n\r\n\r\n    function getDoctorInfo(pinfo:IPatient){\r\n        \r\n        return(\r\n            <>\r\n            <h4>Patient's Details:</h4>\r\n            \r\n            Patients's Name: {pinfo.firstname} {pinfo.lastname}<br/>\r\n            Patient's email: {pinfo.email} <br/>\r\n            Patient's Phone: {pinfo.phone}\r\n             \r\n            </>\r\n        )\r\n    }\r\n\r\n    async function getContent(){       \r\n        let getReqList = await getPendingRequestList(location.state.doctorInfo.doctorId)\r\n        setRequestList(getReqList) \r\n    } \r\n\r\n     useEffect(() => {\r\n        getContent()\r\n    }, [])\r\n\r\n    \r\n        const classes = useStyles();\r\n        const [expanded, setExpanded] = React.useState<string | false>(false);\r\n      \r\n        const handleChange = (panel: string) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\r\n          setExpanded(isExpanded ? panel : false);\r\n        }\r\n        \r\n        return(\r\n            \r\n            <DoctorNavBar>\r\n                {console.log(data[0] ? data[0].requestId: \"\")}\r\n                <div className={classes.root}>\r\n                \r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={3}>\r\n                    \r\n                    </Grid>\r\n                    <Grid item xs={3}>Doctor Name: {data[0] ? data[0].doctorId.firstname : \"\"}</Grid>\r\n                    <Grid item xs={3}></Grid>\r\n                    <Grid item xs={3}></Grid>\r\n                    {data.map(text => \r\n                        <Grid item xs={12}>                            \r\n                            <Accordion expanded={expanded === `${text.requestId}`} onChange={handleChange(`${text.requestId}`)}>\r\n                                <AccordionSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"panel1bh-content\"\r\n                                    id=\"panel1bh-header\"\r\n                                    >\r\n                                    <Typography className={classes.heading} >Reference number: {text.requestId}\r\n                                    <input type='hidden' name=\"props.requestid\" value={text.requestId} />\r\n                                    </Typography>\r\n                                    <Typography className={classes.secondaryHeading}>Status: {text.responsed ? \"Resolved\" : \"Pending\"}</Typography>\r\n                                </AccordionSummary>\r\n                            <AccordionDetails>\r\n                                <Typography>\r\n                                     {getDoctorInfo(text.patientId)}<br/><br/>\r\n                                    \r\n                                    Problem/Symptoms: {text.problem}<br/><br/>\r\n                                   \r\n                                    Medication: <br/>   \r\n                                        <TextField\r\n                                                id=\"outlined-required\"\r\n                                                label=\"Medication details\"\r\n                                                value={prescription} onChange={handlePrescription}\r\n                                                variant=\"outlined\"\r\n                                                />\r\n                                    <br/>  <br/> \r\n                                    Advice to patient: <br/>       \r\n                                    <TextField\r\n                                                id=\"outlined-required\"\r\n                                                label=\"Any Precautions\"\r\n                                                value={doctorresponse} onChange={handleDocRes}\r\n                                                variant=\"outlined\"\r\n                                                />                                      \r\n                                   \r\n                                            <br/> <br/> \r\n                                           \r\n                                    Need Appointment:\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        onChange={handleAppointment}\r\n                                        />\r\n                                       <br/>\r\n                                    <Button variant=\"contained\" color=\"primary\" onClick={()=>postDocResponse(text.requestId)}>\r\n                                        Submit\r\n                                    </Button>                                                    \r\n                                           \r\n                                </Typography>\r\n                            </AccordionDetails>\r\n                            </Accordion>\r\n                        </Grid>\r\n                    )}\r\n                                \r\n                  </Grid>    \r\n                </div>\r\n                \r\n            </DoctorNavBar> \r\n        )\r\n    \r\n}\r\n","C:\\Users\\Hamza\\Desktop\\revature\\project2\\Project2-Team2-FrontEndNew\\frontend\\src\\components\\PastRequestList.tsx",["154","155"],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":1,"column":16,"nodeType":"162","messageId":"163","endLine":1,"endColumn":24},{"ruleId":"160","severity":1,"message":"164","line":3,"column":35,"nodeType":"162","messageId":"163","endLine":3,"endColumn":39},{"ruleId":"160","severity":1,"message":"165","line":2,"column":8,"nodeType":"162","messageId":"163","endLine":2,"endColumn":13},{"ruleId":"160","severity":1,"message":"166","line":10,"column":10,"nodeType":"162","messageId":"163","endLine":10,"endColumn":16},{"ruleId":"160","severity":1,"message":"167","line":13,"column":10,"nodeType":"162","messageId":"163","endLine":13,"endColumn":17},{"ruleId":"160","severity":1,"message":"168","line":96,"column":14,"nodeType":"162","messageId":"163","endLine":96,"endColumn":25},{"ruleId":"169","severity":1,"message":"170","line":132,"column":8,"nodeType":"171","endLine":132,"endColumn":10,"suggestions":"172"},{"ruleId":"160","severity":1,"message":"173","line":13,"column":10,"nodeType":"162","messageId":"163","endLine":13,"endColumn":19},{"ruleId":"160","severity":1,"message":"174","line":129,"column":11,"nodeType":"162","messageId":"163","endLine":129,"endColumn":28},{"ruleId":"160","severity":1,"message":"161","line":1,"column":17,"nodeType":"162","messageId":"163","endLine":1,"endColumn":25},{"ruleId":"160","severity":1,"message":"175","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":20},{"ruleId":"160","severity":1,"message":"176","line":3,"column":22,"nodeType":"162","messageId":"163","endLine":3,"endColumn":29},{"ruleId":"160","severity":1,"message":"177","line":3,"column":67,"nodeType":"162","messageId":"163","endLine":3,"endColumn":77},{"ruleId":"160","severity":1,"message":"178","line":3,"column":79,"nodeType":"162","messageId":"163","endLine":3,"endColumn":95},{"ruleId":"160","severity":1,"message":"179","line":3,"column":97,"nodeType":"162","messageId":"163","endLine":3,"endColumn":102},{"ruleId":"160","severity":1,"message":"166","line":3,"column":104,"nodeType":"162","messageId":"163","endLine":3,"endColumn":110},{"ruleId":"160","severity":1,"message":"180","line":3,"column":112,"nodeType":"162","messageId":"163","endLine":3,"endColumn":118},{"ruleId":"160","severity":1,"message":"181","line":3,"column":120,"nodeType":"162","messageId":"163","endLine":3,"endColumn":128},{"ruleId":"160","severity":1,"message":"182","line":4,"column":22,"nodeType":"162","messageId":"163","endLine":4,"endColumn":32},{"ruleId":"160","severity":1,"message":"183","line":59,"column":11,"nodeType":"162","messageId":"163","endLine":59,"endColumn":18},{"ruleId":"184","severity":1,"message":"185","line":155,"column":5,"nodeType":"186","messageId":"187","endLine":159,"endColumn":6},{"ruleId":"160","severity":1,"message":"188","line":4,"column":10,"nodeType":"162","messageId":"163","endLine":4,"endColumn":20},{"ruleId":"160","severity":1,"message":"189","line":117,"column":25,"nodeType":"162","messageId":"163","endLine":117,"endColumn":29},{"ruleId":"160","severity":1,"message":"175","line":4,"column":26,"nodeType":"162","messageId":"163","endLine":4,"endColumn":36},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"164","line":23,"column":10,"nodeType":"162","messageId":"163","endLine":23,"endColumn":14},{"ruleId":"169","severity":1,"message":"170","line":225,"column":6,"nodeType":"171","endLine":225,"endColumn":8,"suggestions":"190"},{"ruleId":"160","severity":1,"message":"191","line":1,"column":10,"nodeType":"162","messageId":"163","endLine":1,"endColumn":15},{"ruleId":"160","severity":1,"message":"161","line":2,"column":17,"nodeType":"162","messageId":"163","endLine":2,"endColumn":25},{"ruleId":"160","severity":1,"message":"192","line":2,"column":27,"nodeType":"162","messageId":"163","endLine":2,"endColumn":36},{"ruleId":"160","severity":1,"message":"193","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":19},{"ruleId":"160","severity":1,"message":"194","line":5,"column":8,"nodeType":"162","messageId":"163","endLine":5,"endColumn":12},{"ruleId":"160","severity":1,"message":"195","line":6,"column":8,"nodeType":"162","messageId":"163","endLine":6,"endColumn":16},{"ruleId":"160","severity":1,"message":"196","line":7,"column":8,"nodeType":"162","messageId":"163","endLine":7,"endColumn":15},{"ruleId":"160","severity":1,"message":"197","line":9,"column":8,"nodeType":"162","messageId":"163","endLine":9,"endColumn":22},{"ruleId":"160","severity":1,"message":"198","line":10,"column":8,"nodeType":"162","messageId":"163","endLine":10,"endColumn":14},{"ruleId":"156","replacedBy":"199"},{"ruleId":"158","replacedBy":"200"},{"ruleId":"160","severity":1,"message":"201","line":30,"column":17,"nodeType":"162","messageId":"163","endLine":30,"endColumn":20},{"ruleId":"160","severity":1,"message":"201","line":65,"column":17,"nodeType":"162","messageId":"163","endLine":65,"endColumn":20},{"ruleId":"160","severity":1,"message":"165","line":2,"column":8,"nodeType":"162","messageId":"163","endLine":2,"endColumn":13},{"ruleId":"160","severity":1,"message":"202","line":3,"column":8,"nodeType":"162","messageId":"163","endLine":3,"endColumn":21},{"ruleId":"160","severity":1,"message":"203","line":10,"column":18,"nodeType":"162","messageId":"163","endLine":10,"endColumn":26},{"ruleId":"160","severity":1,"message":"204","line":10,"column":34,"nodeType":"162","messageId":"163","endLine":10,"endColumn":50},{"ruleId":"160","severity":1,"message":"205","line":14,"column":10,"nodeType":"162","messageId":"163","endLine":14,"endColumn":36},{"ruleId":"160","severity":1,"message":"206","line":114,"column":15,"nodeType":"162","messageId":"163","endLine":114,"endColumn":19},{"ruleId":"169","severity":1,"message":"170","line":147,"column":8,"nodeType":"171","endLine":147,"endColumn":10,"suggestions":"207"},{"ruleId":"160","severity":1,"message":"208","line":40,"column":7,"nodeType":"162","messageId":"163","endLine":40,"endColumn":16},{"ruleId":"169","severity":1,"message":"170","line":93,"column":8,"nodeType":"171","endLine":93,"endColumn":10,"suggestions":"209"},"no-native-reassign",["210"],"no-negated-in-lhs",["211"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'axios' is defined but never used.","'Button' is defined but never used.","'Preview' is defined but never used.","'downloadDom' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getContent'. Either include it or remove the dependency array.","ArrayExpression",["212"],"'exception' is defined but never used.","'handleChangeIndex' is assigned a value but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Radio' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'withStyles' is defined but never used.","'history' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'useHistory' is defined but never used.","'user' is assigned a value but never used.",["213"],"'spawn' is defined but never used.","'useEffect' is defined but never used.","'forumList' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'Divider' is defined but never used.","'ListItemAvatar' is defined but never used.","'Avatar' is defined but never used.",["210"],["211"],"'res' is assigned a value but never used.","'PatientNavBar' is defined but never used.","'Checkbox' is defined but never used.","'TextareaAutosize' is defined but never used.","'textChangeRangeIsUnchanged' is defined but never used.","'data' is assigned a value but never used.",["214"],"'useStyles' is assigned a value but never used.",["215"],"no-global-assign","no-unsafe-negation",{"desc":"216","fix":"217"},{"desc":"216","fix":"218"},{"desc":"216","fix":"219"},{"desc":"216","fix":"220"},"Update the dependencies array to be: [getContent]",{"range":"221","text":"222"},{"range":"223","text":"222"},{"range":"224","text":"222"},{"range":"225","text":"222"},[4010,4012],"[getContent]",[6114,6116],[3919,3921],[2523,2525]]